
--- Config ---
leaky: (np.float64(0.5573277492256092), np.float64(0.9768295906294006), np.float64(0.5408137322063198))
inp_scaling: (np.float64(0.18479787894378308), np.float64(0.386889153965717), np.float64(0.9869752845605064))
units: (250, 400, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.717066850638548), np.float64(0.5348704842240584), np.float64(0.6848335463787385))
inp_scaling: (np.float64(0.5228677137155829), np.float64(0.9811996787175848), np.float64(0.8253435451414167))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 3120.249,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9251682577479581), np.float64(0.6756141235627241), np.float64(0.7554064855641816))
inp_scaling: (np.float64(0.3269351684620795), np.float64(0.5476407610834756), np.float64(0.342604599286388))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 35.221806,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8771285935577448), np.float64(0.7353100639548236), np.float64(0.5356997591562799))
inp_scaling: (np.float64(0.7820859448239329), np.float64(0.43683913173488687), np.float64(0.791803446738489))
units: (300, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 150.81209,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9822642862797484), np.float64(0.958101264641518), np.float64(0.8583959444437249))
inp_scaling: (np.float64(0.4846960866548221), np.float64(0.7821555238864424), np.float64(0.812234230346236))
units: (400, 200, 350)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6119400361360725), np.float64(0.568948340929147), np.float64(0.5741543644916616))
inp_scaling: (np.float64(0.39069728679335725), np.float64(0.5876500181075102), np.float64(0.15384343828247676))
units: (500, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 21.055376,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6808321785469064), np.float64(0.8492330575877003), np.float64(0.7615640128063904))
inp_scaling: (np.float64(0.3531193286216794), np.float64(0.19696495850518136), np.float64(0.6705649841280502))
units: (450, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 445.8904,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9219565235625428), np.float64(0.8966054822338884), np.float64(0.9577163246087298))
inp_scaling: (np.float64(0.6122784214383643), np.float64(0.2092269893250574), np.float64(0.560119517544753))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 630.8362,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9691010354427032), np.float64(0.605079870120194), np.float64(0.7704286999407529))
inp_scaling: (np.float64(0.11346326512793467), np.float64(0.678934190995202), np.float64(0.572501537445605))
units: (400, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 111.21193,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6179882022905023), np.float64(0.5699519893178281), np.float64(0.5057844529656118))
inp_scaling: (np.float64(0.27783001911663974), np.float64(0.11223038726373102), np.float64(0.7483027116264919))
units: (500, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 914.15076,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6212708726617903), np.float64(0.8348181745473087), np.float64(0.6695792158756008))
inp_scaling: (np.float64(0.3067614450482402), np.float64(0.9516192056982758), np.float64(0.4327330094983195))
units: (450, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 48.47203,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8757871784899822), np.float64(0.6823014449580009), np.float64(0.6974664972195074))
inp_scaling: (np.float64(0.9979283654162255), np.float64(0.34730440243568805), np.float64(0.7282816964968764))
units: (250, 350, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8624396237537357), np.float64(0.8683254664612943), np.float64(0.5738617911442241))
inp_scaling: (np.float64(0.8460863285099854), np.float64(0.502837094797962), np.float64(0.17523846910762364))
units: (400, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 219.76125,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9033595515072712), np.float64(0.5710987970341834), np.float64(0.9788361659349227))
inp_scaling: (np.float64(0.24635296379010813), np.float64(0.19759854712735306), np.float64(0.6577268694260119))
units: (250, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 368.24164,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8675453166384105), np.float64(0.6748812136492139), np.float64(0.5398247766852466))
inp_scaling: (np.float64(0.5569342399827191), np.float64(0.33037699257421627), np.float64(0.10141960773702494))
units: (400, 300, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9968560763829699), np.float64(0.796036496142078), np.float64(0.7893362161175845))
inp_scaling: (np.float64(0.7694351507624407), np.float64(0.287274495822607), np.float64(0.4163829095238546))
units: (400, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 517.7465,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6089006958678999), np.float64(0.8585520757889308), np.float64(0.5390332813863147))
inp_scaling: (np.float64(0.8859591961621224), np.float64(0.5394360988716097), np.float64(0.6174455962420342))
units: (450, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 4174.0166,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5586029341748362), np.float64(0.5547216658439571), np.float64(0.7830623996777171))
inp_scaling: (np.float64(0.9611733937605977), np.float64(0.9566652973118425), np.float64(0.16428633371159757))
units: (450, 450, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6813315783272276), np.float64(0.7537431519615894), np.float64(0.8914894455462052))
inp_scaling: (np.float64(0.578436069569098), np.float64(0.293796192622914), np.float64(0.39507555138425887))
units: (200, 250, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7239669286834237), np.float64(0.8576109521575532), np.float64(0.9729316857840005))
inp_scaling: (np.float64(0.8960063342994937), np.float64(0.23209218422673653), np.float64(0.8472115811463712))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 6849.0273,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9263564744064635), np.float64(0.9272620138729449), np.float64(0.8722136368023152))
inp_scaling: (np.float64(0.9566503916417123), np.float64(0.6721562394925545), np.float64(0.11188229337270636))
units: (500, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 222.41138,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8214828345364246), np.float64(0.6651440080004664), np.float64(0.6299016042359338))
inp_scaling: (np.float64(0.45561143216852884), np.float64(0.5627650007610708), np.float64(0.22056473177507213))
units: (450, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 32.858864,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7600602809056953), np.float64(0.769397495736601), np.float64(0.969026778779976))
inp_scaling: (np.float64(0.3141427953072671), np.float64(0.6220126392099925), np.float64(0.4067294842369683))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 49.44506,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7650521532068952), np.float64(0.6680333961702885), np.float64(0.7028451781929588))
inp_scaling: (np.float64(0.10376789327623075), np.float64(0.1737831121488245), np.float64(0.3961575886855315))
units: (350, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 340.3109,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7042834118231254), np.float64(0.902177650657682), np.float64(0.598196890837))
inp_scaling: (np.float64(0.168656413641641), np.float64(0.4675869529854204), np.float64(0.8748913075171589))
units: (450, 200, 250)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.750834894628069), np.float64(0.9503238287083893), np.float64(0.641047756552651))
inp_scaling: (np.float64(0.6711956615002592), np.float64(0.9615461253855757), np.float64(0.579165013812035))
units: (350, 200, 250)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7274068199021881), np.float64(0.7918664406833847), np.float64(0.5044711099751186))
inp_scaling: (np.float64(0.4826788840525209), np.float64(0.4202269860589305), np.float64(0.6445556294906913))
units: (450, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 549.41376,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5533876834785123), np.float64(0.9464123824535666), np.float64(0.6275669462503716))
inp_scaling: (np.float64(0.20278986247247588), np.float64(0.5162134296152743), np.float64(0.7778640546469333))
units: (350, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 2987.0413,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8002074197331326), np.float64(0.6166075064182621), np.float64(0.9802125705104968))
inp_scaling: (np.float64(0.5846699633699355), np.float64(0.3445449787233912), np.float64(0.4286333678656671))
units: (300, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 175.67548,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9892383369434594), np.float64(0.7388015341154386), np.float64(0.5201023437780767))
inp_scaling: (np.float64(0.39724826023102877), np.float64(0.1711277549969344), np.float64(0.8725914337813364))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5730.301,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8780135061078498), np.float64(0.6097444507434043), np.float64(0.7409074405318816))
inp_scaling: (np.float64(0.3392867925538066), np.float64(0.520920453968192), np.float64(0.937747021842421))
units: (450, 200, 450)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7077687107545557), np.float64(0.678391107324658), np.float64(0.880263784860255))
inp_scaling: (np.float64(0.4214253169514848), np.float64(0.820498397884451), np.float64(0.38336431486350864))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 149.1005,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6051633762610177), np.float64(0.5441627302789575), np.float64(0.8885383250363812))
inp_scaling: (np.float64(0.7916245154058608), np.float64(0.7910608476644753), np.float64(0.8604785588323796))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 16562.928,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5463661798072454), np.float64(0.6067359757311894), np.float64(0.6357832910362459))
inp_scaling: (np.float64(0.6886578948009301), np.float64(0.39594695748673414), np.float64(0.9600746262010762))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 75020.055,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5475156764647048), np.float64(0.5867976130876841), np.float64(0.8152569962721612))
inp_scaling: (np.float64(0.39898712902813405), np.float64(0.6845051033161723), np.float64(0.7747084195628493))
units: (400, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 6614.2886,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5110763227563607), np.float64(0.8277664581278339), np.float64(0.867511333508455))
inp_scaling: (np.float64(0.2937845609472618), np.float64(0.871168638747161), np.float64(0.5461320509213863))
units: (250, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 540.6267,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9492451759321525), np.float64(0.9537577279045131), np.float64(0.6433959460035137))
inp_scaling: (np.float64(0.964030697237953), np.float64(0.6874990773025942), np.float64(0.2367570735003305))
units: (400, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 103.53446,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8124970424994419), np.float64(0.8989266409108513), np.float64(0.5144069033510129))
inp_scaling: (np.float64(0.7182627844882457), np.float64(0.9829182775982884), np.float64(0.9289157580290555))
units: (400, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1313.0359,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9799258739438048), np.float64(0.7363982634987144), np.float64(0.8672458655033063))
inp_scaling: (np.float64(0.10793354377772671), np.float64(0.4116497019672867), np.float64(0.2781424705766279))
units: (400, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 84.44483,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7026534142414043), np.float64(0.5850395450825415), np.float64(0.8251217805802769))
inp_scaling: (np.float64(0.9172239136905151), np.float64(0.7614383535553378), np.float64(0.9956849378929288))
units: (250, 200, 300)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5409430626848382), np.float64(0.6420390490035865), np.float64(0.7764954839424543))
inp_scaling: (np.float64(0.6733598924808505), np.float64(0.9325250208780953), np.float64(0.4633501560375487))
units: (500, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 35.431744,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.567375817474592), np.float64(0.9594960514038695), np.float64(0.611687269418285))
inp_scaling: (np.float64(0.44007893150415966), np.float64(0.5586054383146052), np.float64(0.6614506384751284))
units: (200, 300, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7159232273262955), np.float64(0.5559593703566228), np.float64(0.7900393770419242))
inp_scaling: (np.float64(0.520092098348417), np.float64(0.758864821895118), np.float64(0.947997961866534))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 2638.1758,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9775986885946395), np.float64(0.509992739146282), np.float64(0.7506203456622584))
inp_scaling: (np.float64(0.4141910517474804), np.float64(0.8250068491903433), np.float64(0.4277821818618981))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 66.93775,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5683754755973417), np.float64(0.6171252128221685), np.float64(0.7487004190499029))
inp_scaling: (np.float64(0.3196070110324316), np.float64(0.2558817979534605), np.float64(0.6627122928108375))
units: (300, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 685.44794,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5809749064465088), np.float64(0.9418435128012588), np.float64(0.8667084243353445))
inp_scaling: (np.float64(0.5341487024376615), np.float64(0.8718686708212995), np.float64(0.3973770986124039))
units: (450, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 39.01948,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8375575809851787), np.float64(0.5568767067479556), np.float64(0.9197987209851654))
inp_scaling: (np.float64(0.4406427702345771), np.float64(0.3545184608273101), np.float64(0.1787923982985454))
units: (450, 450, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6328594501473312), np.float64(0.9212443582439223), np.float64(0.6010023816030733))
inp_scaling: (np.float64(0.38335149183593176), np.float64(0.550849629543931), np.float64(0.227924496144308))
units: (300, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 278.69522,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5292650856443822), np.float64(0.9141935094762348), np.float64(0.7949254085829123))
inp_scaling: (np.float64(0.5390138496935212), np.float64(0.6487734754222333), np.float64(0.7156791274189552))
units: (500, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 9022.387,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7413759901239217), np.float64(0.7311373918462931), np.float64(0.5156738580846467))
inp_scaling: (np.float64(0.15984340586320384), np.float64(0.36904999171085984), np.float64(0.5330068195212032))
units: (300, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 266.3825,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5539793095991754), np.float64(0.6731813446908295), np.float64(0.9161053507480514))
inp_scaling: (np.float64(0.657474615583612), np.float64(0.27888012749044955), np.float64(0.8021771109424235))
units: (350, 200, 250)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5027621112563083), np.float64(0.5270208216779393), np.float64(0.7773818579741233))
inp_scaling: (np.float64(0.46273301660635213), np.float64(0.3899680720924523), np.float64(0.8031170885392721))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1570.0483,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6798182434882762), np.float64(0.5637459877484918), np.float64(0.7319440158868129))
inp_scaling: (np.float64(0.31807511875065086), np.float64(0.9911850081610329), np.float64(0.9789579536542867))
units: (350, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 35851.242,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6007754259641905), np.float64(0.8223554341096455), np.float64(0.8278183349574819))
inp_scaling: (np.float64(0.3794202389895409), np.float64(0.17830411173252947), np.float64(0.9393877418553778))
units: (400, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 61078.285,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5751708750703846), np.float64(0.6904870084472474), np.float64(0.9033854363317224))
inp_scaling: (np.float64(0.42936886751005), np.float64(0.5012126493829998), np.float64(0.4916990154204075))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 876.2535,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7179547078063868), np.float64(0.7722743181764451), np.float64(0.6319359181560602))
inp_scaling: (np.float64(0.8948296351624431), np.float64(0.9861585771337856), np.float64(0.5080137044129773))
units: (400, 200, 350)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5633409242122092), np.float64(0.6211497851906682), np.float64(0.5347774184014956))
inp_scaling: (np.float64(0.18583794533505704), np.float64(0.8097027113861214), np.float64(0.3589648848096699))
units: (300, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 74.74717,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9749650279511894), np.float64(0.5313678614779849), np.float64(0.9177026238655763))
inp_scaling: (np.float64(0.17587244051271322), np.float64(0.10716716859431731), np.float64(0.5420459500262474))
units: (350, 350, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5186749128559114), np.float64(0.9472868016176141), np.float64(0.5419452515799189))
inp_scaling: (np.float64(0.26710683203164154), np.float64(0.927501818503883), np.float64(0.4495167102676648))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 50.245106,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8040129791449613), np.float64(0.8118956852844348), np.float64(0.6955713420143669))
inp_scaling: (np.float64(0.89049690585719), np.float64(0.8266311555867683), np.float64(0.13039310709299518))
units: (450, 200, 450)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9568927116241852), np.float64(0.6391587124127325), np.float64(0.5657046958761139))
inp_scaling: (np.float64(0.26195147706310706), np.float64(0.6045403484394238), np.float64(0.7675993944037411))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 10319.583,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6012431844097691), np.float64(0.5473401103376321), np.float64(0.6153454480282715))
inp_scaling: (np.float64(0.940080920361967), np.float64(0.8943740680625849), np.float64(0.3310521624297211))
units: (200, 300, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5546600221607385), np.float64(0.9443076496777945), np.float64(0.7600721787304425))
inp_scaling: (np.float64(0.7725474721156943), np.float64(0.20045613783928778), np.float64(0.6563589626115663))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 851.95575,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7830407570426857), np.float64(0.8636219914239396), np.float64(0.8326689831675798))
inp_scaling: (np.float64(0.5646647830995656), np.float64(0.47855375981490267), np.float64(0.6965817638894138))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 336.81015,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9627775217033185), np.float64(0.9302483789881681), np.float64(0.9573444716806371))
inp_scaling: (np.float64(0.4126100171179423), np.float64(0.789050020049708), np.float64(0.7154523175862156))
units: (350, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1943.1345,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7675473470862185), np.float64(0.9525498734778639), np.float64(0.5072141012404924))
inp_scaling: (np.float64(0.21970721693568745), np.float64(0.5809074278381601), np.float64(0.8981320844619165))
units: (350, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1450.5425,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9915479146032924), np.float64(0.9541015994064777), np.float64(0.9255104201178338))
inp_scaling: (np.float64(0.247507080862245), np.float64(0.41511093774108965), np.float64(0.2136997659550648))
units: (500, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 40.918736,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6531293491524311), np.float64(0.8655520735735784), np.float64(0.6262217880479917))
inp_scaling: (np.float64(0.3028256221876171), np.float64(0.38372687776889425), np.float64(0.538183381637429))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5515034672359658), np.float64(0.6119759905294044), np.float64(0.8847044412414504))
inp_scaling: (np.float64(0.9899739825733594), np.float64(0.7768319408223946), np.float64(0.43908625963910075))
units: (400, 450, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7528001273254754), np.float64(0.9031319620696439), np.float64(0.7741267002174157))
inp_scaling: (np.float64(0.6478545853504023), np.float64(0.4753744677707985), np.float64(0.3240338809071087))
units: (300, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 177.28996,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9889273341454018), np.float64(0.6661813839768109), np.float64(0.7284955551796924))
inp_scaling: (np.float64(0.1728342314119079), np.float64(0.5839670506752503), np.float64(0.7049479595588664))
units: (250, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 5370.736,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5132510986347351), np.float64(0.6058837220817306), np.float64(0.6595765208875012))
inp_scaling: (np.float64(0.3277000759152259), np.float64(0.2916195529565133), np.float64(0.22545454034507573))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 185.87483,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6960447612362155), np.float64(0.7614656056290825), np.float64(0.9146174839467502))
inp_scaling: (np.float64(0.3091190266423358), np.float64(0.6306010017466681), np.float64(0.14105457258599272))
units: (450, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 36.001953,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9721000362905604), np.float64(0.8127310914432939), np.float64(0.7564678491547709))
inp_scaling: (np.float64(0.6420210891305314), np.float64(0.40353906705187426), np.float64(0.42465630151545286))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 174.3701,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5897354218359909), np.float64(0.5344861576716128), np.float64(0.9740356895400963))
inp_scaling: (np.float64(0.5827622731965465), np.float64(0.37104192212400955), np.float64(0.34654736707867495))
units: (400, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 316.72568,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7477331436312519), np.float64(0.7084015521897216), np.float64(0.7733181020429276))
inp_scaling: (np.float64(0.6327571069320593), np.float64(0.13496805616522384), np.float64(0.6145595000044343))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 825.69073,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7142895112751433), np.float64(0.8530358160421918), np.float64(0.9957310969637612))
inp_scaling: (np.float64(0.707817809987984), np.float64(0.2329919155092086), np.float64(0.21566792164626214))
units: (400, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 378.60968,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7993756092941047), np.float64(0.9809985981425657), np.float64(0.7815643934037961))
inp_scaling: (np.float64(0.2583116597755667), np.float64(0.22564048063454814), np.float64(0.6667671122770645))
units: (300, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 11230.977,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8444009837320272), np.float64(0.8881955007539917), np.float64(0.5545157470238735))
inp_scaling: (np.float64(0.2285511641156923), np.float64(0.6837968227510719), np.float64(0.8456963400449897))
units: (300, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 5046.0635,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9116305966281198), np.float64(0.8906472389185294), np.float64(0.630535631472706))
inp_scaling: (np.float64(0.7458307184149329), np.float64(0.537622772063343), np.float64(0.5102953269942401))
units: (450, 200, 400)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8707890317500757), np.float64(0.5253534440253304), np.float64(0.7249967315032292))
inp_scaling: (np.float64(0.8121796752359471), np.float64(0.24044297691550606), np.float64(0.7503242681984377))
units: (350, 200, 300)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8631910372545608), np.float64(0.746629154437841), np.float64(0.932691744753104))
inp_scaling: (np.float64(0.9699350801896559), np.float64(0.3887524140872253), np.float64(0.19872191798699632))
units: (350, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 128.23633,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8026651895163476), np.float64(0.7336422831667753), np.float64(0.6775163385415534))
inp_scaling: (np.float64(0.41369642303832577), np.float64(0.541115781033153), np.float64(0.7684686833952059))
units: (350, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 196.56415,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7562490501501535), np.float64(0.9374926669758855), np.float64(0.9184158271090777))
inp_scaling: (np.float64(0.33812423060766106), np.float64(0.6209720141426132), np.float64(0.22947835540048347))
units: (300, 450, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9198457767518535), np.float64(0.832031458406131), np.float64(0.8069419894542398))
inp_scaling: (np.float64(0.7107260613868539), np.float64(0.2791356996400618), np.float64(0.2611556757881983))
units: (200, 250, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6123291399251981), np.float64(0.8316136740440592), np.float64(0.9567072913064151))
inp_scaling: (np.float64(0.7847576089095005), np.float64(0.5018697003989875), np.float64(0.5489979063228845))
units: (400, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 128.01012,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.968636296936664), np.float64(0.8062054906992876), np.float64(0.9905710559102705))
inp_scaling: (np.float64(0.6997356815597048), np.float64(0.10317636401433376), np.float64(0.7509647207446049))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 152963.1,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6136100841873374), np.float64(0.7011767108205129), np.float64(0.9071540228728094))
inp_scaling: (np.float64(0.45746498184871975), np.float64(0.7320182572773004), np.float64(0.4697871304791932))
units: (250, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 279.9801,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5450988732355293), np.float64(0.8776641648920271), np.float64(0.8088186289280426))
inp_scaling: (np.float64(0.9456861108074878), np.float64(0.7716966386816405), np.float64(0.648262911070466))
units: (400, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 27088.246,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8369258137012532), np.float64(0.6656534784326913), np.float64(0.8791422315720123))
inp_scaling: (np.float64(0.22227609139096471), np.float64(0.49024007180095786), np.float64(0.1834463603762329))
units: (200, 450, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8614880173885853), np.float64(0.9129693849659479), np.float64(0.8978283255854025))
inp_scaling: (np.float64(0.49159070699684504), np.float64(0.40553999647060435), np.float64(0.9620135517718085))
units: (350, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 9023.458,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8854786669700162), np.float64(0.894250539743493), np.float64(0.7576958762441024))
inp_scaling: (np.float64(0.7659624018784281), np.float64(0.39766575603807097), np.float64(0.32588127322350635))
units: (400, 200, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8607760907133601), np.float64(0.8618970885246102), np.float64(0.9125905901754038))
inp_scaling: (np.float64(0.5125659722872262), np.float64(0.19106474989281552), np.float64(0.8760072849101275))
units: (450, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 52813.316,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6669721323601288), np.float64(0.7333527324361919), np.float64(0.791640205312578))
inp_scaling: (np.float64(0.5690327134117806), np.float64(0.1753082745407923), np.float64(0.37294537480538215))
units: (450, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 316.77832,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7311300966316178), np.float64(0.8805291866267388), np.float64(0.6519172241352245))
inp_scaling: (np.float64(0.8500906836747527), np.float64(0.5297380435414403), np.float64(0.1483697957223682))
units: (300, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 84.09955,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6898491450644249), np.float64(0.9099503761441259), np.float64(0.9293686130094427))
inp_scaling: (np.float64(0.829415425494011), np.float64(0.8530157790425792), np.float64(0.5435305499945412))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2487.151,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7326784761687555), np.float64(0.6293425930388727), np.float64(0.5703569402304616))
inp_scaling: (np.float64(0.3399406644903601), np.float64(0.9775247734569154), np.float64(0.4831782404128112))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 80.341095,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8385930571696003), np.float64(0.7272193397502853), np.float64(0.748300904012943))
inp_scaling: (np.float64(0.9585134951949459), np.float64(0.7438228309771572), np.float64(0.2896530553303175))
units: (250, 200, 250)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9972842001469516), np.float64(0.54532335007657), np.float64(0.5103890281465213))
inp_scaling: (np.float64(0.293479899022842), np.float64(0.5817546790180789), np.float64(0.6024546698270065))
units: (350, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 428.5614,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6289001719947327), np.float64(0.5282827871613587), np.float64(0.6155736235204325))
inp_scaling: (np.float64(0.4533309798014007), np.float64(0.19451616536638602), np.float64(0.16519686214188323))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 144.5847,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.668637002613296), np.float64(0.5623791949829295), np.float64(0.5208115122768423))
inp_scaling: (np.float64(0.7427756220296138), np.float64(0.21178542522771004), np.float64(0.21485348735348342))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 93.031944,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8382401774169064), np.float64(0.5449975029622875), np.float64(0.8506916978733549))
inp_scaling: (np.float64(0.8219350833391195), np.float64(0.680389488061686), np.float64(0.34325048334754826))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 26.388327,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6792804867042677), np.float64(0.5924265372000872), np.float64(0.9506114222441719))
inp_scaling: (np.float64(0.7804257028250439), np.float64(0.1807585280003332), np.float64(0.4566370751903098))
units: (300, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 899.2767,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.889760395288347), np.float64(0.9677949542834265), np.float64(0.6258619100134879))
inp_scaling: (np.float64(0.9902005010605631), np.float64(0.7754200742602309), np.float64(0.49830896150440074))
units: (450, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 142.55997,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9429899446790446), np.float64(0.5172996625557315), np.float64(0.9739348864858457))
inp_scaling: (np.float64(0.11552929550280092), np.float64(0.2233201929918496), np.float64(0.38159869245164935))
units: (200, 450, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.928165598082717), np.float64(0.5382854152036122), np.float64(0.9773045884757947))
inp_scaling: (np.float64(0.7678551624781222), np.float64(0.3854477397949858), np.float64(0.24555843363771862))
units: (400, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 37.15281,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7912342859357491), np.float64(0.5541716898195449), np.float64(0.7718298338284939))
inp_scaling: (np.float64(0.912326959129457), np.float64(0.4313123157303702), np.float64(0.1361414477837189))
units: (250, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 44.74096,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5438158048993209), np.float64(0.8867066875218741), np.float64(0.5335008048639437))
inp_scaling: (np.float64(0.5275307468667053), np.float64(0.11543163644158738), np.float64(0.3773135419083665))
units: (500, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 3422.5083,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7427254428461937), np.float64(0.5527794991927482), np.float64(0.9901267457195682))
inp_scaling: (np.float64(0.508194713254567), np.float64(0.6542774092036262), np.float64(0.4810220681702675))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 186.64069,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9321746716906416), np.float64(0.6814140562967472), np.float64(0.6883278792623518))
inp_scaling: (np.float64(0.4060182218323255), np.float64(0.7079339390172966), np.float64(0.41499269625880564))
units: (400, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 81.88358,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.66308903277832), np.float64(0.9522157516640972), np.float64(0.7180849692882272))
inp_scaling: (np.float64(0.36776830737976796), np.float64(0.4604588516060243), np.float64(0.8211572872834895))
units: (300, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 460.54514,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9500867463077123), np.float64(0.6685089290910063), np.float64(0.5747185149611607))
inp_scaling: (np.float64(0.6202812204126198), np.float64(0.30393952506469024), np.float64(0.6552106142417352))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 481.58054,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6985421001863533), np.float64(0.6158732024638653), np.float64(0.820521667283418))
inp_scaling: (np.float64(0.33614998266576257), np.float64(0.3365074813796559), np.float64(0.4709671201135165))
units: (300, 200, 450)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6678011837477265), np.float64(0.6193281063720256), np.float64(0.7375501276941087))
inp_scaling: (np.float64(0.24567597593617593), np.float64(0.5065742766889834), np.float64(0.13131523327140487))
units: (300, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 45.551,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7350764756579705), np.float64(0.6927411193581181), np.float64(0.5218153643073186))
inp_scaling: (np.float64(0.7099838203299208), np.float64(0.9555277565062278), np.float64(0.5343603571610467))
units: (500, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 335.0198,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5106483703134839), np.float64(0.7026344406140401), np.float64(0.7821883415456445))
inp_scaling: (np.float64(0.14174014993646025), np.float64(0.12151966376377614), np.float64(0.2479857127633411))
units: (450, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 685.2406,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5192796892306382), np.float64(0.8862473591062836), np.float64(0.5242256957834268))
inp_scaling: (np.float64(0.8300084013280159), np.float64(0.7342822467485477), np.float64(0.7871064394566517))
units: (200, 200, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7377561012282017), np.float64(0.9403233505349946), np.float64(0.5628127788367882))
inp_scaling: (np.float64(0.8201219177362088), np.float64(0.6672921307328066), np.float64(0.6976507810669691))
units: (400, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 93.70131,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.915249139905941), np.float64(0.853577138713677), np.float64(0.5300509378108794))
inp_scaling: (np.float64(0.11257978937574216), np.float64(0.24234448086317495), np.float64(0.34457550032338946))
units: (400, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 425.71118,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5392647010582052), np.float64(0.5320522736226219), np.float64(0.5096416192876257))
inp_scaling: (np.float64(0.7993013478609663), np.float64(0.36940765975832235), np.float64(0.17149315172223295))
units: (250, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 84.772026,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6782526729397809), np.float64(0.5191541185643476), np.float64(0.5528094333306937))
inp_scaling: (np.float64(0.9281711224642172), np.float64(0.40287233756597607), np.float64(0.8711068976374869))
units: (500, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 625.67175,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5368334889727925), np.float64(0.8165243170717762), np.float64(0.6072403334431896))
inp_scaling: (np.float64(0.2712467711988732), np.float64(0.18205729503387102), np.float64(0.4943058042924562))
units: (350, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 840.4332,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9178180577487709), np.float64(0.7378455723365973), np.float64(0.5638556804456043))
inp_scaling: (np.float64(0.7944169790093984), np.float64(0.631631110396531), np.float64(0.6436117138989127))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1564.3828,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.69668694710152), np.float64(0.6220703676080411), np.float64(0.8738947316776509))
inp_scaling: (np.float64(0.3502754872049656), np.float64(0.9239432520832995), np.float64(0.23838012119424126))
units: (250, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 32.413284,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6695991675336397), np.float64(0.8828227299438838), np.float64(0.5882499543774644))
inp_scaling: (np.float64(0.7052384786112934), np.float64(0.2680241428785793), np.float64(0.7334378252709052))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 562.5282,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6333712817652895), np.float64(0.6373653071338521), np.float64(0.5106103177250284))
inp_scaling: (np.float64(0.2998036440902887), np.float64(0.6155464219392398), np.float64(0.8508318940381323))
units: (200, 250, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6900070237420823), np.float64(0.6561901554090177), np.float64(0.7334687971659235))
inp_scaling: (np.float64(0.11065939673782223), np.float64(0.6553697609561002), np.float64(0.3313135845449773))
units: (250, 400, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.949599706544334), np.float64(0.9336501717367308), np.float64(0.6450851169734804))
inp_scaling: (np.float64(0.5153386226863904), np.float64(0.6733875483789163), np.float64(0.1819583150958835))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 190.10095,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8703541444067413), np.float64(0.8527105788887983), np.float64(0.5837342227327271))
inp_scaling: (np.float64(0.6726555674927409), np.float64(0.7335907443645352), np.float64(0.480116067318743))
units: (400, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 63.471012,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5793000832263631), np.float64(0.9967350374187122), np.float64(0.5640458591065145))
inp_scaling: (np.float64(0.8413621902673721), np.float64(0.8146570707578207), np.float64(0.11813188188676846))
units: (300, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 66.745056,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8954396252689673), np.float64(0.6180356721568979), np.float64(0.9440915772594216))
inp_scaling: (np.float64(0.9097882655961198), np.float64(0.8566068525879793), np.float64(0.15895845331241348))
units: (350, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 40.204876,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5129896965853629), np.float64(0.79980425731841), np.float64(0.7847865633528006))
inp_scaling: (np.float64(0.6463274283055133), np.float64(0.7169060750862866), np.float64(0.6302632206008583))
units: (250, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1375.869,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6838990817831834), np.float64(0.5724359426519097), np.float64(0.5235643921505562))
inp_scaling: (np.float64(0.9520251981532036), np.float64(0.9466357239316529), np.float64(0.4171666754482515))
units: (450, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 32.7356,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9210104046331327), np.float64(0.5781979331584353), np.float64(0.9517431634132238))
inp_scaling: (np.float64(0.5475801124353525), np.float64(0.2293928504139302), np.float64(0.1291196551132625))
units: (250, 200, 350)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6555523711753204), np.float64(0.5719343769581653), np.float64(0.9349259964804439))
inp_scaling: (np.float64(0.10713149204413906), np.float64(0.3256074398681773), np.float64(0.36604640871455163))
units: (450, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 157.50371,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9025568899963659), np.float64(0.622688384517224), np.float64(0.7154326688522592))
inp_scaling: (np.float64(0.1965735508854925), np.float64(0.772974887646828), np.float64(0.18374538540176283))
units: (400, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 18.467335,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6147618358674638), np.float64(0.5588115107141591), np.float64(0.6425132938713276))
inp_scaling: (np.float64(0.737632447378622), np.float64(0.6977635033653321), np.float64(0.9766915447855306))
units: (500, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 33024.676,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.968440737470535), np.float64(0.9643735250059061), np.float64(0.6510924920048344))
inp_scaling: (np.float64(0.857008972643573), np.float64(0.7313531764241052), np.float64(0.11770040504064522))
units: (400, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 43.32933,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6801119022679851), np.float64(0.8506795709848785), np.float64(0.5767894223608685))
inp_scaling: (np.float64(0.5529859530423099), np.float64(0.46593497200264955), np.float64(0.3979308865014328))
units: (500, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 80.31556,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8460475447374303), np.float64(0.9087907683791343), np.float64(0.6694912493186298))
inp_scaling: (np.float64(0.6583919428399476), np.float64(0.6765956047870244), np.float64(0.326268969067228))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 110.04035,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7465332226101962), np.float64(0.5336678721074005), np.float64(0.5499149237656806))
inp_scaling: (np.float64(0.3454754414632041), np.float64(0.8513004508553775), np.float64(0.7314884714024434))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 158.31696,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5513950563801857), np.float64(0.8396277744558163), np.float64(0.6392869463553525))
inp_scaling: (np.float64(0.9539421542021216), np.float64(0.7476962357538225), np.float64(0.4598236419277787))
units: (350, 200, 300)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7302660336616554), np.float64(0.8946536313081767), np.float64(0.5781192928176806))
inp_scaling: (np.float64(0.9545225426078502), np.float64(0.2959601989603875), np.float64(0.4235526015726232))
units: (300, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 304.5707,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7340265401473898), np.float64(0.898359857698471), np.float64(0.9990435278401752))
inp_scaling: (np.float64(0.25688517644987763), np.float64(0.8378788834370041), np.float64(0.5657534957471427))
units: (400, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1349.7943,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7606997489578937), np.float64(0.6346203912578101), np.float64(0.8490620640461257))
inp_scaling: (np.float64(0.5871987311190239), np.float64(0.7855294784765667), np.float64(0.6019839601741132))
units: (450, 200, 500)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8711796666128859), np.float64(0.9266118383186104), np.float64(0.6610421565855151))
inp_scaling: (np.float64(0.3615099461351835), np.float64(0.2629532324062849), np.float64(0.36871321204816754))
units: (450, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 149.89445,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.751061745060809), np.float64(0.6673663978036699), np.float64(0.5773353396153896))
inp_scaling: (np.float64(0.5855933472444083), np.float64(0.2930751670029442), np.float64(0.8480508679453455))
units: (350, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 743.732,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8188147351202261), np.float64(0.7078845457745615), np.float64(0.9780897538478448))
inp_scaling: (np.float64(0.4240436006168411), np.float64(0.4232654740604216), np.float64(0.8997040133922718))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 18553.4,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9754405476559177), np.float64(0.6071376071536544), np.float64(0.6627118335139064))
inp_scaling: (np.float64(0.7474595966047052), np.float64(0.7135927902365594), np.float64(0.43759431866729104))
units: (300, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 100.59733,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9460468266394148), np.float64(0.9551799402220367), np.float64(0.8523250695916726))
inp_scaling: (np.float64(0.6918729987596749), np.float64(0.4686151571357955), np.float64(0.7559859515496906))
units: (350, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 25621.7,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6113228608915978), np.float64(0.7811157449211152), np.float64(0.981787064009782))
inp_scaling: (np.float64(0.7769654542313242), np.float64(0.2590856499809391), np.float64(0.9209036697547098))
units: (450, 250, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9451826850946181), np.float64(0.6187353956006737), np.float64(0.6102832510078132))
inp_scaling: (np.float64(0.7345486802644063), np.float64(0.4802426074485818), np.float64(0.18038546895851526))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 43.168133,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.99414416005152), np.float64(0.7142097268965436), np.float64(0.8053887335175964))
inp_scaling: (np.float64(0.21758173684477666), np.float64(0.4911024927212919), np.float64(0.27729989755264306))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 110.31643,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5553710394574304), np.float64(0.7396772856958334), np.float64(0.7138925779604438))
inp_scaling: (np.float64(0.9330308228329188), np.float64(0.9399346708333852), np.float64(0.9019112174612458))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 32669.115,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9062926756599184), np.float64(0.6831254602601645), np.float64(0.6574366897834587))
inp_scaling: (np.float64(0.3945715359913258), np.float64(0.2078811364278924), np.float64(0.633400723881326))
units: (200, 200, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8869099639383979), np.float64(0.7317862844500193), np.float64(0.950416101713649))
inp_scaling: (np.float64(0.3372501654730703), np.float64(0.6771758288577364), np.float64(0.6153696426140293))
units: (450, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2819.992,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9390108144507178), np.float64(0.7470486083803185), np.float64(0.9714375358969867))
inp_scaling: (np.float64(0.7074673365088194), np.float64(0.1629106496817364), np.float64(0.10879091161077853))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1127.7074,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5842140634324132), np.float64(0.5297631320973755), np.float64(0.8231276462062356))
inp_scaling: (np.float64(0.11799554398658343), np.float64(0.9167727126186901), np.float64(0.34706582049619195))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 60.695854,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6264063780283466), np.float64(0.5575497269560744), np.float64(0.9790583092614324))
inp_scaling: (np.float64(0.12407353003116416), np.float64(0.7640597328299953), np.float64(0.9911925152833777))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 18650.86,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8561334387194275), np.float64(0.7086610026321256), np.float64(0.5128966344601957))
inp_scaling: (np.float64(0.13160391580719571), np.float64(0.8126085175211802), np.float64(0.12289444313768229))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 40.305695,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9648142138746467), np.float64(0.8510339556495949), np.float64(0.7219619970946387))
inp_scaling: (np.float64(0.8054734882244425), np.float64(0.691494921139818), np.float64(0.39159174019347054))
units: (250, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 66.98921,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8573300940135313), np.float64(0.5807373233242488), np.float64(0.7997439007558638))
inp_scaling: (np.float64(0.8809604506711336), np.float64(0.4185034056182336), np.float64(0.941245871723078))
units: (300, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 22052.443,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8912886371827897), np.float64(0.5646885794116865), np.float64(0.8003647540638166))
inp_scaling: (np.float64(0.14417832373829553), np.float64(0.8533203006765774), np.float64(0.3802520746382292))
units: (400, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 104.33801,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7397714577480501), np.float64(0.7993415019284112), np.float64(0.8214797525193895))
inp_scaling: (np.float64(0.21480445071073362), np.float64(0.8638616408583188), np.float64(0.2353182855651133))
units: (200, 200, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7039621443082392), np.float64(0.7530271933579308), np.float64(0.761492612108305))
inp_scaling: (np.float64(0.4774015595882175), np.float64(0.6229462638964544), np.float64(0.38191412681675985))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 22.723219,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7151137655231634), np.float64(0.5413079106729705), np.float64(0.7930080688289327))
inp_scaling: (np.float64(0.23086220853831818), np.float64(0.11791373460587784), np.float64(0.9343975905195923))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 27013.848,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.645779284733715), np.float64(0.8925121580324906), np.float64(0.9231498876770696))
inp_scaling: (np.float64(0.834266433344374), np.float64(0.9100104638445146), np.float64(0.9186255922740775))
units: (350, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 10141.421,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8750144296423663), np.float64(0.5353348354685478), np.float64(0.8863240348482546))
inp_scaling: (np.float64(0.2536574041480877), np.float64(0.4004712182552236), np.float64(0.9823451541472148))
units: (300, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 13698.9795,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7949084283554416), np.float64(0.5657875981222403), np.float64(0.8795777280195001))
inp_scaling: (np.float64(0.9195652869062073), np.float64(0.3288879444117049), np.float64(0.23883806750286138))
units: (250, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 73.83777,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.937896134810958), np.float64(0.7700569490735063), np.float64(0.6700707562238255))
inp_scaling: (np.float64(0.9040544829658805), np.float64(0.2371917182344157), np.float64(0.7111839831069152))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 317.54578,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7596415514614492), np.float64(0.5842322513016415), np.float64(0.604839606327772))
inp_scaling: (np.float64(0.832030493850938), np.float64(0.44476825050777424), np.float64(0.21923036790369801))
units: (450, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 17.854292,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5082589772091654), np.float64(0.8010886213921082), np.float64(0.5319355354614157))
inp_scaling: (np.float64(0.4751978985765313), np.float64(0.9490727534593384), np.float64(0.6911097058724243))
units: (200, 450, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6450541138957311), np.float64(0.9838856902453469), np.float64(0.7440999501897583))
inp_scaling: (np.float64(0.13130675365114639), np.float64(0.24989202750555387), np.float64(0.5679676257790444))
units: (400, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 580.8214,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8439357382035555), np.float64(0.5036763838440537), np.float64(0.5634488662996342))
inp_scaling: (np.float64(0.5814618671740772), np.float64(0.6365640713735149), np.float64(0.9109733006031715))
units: (300, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 8101.781,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5804926529834906), np.float64(0.9100635523256368), np.float64(0.8005937606594666))
inp_scaling: (np.float64(0.18784276782424714), np.float64(0.9302774630037991), np.float64(0.23757927576316995))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 37.047745,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5465041167468383), np.float64(0.9598207970216341), np.float64(0.7870886840779774))
inp_scaling: (np.float64(0.825817097032089), np.float64(0.21996481397494272), np.float64(0.7905487383432478))
units: (500, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2970.9495,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8446228751726006), np.float64(0.805652198570278), np.float64(0.5258014393410244))
inp_scaling: (np.float64(0.19155901312770746), np.float64(0.554454380085101), np.float64(0.48218729642427505))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 113.63183,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7059980136041976), np.float64(0.802385646373443), np.float64(0.5169902619292199))
inp_scaling: (np.float64(0.87560268409094), np.float64(0.21432397746038878), np.float64(0.9146976205211652))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 868.79987,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9183927639360216), np.float64(0.5978846061989928), np.float64(0.8937070085456514))
inp_scaling: (np.float64(0.8391024745640269), np.float64(0.8343001928917125), np.float64(0.9677686430822888))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1784.6066,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8514528513564628), np.float64(0.9728965262534801), np.float64(0.9708799538405646))
inp_scaling: (np.float64(0.6005557135580235), np.float64(0.647723662582175), np.float64(0.10333828779563248))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 162.7156,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5690811657055771), np.float64(0.6675161531890794), np.float64(0.8441067972547434))
inp_scaling: (np.float64(0.20479356821000538), np.float64(0.5685286071760312), np.float64(0.49060796529466577))
units: (400, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 6386.1553,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6940136896163548), np.float64(0.6713489366158071), np.float64(0.5691659038583312))
inp_scaling: (np.float64(0.6822777487488033), np.float64(0.4471659639945784), np.float64(0.4445443220602395))
units: (350, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 44.08745,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.910298038196792), np.float64(0.9195369794088848), np.float64(0.5453816145637427))
inp_scaling: (np.float64(0.5174410415034233), np.float64(0.6608509483726513), np.float64(0.1564963259208037))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 460.21115,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.525846330156635), np.float64(0.5432341773342793), np.float64(0.5383317893844061))
inp_scaling: (np.float64(0.11097106682473615), np.float64(0.5081320844966819), np.float64(0.3988013694237713))
units: (250, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 48.89417,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8345260196173387), np.float64(0.7513302771728052), np.float64(0.7584850568101607))
inp_scaling: (np.float64(0.29730505475477476), np.float64(0.9392763994172216), np.float64(0.4965696349420039))
units: (300, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 67.261604,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9874645612604991), np.float64(0.7825639314844133), np.float64(0.7905177134275138))
inp_scaling: (np.float64(0.9395513315609902), np.float64(0.6132152420817102), np.float64(0.9580420963465295))
units: (400, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4129.302,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.895789347984006), np.float64(0.5435679004902343), np.float64(0.5539528727902536))
inp_scaling: (np.float64(0.7779142015339459), np.float64(0.8786414820546894), np.float64(0.16085996640957723))
units: (200, 400, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7523266992935771), np.float64(0.5538731850377956), np.float64(0.5697255517056273))
inp_scaling: (np.float64(0.6483877210018071), np.float64(0.16601160613525834), np.float64(0.6827303190746138))
units: (400, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 357.01694,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9268995302588021), np.float64(0.5362836883412203), np.float64(0.7161378175599165))
inp_scaling: (np.float64(0.11392705152597034), np.float64(0.10103530505475122), np.float64(0.42589257013728177))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 673.6844,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6299337226306053), np.float64(0.5390713577070411), np.float64(0.8317004348985202))
inp_scaling: (np.float64(0.9090284369374863), np.float64(0.8802452702489251), np.float64(0.9038087741747526))
units: (400, 200, 450)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7909441373295591), np.float64(0.9110823287057507), np.float64(0.9411321293953407))
inp_scaling: (np.float64(0.8534220629113481), np.float64(0.9409031994352031), np.float64(0.7069452942268662))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 20679.957,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5327879746316009), np.float64(0.9787714556753437), np.float64(0.8821927017014809))
inp_scaling: (np.float64(0.5261358737930177), np.float64(0.5489635035243386), np.float64(0.5389887084340297))
units: (500, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 172.00287,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.517818016794529), np.float64(0.6828368293207576), np.float64(0.6650851029521052))
inp_scaling: (np.float64(0.5353117650327215), np.float64(0.7297611597859688), np.float64(0.26560293281666714))
units: (400, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 31.5088,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7743355737136637), np.float64(0.6840665045380276), np.float64(0.9592394343913052))
inp_scaling: (np.float64(0.469618209211802), np.float64(0.7394203616251471), np.float64(0.6415040858720774))
units: (400, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 3790.1191,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6182379541581825), np.float64(0.8757053068518532), np.float64(0.5877903452697256))
inp_scaling: (np.float64(0.6284361425973867), np.float64(0.25336295223662764), np.float64(0.11439220301037131))
units: (450, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 288.2242,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9432299719820257), np.float64(0.7627716840218608), np.float64(0.6234411877088166))
inp_scaling: (np.float64(0.2664040512954095), np.float64(0.9048538168293473), np.float64(0.7812934712749582))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 879.5176,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5208663683206836), np.float64(0.7170785099412897), np.float64(0.6876801958889269))
inp_scaling: (np.float64(0.980157428485324), np.float64(0.22719387221061538), np.float64(0.6339462465373611))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 903.51636,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6745282917426795), np.float64(0.5026232334984747), np.float64(0.6815105207297893))
inp_scaling: (np.float64(0.8362133927287508), np.float64(0.18978308862888393), np.float64(0.5206135733361216))
units: (450, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 98.30519,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5230485352914267), np.float64(0.5046980342211101), np.float64(0.5290230781146299))
inp_scaling: (np.float64(0.9851050546124822), np.float64(0.6014908784524005), np.float64(0.40353579822584784))
units: (450, 200, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8680130104629766), np.float64(0.9666281523497902), np.float64(0.8263012722928519))
inp_scaling: (np.float64(0.9342136960547881), np.float64(0.3007048110065011), np.float64(0.5639711716792885))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 739.06195,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5375012028881228), np.float64(0.5625419301909969), np.float64(0.8660294357219103))
inp_scaling: (np.float64(0.5704394569490076), np.float64(0.9141253437710664), np.float64(0.8662400143479638))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4105.8135,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5779139141310243), np.float64(0.6614682570663525), np.float64(0.8658647882320925))
inp_scaling: (np.float64(0.7145655562588508), np.float64(0.4255845267930417), np.float64(0.17386075171821957))
units: (250, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 78.48848,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7588188269734971), np.float64(0.957300692152292), np.float64(0.8876913429509369))
inp_scaling: (np.float64(0.4195664040602738), np.float64(0.47148826253666976), np.float64(0.27940431662935505))
units: (500, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 38.769905,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6507759679404268), np.float64(0.8104717357352659), np.float64(0.7876527570235529))
inp_scaling: (np.float64(0.37762556157871385), np.float64(0.7781480180271698), np.float64(0.2885295738917607))
units: (300, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 61.264866,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7706972019536911), np.float64(0.6448720830603307), np.float64(0.9364351269610727))
inp_scaling: (np.float64(0.5516706210648685), np.float64(0.9251538472540158), np.float64(0.8293632646901385))
units: (300, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 16112.403,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5040653333780832), np.float64(0.5110894814175815), np.float64(0.5779103242004359))
inp_scaling: (np.float64(0.3700638484595159), np.float64(0.9630751267470579), np.float64(0.4309207106049202))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 25.687002,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7007025917308525), np.float64(0.5609573618563891), np.float64(0.7057920015872237))
inp_scaling: (np.float64(0.3051258845274968), np.float64(0.34153483336406676), np.float64(0.25281868913154676))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 196.87665,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5526613322697435), np.float64(0.922679670622089), np.float64(0.8156816554204007))
inp_scaling: (np.float64(0.20756135751334495), np.float64(0.7115532072541788), np.float64(0.7995553929599475))
units: (300, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5494.8257,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9388664132314946), np.float64(0.9772223313409163), np.float64(0.9951031898180861))
inp_scaling: (np.float64(0.5609473499980573), np.float64(0.6377729870102781), np.float64(0.7353642322642199))
units: (350, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 955.1253,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9713622722777442), np.float64(0.6847732980644263), np.float64(0.6771108086478239))
inp_scaling: (np.float64(0.760124202033067), np.float64(0.48554645289396914), np.float64(0.38570020236737634))
units: (450, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 49.767647,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6313929061471498), np.float64(0.7426796840683868), np.float64(0.8136620940066301))
inp_scaling: (np.float64(0.6907254448889004), np.float64(0.3339003159319236), np.float64(0.2574307495375284))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 131.37494,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8280850846833794), np.float64(0.7897273694420788), np.float64(0.7631518416859562))
inp_scaling: (np.float64(0.28334377048450005), np.float64(0.19375288683979242), np.float64(0.6004124929468272))
units: (450, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 331.60303,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7893321972786866), np.float64(0.6791173800904922), np.float64(0.8780626057165664))
inp_scaling: (np.float64(0.879639515988789), np.float64(0.6681610526066868), np.float64(0.21760593966670924))
units: (250, 200, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6832199879501105), np.float64(0.8361819587503143), np.float64(0.6351553621645365))
inp_scaling: (np.float64(0.9111183136469595), np.float64(0.3196369275368608), np.float64(0.9312198962531932))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 8339.471,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6550161585533887), np.float64(0.7246566454230756), np.float64(0.9642938855071205))
inp_scaling: (np.float64(0.6281301014363815), np.float64(0.862982629878543), np.float64(0.6323085135696555))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2564.6055,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8766077659904306), np.float64(0.7487369335920289), np.float64(0.8301221909730999))
inp_scaling: (np.float64(0.7962857362379285), np.float64(0.6526231028032184), np.float64(0.146390263881139))
units: (400, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 80.23282,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.562114531765165), np.float64(0.7096157069402778), np.float64(0.6378090370234725))
inp_scaling: (np.float64(0.6309553569410923), np.float64(0.6968631976655386), np.float64(0.49322345359433195))
units: (350, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 65.29919,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9294274217410845), np.float64(0.8177667770417321), np.float64(0.8833260057061946))
inp_scaling: (np.float64(0.9816403587565671), np.float64(0.47310587757302835), np.float64(0.6900020635393096))
units: (350, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 14922.713,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8407193490030693), np.float64(0.7459752910580484), np.float64(0.8972877994502041))
inp_scaling: (np.float64(0.9214374066069341), np.float64(0.8674842275876569), np.float64(0.5907173008706004))
units: (350, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2151.5862,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9057519493726099), np.float64(0.5119481780305493), np.float64(0.9776111587084244))
inp_scaling: (np.float64(0.795423517128998), np.float64(0.42970253393849345), np.float64(0.4958277470402548))
units: (500, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1936.787,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5118735291760064), np.float64(0.9549748916436562), np.float64(0.6649261664932795))
inp_scaling: (np.float64(0.7606112986430249), np.float64(0.786695842372079), np.float64(0.8376760211986671))
units: (500, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 13737.291,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8794002222400379), np.float64(0.8164022155673284), np.float64(0.9683315694082775))
inp_scaling: (np.float64(0.18252357376512107), np.float64(0.9717751321559572), np.float64(0.8273297805008561))
units: (450, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 6062.7524,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7944047029561564), np.float64(0.9175099132911824), np.float64(0.5874424216895991))
inp_scaling: (np.float64(0.3338609385622756), np.float64(0.10984235421193944), np.float64(0.6560935049614831))
units: (500, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2134.7957,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5284404661416751), np.float64(0.8084241621912605), np.float64(0.9625849646696953))
inp_scaling: (np.float64(0.5732377574231634), np.float64(0.828349136198492), np.float64(0.7565037309292518))
units: (200, 400, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9528614855011579), np.float64(0.9891758990990254), np.float64(0.7653638148425462))
inp_scaling: (np.float64(0.7851076815668527), np.float64(0.11968942749694203), np.float64(0.6394665954507319))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7054674571908731), np.float64(0.655133049077784), np.float64(0.991112011190558))
inp_scaling: (np.float64(0.26011390921084554), np.float64(0.6407453386374318), np.float64(0.17596868112410452))
units: (450, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 34.679165,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7233519816626468), np.float64(0.5949363291578985), np.float64(0.9374471444395333))
inp_scaling: (np.float64(0.35925723564141265), np.float64(0.5405508983568655), np.float64(0.12249885385114198))
units: (200, 250, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9124499180780334), np.float64(0.727578658106331), np.float64(0.9892769415423339))
inp_scaling: (np.float64(0.4834748958815359), np.float64(0.730097259273954), np.float64(0.47339929702515227))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 730.6663,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.888256420903335), np.float64(0.9326492593154435), np.float64(0.500180366292748))
inp_scaling: (np.float64(0.920415185864711), np.float64(0.9113108978430906), np.float64(0.8450419409552667))
units: (400, 200, 250)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5928237032257138), np.float64(0.8581930713623668), np.float64(0.7329234964162983))
inp_scaling: (np.float64(0.24938296897117362), np.float64(0.5235873371537095), np.float64(0.2024700285082648))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 53.17615,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9340857419920483), np.float64(0.9638309708090325), np.float64(0.5573036419785238))
inp_scaling: (np.float64(0.3432175227076344), np.float64(0.5213693796300811), np.float64(0.8269876327901844))
units: (300, 200, 350)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9242267257423845), np.float64(0.6104736917477308), np.float64(0.9919678591272727))
inp_scaling: (np.float64(0.10949368390777131), np.float64(0.3523330167661911), np.float64(0.4547342045725412))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 573.77606,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6448182115191563), np.float64(0.7135490003545296), np.float64(0.5493078996916932))
inp_scaling: (np.float64(0.33256579477498616), np.float64(0.659056434194809), np.float64(0.5022447841918937))
units: (450, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 19.76057,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9837752260726664), np.float64(0.9259533513832788), np.float64(0.5817040992305035))
inp_scaling: (np.float64(0.28398194688796413), np.float64(0.701103851355126), np.float64(0.6934740490518756))
units: (400, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 262.346,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6300625098424562), np.float64(0.7912970363746339), np.float64(0.5152235365889266))
inp_scaling: (np.float64(0.9780036755869207), np.float64(0.642392321160653), np.float64(0.7576217048419901))
units: (350, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 126.07743,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5086711660766712), np.float64(0.5732144119325235), np.float64(0.7987249360793156))
inp_scaling: (np.float64(0.5210303147182562), np.float64(0.8916005790368341), np.float64(0.8417517220110395))
units: (200, 300, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9755162573350824), np.float64(0.7553950429517063), np.float64(0.6304145373314567))
inp_scaling: (np.float64(0.4282672189470582), np.float64(0.9497063585789716), np.float64(0.7524526285729525))
units: (350, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4482.8677,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5647496760989467), np.float64(0.7888939822380274), np.float64(0.6726735307871776))
inp_scaling: (np.float64(0.5371763944031314), np.float64(0.4163357275409345), np.float64(0.3666646209763146))
units: (350, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 51.729794,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.592080744958344), np.float64(0.8192608538536891), np.float64(0.8014311193560515))
inp_scaling: (np.float64(0.47049565555482964), np.float64(0.25952418884591466), np.float64(0.5609577805107078))
units: (300, 300, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8508155739269607), np.float64(0.8593854985819909), np.float64(0.633637578843766))
inp_scaling: (np.float64(0.5737337673056018), np.float64(0.6657540536333607), np.float64(0.6494515667047731))
units: (200, 250, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6227838902050582), np.float64(0.6966997807217712), np.float64(0.6243198186569714))
inp_scaling: (np.float64(0.47332264434537796), np.float64(0.6783737501987582), np.float64(0.7299510286986175))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1305.0818,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9761142143531417), np.float64(0.7394703204810793), np.float64(0.513447371457403))
inp_scaling: (np.float64(0.8600392842666003), np.float64(0.5338898530060929), np.float64(0.4861456427222062))
units: (400, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 100.273705,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7131316833558701), np.float64(0.8774606911391576), np.float64(0.7765916977419633))
inp_scaling: (np.float64(0.986297830031742), np.float64(0.2816331626757455), np.float64(0.9066986485650977))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 582.45,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9094293192677809), np.float64(0.6459332874236523), np.float64(0.5502486012619403))
inp_scaling: (np.float64(0.9065939648082064), np.float64(0.9802629430928534), np.float64(0.15999789475372767))
units: (250, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 13.104364,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9348975374401349), np.float64(0.7876853707409093), np.float64(0.9239603421709592))
inp_scaling: (np.float64(0.769791755669838), np.float64(0.9321973049030324), np.float64(0.6461248022597543))
units: (400, 350, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6513046807450124), np.float64(0.6993709125093662), np.float64(0.9674825191284645))
inp_scaling: (np.float64(0.7563191592057043), np.float64(0.8490701739064143), np.float64(0.20373203679738583))
units: (350, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 34.284916,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.833973309080424), np.float64(0.6645032914397954), np.float64(0.9731506701623485))
inp_scaling: (np.float64(0.7451049012115013), np.float64(0.6688093256545952), np.float64(0.6740388395922482))
units: (350, 200, 250)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5071330965660235), np.float64(0.8552267752588154), np.float64(0.84378114953021))
inp_scaling: (np.float64(0.4996294797826982), np.float64(0.33147131016149073), np.float64(0.11306833534926526))
units: (500, 500, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8776032954411823), np.float64(0.8201576069393176), np.float64(0.9608116125184016))
inp_scaling: (np.float64(0.6379627672386803), np.float64(0.30739887175019864), np.float64(0.825850367325249))
units: (200, 500, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6645274543019537), np.float64(0.9798091125948927), np.float64(0.7458815868659626))
inp_scaling: (np.float64(0.5117500345044864), np.float64(0.6987082411105352), np.float64(0.14252780295862816))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 113.27767,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8920040494765512), np.float64(0.9475248189852885), np.float64(0.8929144616622899))
inp_scaling: (np.float64(0.7549608906586243), np.float64(0.6436406575172852), np.float64(0.39426394918321206))
units: (300, 200, 450)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.514010202743005), np.float64(0.8424447263958603), np.float64(0.6686940082595911))
inp_scaling: (np.float64(0.8606111186898734), np.float64(0.19276453858496867), np.float64(0.45323335475666515))
units: (250, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 160.30484,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6594145731507577), np.float64(0.7243516297832878), np.float64(0.890574275001101))
inp_scaling: (np.float64(0.8595431623516712), np.float64(0.799541858827521), np.float64(0.3997283100717455))
units: (500, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 245.16626,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6155869496585051), np.float64(0.5907341544670041), np.float64(0.6841089937637934))
inp_scaling: (np.float64(0.3816139109065473), np.float64(0.2978758069485753), np.float64(0.9649810227120084))
units: (250, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 40667.29,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5419962464591168), np.float64(0.7163414443999853), np.float64(0.5964486435571886))
inp_scaling: (np.float64(0.22408375717036527), np.float64(0.46133902578207675), np.float64(0.89475517657837))
units: (250, 200, 450)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9193759384188777), np.float64(0.7752727889466964), np.float64(0.7936588205429832))
inp_scaling: (np.float64(0.15737449212337143), np.float64(0.4176808633357113), np.float64(0.8736044486619945))
units: (200, 250, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6387701372324792), np.float64(0.842836560322946), np.float64(0.9807121873818256))
inp_scaling: (np.float64(0.7241736890607086), np.float64(0.14086144372110013), np.float64(0.33367993326042406))
units: (250, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1728.7614,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5305025811116175), np.float64(0.7112882387268522), np.float64(0.9531648086090485))
inp_scaling: (np.float64(0.7649578242487801), np.float64(0.1339743321993743), np.float64(0.6693330678943612))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1114.5096,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7972359621385203), np.float64(0.9870554684236689), np.float64(0.8353245383510925))
inp_scaling: (np.float64(0.6049925357360068), np.float64(0.10732482895807552), np.float64(0.49760877321704655))
units: (400, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 10011.729,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9862754231992328), np.float64(0.8484370967337163), np.float64(0.8456560570985763))
inp_scaling: (np.float64(0.8892330215675693), np.float64(0.5775726935425995), np.float64(0.24039642934063638))
units: (250, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 279.83224,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.982617553517761), np.float64(0.5138531663005376), np.float64(0.768851960768916))
inp_scaling: (np.float64(0.5043967393152975), np.float64(0.8889282423478988), np.float64(0.8412873529066566))
units: (300, 200, 300)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8161837368189531), np.float64(0.5591623356042816), np.float64(0.7157078376698736))
inp_scaling: (np.float64(0.8308732313293709), np.float64(0.5757649679802702), np.float64(0.7857703808360296))
units: (250, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4107.835,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9372793775921522), np.float64(0.8123933413559754), np.float64(0.9077390651572382))
inp_scaling: (np.float64(0.9830138990153064), np.float64(0.16703050457303126), np.float64(0.6098234251861897))
units: (450, 200, 500)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.930716998130898), np.float64(0.5486751575980164), np.float64(0.5252752900949782))
inp_scaling: (np.float64(0.9743491011057044), np.float64(0.900932715919794), np.float64(0.6597203865448731))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 88.23297,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8011691103210731), np.float64(0.7107550431247796), np.float64(0.6485388630493754))
inp_scaling: (np.float64(0.6111338646258847), np.float64(0.3195991529094402), np.float64(0.8398511282743933))
units: (200, 400, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5079309549857047), np.float64(0.9680430775232477), np.float64(0.8537462131560911))
inp_scaling: (np.float64(0.8268480200970526), np.float64(0.23485894889652092), np.float64(0.9708750700411046))
units: (300, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 176475.17,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5716815308727586), np.float64(0.6399193876129409), np.float64(0.555592934118746))
inp_scaling: (np.float64(0.6221658202536509), np.float64(0.9919872653992079), np.float64(0.13171843359602692))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 29.342949,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.967684133757976), np.float64(0.685619311413499), np.float64(0.8345115661628699))
inp_scaling: (np.float64(0.16334103617920614), np.float64(0.823728945510746), np.float64(0.8344160213487178))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 8624.006,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.803187821514292), np.float64(0.7833281293561052), np.float64(0.735283599253234))
inp_scaling: (np.float64(0.7113564452077278), np.float64(0.11321552092201584), np.float64(0.32134298862083144))
units: (350, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1696.4764,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8900292591527269), np.float64(0.8329976524798532), np.float64(0.8844628285224211))
inp_scaling: (np.float64(0.8649015890343633), np.float64(0.312961502869897), np.float64(0.6367519269913616))
units: (200, 300, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.806321259662606), np.float64(0.6033482457228092), np.float64(0.5888424565257494))
inp_scaling: (np.float64(0.7801586029545434), np.float64(0.6905851477360342), np.float64(0.7178110818497145))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 755.59357,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9650950914507728), np.float64(0.8295096198962921), np.float64(0.5047192961779958))
inp_scaling: (np.float64(0.12982604071583465), np.float64(0.13244677620676068), np.float64(0.23338740642957678))
units: (450, 450, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.647703356612162), np.float64(0.8572276890857266), np.float64(0.5479563753395617))
inp_scaling: (np.float64(0.6494148950011626), np.float64(0.5099136746190872), np.float64(0.5803977808059256))
units: (350, 250, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7547016261794575), np.float64(0.58030165025772), np.float64(0.9479055589367147))
inp_scaling: (np.float64(0.2564818321924766), np.float64(0.49397394284895524), np.float64(0.835990220178691))
units: (500, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 16519.629,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6432917536383265), np.float64(0.9378532355830965), np.float64(0.6174813813681269))
inp_scaling: (np.float64(0.19508029481601374), np.float64(0.15234893256957038), np.float64(0.21801335472470118))
units: (200, 450, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7612592217468255), np.float64(0.5366069168586491), np.float64(0.7699730246343925))
inp_scaling: (np.float64(0.6836750562712991), np.float64(0.43567644201540745), np.float64(0.3271247825078303))
units: (250, 200, 450)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.842452601443214), np.float64(0.6090547957941049), np.float64(0.6062273128711149))
inp_scaling: (np.float64(0.8081219573616677), np.float64(0.8078178489693435), np.float64(0.7751006032871511))
units: (450, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 321.25946,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9410037404605895), np.float64(0.8145523526781024), np.float64(0.7193362794081616))
inp_scaling: (np.float64(0.7132295559361063), np.float64(0.3089397037766912), np.float64(0.5872571462981088))
units: (250, 200, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9148812523737845), np.float64(0.8840954421930414), np.float64(0.861024766141453))
inp_scaling: (np.float64(0.6368800356599514), np.float64(0.4540490424223861), np.float64(0.9729281622679112))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 29070.867,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8906472121946318), np.float64(0.6497039279722322), np.float64(0.8931997549447327))
inp_scaling: (np.float64(0.9934394206217725), np.float64(0.8756797462949824), np.float64(0.9333524264559954))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 13760.21,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8666756403259512), np.float64(0.7208073076407611), np.float64(0.7538020606980007))
inp_scaling: (np.float64(0.5328551152340119), np.float64(0.33968662431354757), np.float64(0.5184479391310384))
units: (200, 450, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.970893843565399), np.float64(0.7974866674614915), np.float64(0.5439608286910704))
inp_scaling: (np.float64(0.9869829865173226), np.float64(0.9258760682621892), np.float64(0.8867983455435898))
units: (450, 200, 350)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5957993620690607), np.float64(0.8734500004161785), np.float64(0.9653478669278899))
inp_scaling: (np.float64(0.9254898735720947), np.float64(0.17664771401827278), np.float64(0.4374264749000233))
units: (300, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 408.67575,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.922866415586497), np.float64(0.6697219619320052), np.float64(0.7960331292414597))
inp_scaling: (np.float64(0.16223082458422092), np.float64(0.8307617619109873), np.float64(0.7448790881384982))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 6100.2383,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5974557743236767), np.float64(0.9577485229422371), np.float64(0.7171583187485264))
inp_scaling: (np.float64(0.5833839513156212), np.float64(0.37202813214771824), np.float64(0.28490450466981676))
units: (350, 300, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5935798663164549), np.float64(0.8795051622362858), np.float64(0.8245274498553185))
inp_scaling: (np.float64(0.6964103287554412), np.float64(0.8024250479438685), np.float64(0.8754249176527561))
units: (250, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 51424.83,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5652640545078667), np.float64(0.8664013293376815), np.float64(0.5926957264512123))
inp_scaling: (np.float64(0.4854115151100745), np.float64(0.4426636509459855), np.float64(0.36039703407457124))
units: (350, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 160.53087,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9536220430450084), np.float64(0.5641099153524789), np.float64(0.9968598940409066))
inp_scaling: (np.float64(0.39115344208774405), np.float64(0.7289841921625321), np.float64(0.7324271808044285))
units: (350, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 18629.906,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9903977662349366), np.float64(0.8440565916986147), np.float64(0.9153079265683621))
inp_scaling: (np.float64(0.2813057115583575), np.float64(0.8806880305204495), np.float64(0.5994872373860208))
units: (500, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3403.9402,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9555276266748899), np.float64(0.8973730361958443), np.float64(0.9977492656963054))
inp_scaling: (np.float64(0.7674470097065833), np.float64(0.2821079287288821), np.float64(0.20680863258265209))
units: (400, 200, 400)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6654301261924889), np.float64(0.705293237444852), np.float64(0.8654477884821115))
inp_scaling: (np.float64(0.8634862920814383), np.float64(0.24519701233750973), np.float64(0.7581671187467427))
units: (400, 200, 250)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.869414234758477), np.float64(0.8914125038048936), np.float64(0.5616922744621964))
inp_scaling: (np.float64(0.23445491214465317), np.float64(0.5932465584200298), np.float64(0.6386697242736621))
units: (450, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 97.77352,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9737344758220139), np.float64(0.5056453885681302), np.float64(0.5920604049399429))
inp_scaling: (np.float64(0.5752974867579298), np.float64(0.12372332725835822), np.float64(0.8394694550023345))
units: (200, 200, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5242687459924539), np.float64(0.7843676824949937), np.float64(0.8713956915844019))
inp_scaling: (np.float64(0.8841233256592609), np.float64(0.10830387713041978), np.float64(0.1884403387452097))
units: (300, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 613.7338,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6392006252503162), np.float64(0.5255173935957029), np.float64(0.9564673561652183))
inp_scaling: (np.float64(0.27917781579974066), np.float64(0.3565291511942028), np.float64(0.4348549451102849))
units: (250, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 63.615192,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9630575292800589), np.float64(0.9715280026780755), np.float64(0.7728591196152754))
inp_scaling: (np.float64(0.5015707337405217), np.float64(0.7177280273913382), np.float64(0.9132750089711859))
units: (300, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 13977.378,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9004586660271583), np.float64(0.5032776083756255), np.float64(0.8884494095415778))
inp_scaling: (np.float64(0.5951399001558388), np.float64(0.6862090802344644), np.float64(0.4180224844257039))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 138.88615,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5050121761083854), np.float64(0.6202253713670334), np.float64(0.8619860057276303))
inp_scaling: (np.float64(0.3734374445168538), np.float64(0.6519643278096613), np.float64(0.7403214572082327))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4004.1912,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9883909253917129), np.float64(0.62682314145176), np.float64(0.562142913832961))
inp_scaling: (np.float64(0.27677007333942516), np.float64(0.8846297730531105), np.float64(0.8789552241714884))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1765.2234,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6662285312638235), np.float64(0.8678913745082121), np.float64(0.6825012358306135))
inp_scaling: (np.float64(0.5487414436886447), np.float64(0.6893096246804922), np.float64(0.15167954544970225))
units: (450, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 205.11682,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8190667920262084), np.float64(0.8054125339725398), np.float64(0.7796374708426947))
inp_scaling: (np.float64(0.24844774286076426), np.float64(0.8143926341210295), np.float64(0.3362884158560599))
units: (450, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 130.06781,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7337383958327157), np.float64(0.6287905540665678), np.float64(0.9880106735857936))
inp_scaling: (np.float64(0.3290161429576395), np.float64(0.9176393835509482), np.float64(0.42191380494707975))
units: (300, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 223.35751,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7305534031342037), np.float64(0.818362901180097), np.float64(0.5568024188913716))
inp_scaling: (np.float64(0.48086202081483775), np.float64(0.35764820341567694), np.float64(0.8385052863185852))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 12817.093,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6549069154602224), np.float64(0.7421030312582022), np.float64(0.51622372821299))
inp_scaling: (np.float64(0.3579654758110511), np.float64(0.9956541766806785), np.float64(0.47916374780360116))
units: (400, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 41.300133,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6235540406381008), np.float64(0.5573914036384289), np.float64(0.9439938099502221))
inp_scaling: (np.float64(0.29119260330583363), np.float64(0.5148125427947372), np.float64(0.5089095604214181))
units: (250, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 297.9258,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6267114851190868), np.float64(0.6970718146820168), np.float64(0.7624901204286441))
inp_scaling: (np.float64(0.739407919566045), np.float64(0.18895657121419446), np.float64(0.823336400687138))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 7368.6895,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.976563701539736), np.float64(0.8485738522462192), np.float64(0.8812510226303405))
inp_scaling: (np.float64(0.45719425963845706), np.float64(0.8504719504095276), np.float64(0.6799522197242035))
units: (500, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1449.6381,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9772222960688592), np.float64(0.6492971663007808), np.float64(0.840612305422386))
inp_scaling: (np.float64(0.27285923823166336), np.float64(0.39217755096305185), np.float64(0.9424136135482796))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 36350.688,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6142036073016), np.float64(0.6895814521674573), np.float64(0.6113631169117257))
inp_scaling: (np.float64(0.3567363116651715), np.float64(0.7823210318701986), np.float64(0.7609217693093838))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 952.74457,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6352660869585712), np.float64(0.608191107188636), np.float64(0.9331444685296055))
inp_scaling: (np.float64(0.3748399104280602), np.float64(0.9374226530335982), np.float64(0.27390975832269027))
units: (350, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 35.973183,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8994617267914332), np.float64(0.8267789472988807), np.float64(0.6385359118910512))
inp_scaling: (np.float64(0.7201230731031054), np.float64(0.9211958456601269), np.float64(0.8775165714635951))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 6598.343,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9334920656344783), np.float64(0.7267769853869251), np.float64(0.7301081314560293))
inp_scaling: (np.float64(0.18351867246181525), np.float64(0.22101001782508295), np.float64(0.1936028940058843))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 69.45932,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5992960262765915), np.float64(0.9886519259402646), np.float64(0.8763950757760541))
inp_scaling: (np.float64(0.18054257237403792), np.float64(0.46243194285826694), np.float64(0.6722896857819289))
units: (300, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 220.26877,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8656562196828024), np.float64(0.6986697989773799), np.float64(0.8070945066481588))
inp_scaling: (np.float64(0.28180400727878385), np.float64(0.14570769503338685), np.float64(0.9402455098770457))
units: (200, 450, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6401446839243476), np.float64(0.8523633469452965), np.float64(0.741918064547692))
inp_scaling: (np.float64(0.24993240061810287), np.float64(0.8595702387046749), np.float64(0.10626651061994004))
units: (200, 500, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9446083536487901), np.float64(0.666708785244676), np.float64(0.81789167091914))
inp_scaling: (np.float64(0.8088469205536231), np.float64(0.7700743759229534), np.float64(0.5063231117615546))
units: (500, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1542.7094,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5047076898593167), np.float64(0.985588422141076), np.float64(0.7683383891400821))
inp_scaling: (np.float64(0.36926309814907354), np.float64(0.9953593976425822), np.float64(0.3045961837041772))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 83.671486,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6248307385285629), np.float64(0.7777113126515827), np.float64(0.7852975997990053))
inp_scaling: (np.float64(0.12301140484803338), np.float64(0.5649821662485514), np.float64(0.10466784685152644))
units: (300, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 49.10241,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8489373102927839), np.float64(0.7617406928193828), np.float64(0.9495462078485464))
inp_scaling: (np.float64(0.8851593412095394), np.float64(0.5306375425908559), np.float64(0.7495071469446342))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 7623.3286,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6673780008267123), np.float64(0.9976620681852841), np.float64(0.7308949284315637))
inp_scaling: (np.float64(0.49688970391141163), np.float64(0.17928078760275443), np.float64(0.44279714375718116))
units: (500, 200, 250)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6713950210247178), np.float64(0.8746891010869458), np.float64(0.9267666223389934))
inp_scaling: (np.float64(0.19914000415572963), np.float64(0.7032666843166753), np.float64(0.254320142539765))
units: (250, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 111.11007,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8233630719974447), np.float64(0.7594707394094706), np.float64(0.7780221323440776))
inp_scaling: (np.float64(0.7715054626307044), np.float64(0.18378189639844644), np.float64(0.4229132516105968))
units: (400, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 285.03476,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5030964414294363), np.float64(0.7382329498046785), np.float64(0.9812203314991927))
inp_scaling: (np.float64(0.4116326647722397), np.float64(0.18287103759161366), np.float64(0.33817192372701793))
units: (300, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 590.57294,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5822950580789525), np.float64(0.5109041415195518), np.float64(0.6793778862580041))
inp_scaling: (np.float64(0.16573343638439156), np.float64(0.22321196981771718), np.float64(0.46213755167501214))
units: (300, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 129.25189,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9041832016959084), np.float64(0.6691326343076115), np.float64(0.5978759344607419))
inp_scaling: (np.float64(0.41641796101244777), np.float64(0.34313453324336884), np.float64(0.9380987670230873))
units: (200, 300, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7820711896148926), np.float64(0.5930517782496533), np.float64(0.9417711020956974))
inp_scaling: (np.float64(0.9954877086904778), np.float64(0.7933138332994252), np.float64(0.44199714468397033))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 337.5046,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7733207960836082), np.float64(0.6567961507567093), np.float64(0.6583314312627098))
inp_scaling: (np.float64(0.8623234396437937), np.float64(0.1233003748485978), np.float64(0.3619896530083918))
units: (350, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 999.73425,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8149497138178463), np.float64(0.9019119941638156), np.float64(0.7212784457878795))
inp_scaling: (np.float64(0.8820185388097669), np.float64(0.7807514938244228), np.float64(0.6118883758382676))
units: (300, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1318.1779,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5137464859243802), np.float64(0.8898017704536108), np.float64(0.5588880567744755))
inp_scaling: (np.float64(0.6651798200229789), np.float64(0.3775156823866732), np.float64(0.6062242701697753))
units: (400, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 497.17456,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5961228278957438), np.float64(0.9604554916249779), np.float64(0.8361786168185408))
inp_scaling: (np.float64(0.9027217656009481), np.float64(0.18572193131799147), np.float64(0.8469179126864599))
units: (350, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 3944.7876,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9510181447569177), np.float64(0.9359893411990707), np.float64(0.7753171318255605))
inp_scaling: (np.float64(0.12088294250187902), np.float64(0.23131841373691026), np.float64(0.40987359954848646))
units: (200, 250, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7886717230752646), np.float64(0.7850845224993355), np.float64(0.8404328858189638))
inp_scaling: (np.float64(0.15004074778017418), np.float64(0.13049772828106482), np.float64(0.9488008387459342))
units: (250, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 4068.2776,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9302437493547828), np.float64(0.6386314263318574), np.float64(0.7360387853946115))
inp_scaling: (np.float64(0.3857203886036943), np.float64(0.8290140815237867), np.float64(0.2209023828393621))
units: (500, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 54.528393,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6222552823390473), np.float64(0.7907623409557747), np.float64(0.963993029788842))
inp_scaling: (np.float64(0.9162819123559025), np.float64(0.7767271673723689), np.float64(0.5248953465080836))
units: (500, 250, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7463104259478626), np.float64(0.7762028763976834), np.float64(0.999598845137257))
inp_scaling: (np.float64(0.9653890618435209), np.float64(0.5051841470987664), np.float64(0.5766529412357562))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 808.7306,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.571311329046074), np.float64(0.9866465282383893), np.float64(0.6839715044382474))
inp_scaling: (np.float64(0.4760377118758745), np.float64(0.16174566146038996), np.float64(0.18502004315409465))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 139.65454,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6197911089225278), np.float64(0.8251105705089525), np.float64(0.8689943021856399))
inp_scaling: (np.float64(0.34960909874547796), np.float64(0.7268584780217571), np.float64(0.9982633461404437))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 14365.683,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6282192758842102), np.float64(0.7518893687894335), np.float64(0.9547969756661219))
inp_scaling: (np.float64(0.9531393881768132), np.float64(0.8187880772894975), np.float64(0.6191617099590279))
units: (350, 200, 250)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.853105109358258), np.float64(0.7100617253890282), np.float64(0.544655698476733))
inp_scaling: (np.float64(0.6445690634836977), np.float64(0.6997447814465009), np.float64(0.38945986424882506))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 67.7869,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6952857288424897), np.float64(0.5824660024954312), np.float64(0.9461024087374019))
inp_scaling: (np.float64(0.312762134708505), np.float64(0.36699221718546227), np.float64(0.30147733405412747))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 52.02901,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.950920226744873), np.float64(0.5371443983899714), np.float64(0.818419521990563))
inp_scaling: (np.float64(0.3470190400167196), np.float64(0.6212139726833722), np.float64(0.30568144095883304))
units: (500, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 36.200428,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7837985656008484), np.float64(0.6538502479538253), np.float64(0.5344651989655556))
inp_scaling: (np.float64(0.9299787907863654), np.float64(0.9852277814251134), np.float64(0.22622228283159673))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 13.644827,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8579856204087406), np.float64(0.8302216055358715), np.float64(0.7260527304300297))
inp_scaling: (np.float64(0.9669778635049483), np.float64(0.29998611828846594), np.float64(0.22978645762399402))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 162.3273,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.974452352533854), np.float64(0.8411402628105864), np.float64(0.5370626084025841))
inp_scaling: (np.float64(0.3040386254640729), np.float64(0.9343380842905248), np.float64(0.29791673653415296))
units: (300, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 23.359182,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7961754939810267), np.float64(0.8374190245813992), np.float64(0.8826745220438836))
inp_scaling: (np.float64(0.11880819215250793), np.float64(0.39252231867438037), np.float64(0.7543606907296092))
units: (300, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 4902.058,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8020084931547824), np.float64(0.8624936680258022), np.float64(0.7503591616026319))
inp_scaling: (np.float64(0.3986512338143182), np.float64(0.37053824211716935), np.float64(0.390252673304719))
units: (500, 300, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8735204410598632), np.float64(0.77840264185702), np.float64(0.6216888695538524))
inp_scaling: (np.float64(0.6742981415744926), np.float64(0.26208699734536345), np.float64(0.7893062446105434))
units: (450, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 990.92737,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9817112757711267), np.float64(0.7774976939947229), np.float64(0.8220974998547742))
inp_scaling: (np.float64(0.32564557148769435), np.float64(0.3746764619759757), np.float64(0.6742166628307731))
units: (300, 250, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7225086352367038), np.float64(0.8028998133555141), np.float64(0.9249774423760657))
inp_scaling: (np.float64(0.9140901323273573), np.float64(0.2835003648015646), np.float64(0.5070591644555549))
units: (400, 300, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9105192527678947), np.float64(0.7890138023479272), np.float64(0.5456159990273642))
inp_scaling: (np.float64(0.2805754975286839), np.float64(0.2647888039741255), np.float64(0.9287807131492133))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 2785.9895,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.809132220576078), np.float64(0.966083738381736), np.float64(0.7493358095877944))
inp_scaling: (np.float64(0.7308211850998841), np.float64(0.6192506478252668), np.float64(0.6090016810884045))
units: (450, 200, 250)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5317964020313908), np.float64(0.5562827459289007), np.float64(0.5727923778744388))
inp_scaling: (np.float64(0.5463997870579057), np.float64(0.7210013990881164), np.float64(0.1266407818666313))
units: (300, 300, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8808648504579095), np.float64(0.8185783286121862), np.float64(0.859348194729721))
inp_scaling: (np.float64(0.8472199951237486), np.float64(0.7372031249416429), np.float64(0.7692481567425218))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 55369.67,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7111485432535367), np.float64(0.9672339860670698), np.float64(0.8528616871185246))
inp_scaling: (np.float64(0.7824198760110508), np.float64(0.48364618894434275), np.float64(0.8973995620526064))
units: (200, 300, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5755009883241837), np.float64(0.9898291786177233), np.float64(0.7941615439804979))
inp_scaling: (np.float64(0.10074573248620795), np.float64(0.2303332814432448), np.float64(0.8672070111237323))
units: (300, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 5290.726,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9017587077427093), np.float64(0.7284621722451724), np.float64(0.8569507124325257))
inp_scaling: (np.float64(0.730907892797488), np.float64(0.21593813498060066), np.float64(0.5519347343144727))
units: (250, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1550.8229,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5917909675515381), np.float64(0.5633738766895835), np.float64(0.8106495501928439))
inp_scaling: (np.float64(0.9048216970867315), np.float64(0.17636882105737967), np.float64(0.15085711707978308))
units: (450, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 100.96935,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8174706019660687), np.float64(0.6153852513473456), np.float64(0.8393266866021822))
inp_scaling: (np.float64(0.35434619466567807), np.float64(0.3813768179696725), np.float64(0.9302795229072041))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 17492.508,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8648983053880798), np.float64(0.6632737961648624), np.float64(0.5806971046369632))
inp_scaling: (np.float64(0.7196113360981538), np.float64(0.26562745801956245), np.float64(0.9469721894980244))
units: (250, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 574.35736,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9807788591190827), np.float64(0.9275311540073233), np.float64(0.7265946753701915))
inp_scaling: (np.float64(0.22943412647198663), np.float64(0.8468638615253116), np.float64(0.4031488923382056))
units: (250, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 80.511444,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6062302346688355), np.float64(0.9234715182754287), np.float64(0.8200642881576761))
inp_scaling: (np.float64(0.7339291319486109), np.float64(0.43295229636672583), np.float64(0.5981459510032837))
units: (400, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3928.116,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6990649690057426), np.float64(0.628395276083687), np.float64(0.994438798604073))
inp_scaling: (np.float64(0.26852864566479), np.float64(0.3509441452899863), np.float64(0.8433507195780235))
units: (450, 200, 450)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5708122195899896), np.float64(0.9164511983264296), np.float64(0.6531715534319812))
inp_scaling: (np.float64(0.6948037849455475), np.float64(0.9145869929224345), np.float64(0.5966740949606504))
units: (250, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 240.75818,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5470548528160228), np.float64(0.616233624621433), np.float64(0.5365740685105873))
inp_scaling: (np.float64(0.4503821363516358), np.float64(0.2900406546337415), np.float64(0.13922123708270953))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 57.169254,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9546700888734201), np.float64(0.5583187339906667), np.float64(0.7278599149911074))
inp_scaling: (np.float64(0.9501240056743588), np.float64(0.7877108871731656), np.float64(0.4202735244510012))
units: (400, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 23.071014,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7762376367551357), np.float64(0.890247089864975), np.float64(0.8548435454221397))
inp_scaling: (np.float64(0.7991084478666661), np.float64(0.12166776873871722), np.float64(0.9701022233295504))
units: (350, 200, 300)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9938570398245604), np.float64(0.5774531682445815), np.float64(0.9896927880459443))
inp_scaling: (np.float64(0.12834605023657766), np.float64(0.9793807499043148), np.float64(0.8144149122799906))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 3607.349,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9201489846571196), np.float64(0.7765331505876942), np.float64(0.5078366508914938))
inp_scaling: (np.float64(0.1668837109805667), np.float64(0.5529488059018757), np.float64(0.7247126464975668))
units: (200, 250, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7862400954508595), np.float64(0.9970701219299718), np.float64(0.6864701306106019))
inp_scaling: (np.float64(0.3177606638960092), np.float64(0.7531288251293043), np.float64(0.5652650243264702))
units: (450, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 110.329185,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9550865456963356), np.float64(0.9705488953044523), np.float64(0.9402037399982862))
inp_scaling: (np.float64(0.7441604003434659), np.float64(0.4213925779982075), np.float64(0.933738645038439))
units: (300, 200, 300)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8761781546623595), np.float64(0.7607219458056307), np.float64(0.5756248176622808))
inp_scaling: (np.float64(0.24317483134839787), np.float64(0.9124484920775131), np.float64(0.8343398957203072))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 717.6983,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8269634708424629), np.float64(0.8076825152200712), np.float64(0.8901301609634977))
inp_scaling: (np.float64(0.9346143924951749), np.float64(0.5867644303456974), np.float64(0.6047881872558745))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 251.749,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7662413639744439), np.float64(0.7496039770979057), np.float64(0.6509246351043444))
inp_scaling: (np.float64(0.9148905823631931), np.float64(0.6742279536733832), np.float64(0.2461222159054381))
units: (350, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 47.409893,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7804480020751223), np.float64(0.9383955151248194), np.float64(0.5865457791648845))
inp_scaling: (np.float64(0.6197495714558777), np.float64(0.3221127633700349), np.float64(0.2305385523556656))
units: (250, 450, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7745657960283285), np.float64(0.7650137481763806), np.float64(0.8642331304133657))
inp_scaling: (np.float64(0.7982149987007036), np.float64(0.6428992652138296), np.float64(0.8206373370497642))
units: (400, 200, 250)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7687306104457442), np.float64(0.9962617574534871), np.float64(0.5813430664839071))
inp_scaling: (np.float64(0.47353696976260173), np.float64(0.4693423925264244), np.float64(0.3160893929506885))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 81.12619,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.678614633900523), np.float64(0.6480810268156969), np.float64(0.7287575745184007))
inp_scaling: (np.float64(0.5188541296641951), np.float64(0.4889516203575428), np.float64(0.9239464700041543))
units: (400, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 10383.736,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9024616665293779), np.float64(0.6141727224279154), np.float64(0.9270271940709052))
inp_scaling: (np.float64(0.6253855800600071), np.float64(0.8693196472202993), np.float64(0.6955493672216743))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5673.384,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6565998720639117), np.float64(0.6041322176442252), np.float64(0.9120803499763995))
inp_scaling: (np.float64(0.6265985370997843), np.float64(0.38254119560085087), np.float64(0.8574241178096155))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 661.5713,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7010658778912386), np.float64(0.9711667384493374), np.float64(0.5530494979006862))
inp_scaling: (np.float64(0.24005356409195722), np.float64(0.1293843198707002), np.float64(0.2129517397071897))
units: (300, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 144.47414,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6429192738972653), np.float64(0.9991077317673414), np.float64(0.7886461852983699))
inp_scaling: (np.float64(0.18985615113647925), np.float64(0.4492112242315165), np.float64(0.5040466558691742))
units: (300, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 218.17624,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7591918502120086), np.float64(0.7153387229759862), np.float64(0.9648645758769228))
inp_scaling: (np.float64(0.4357612332607512), np.float64(0.7838205309370372), np.float64(0.910666518299055))
units: (350, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 116677.875,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5443165698531991), np.float64(0.654802436487509), np.float64(0.692204780893663))
inp_scaling: (np.float64(0.8401193681927135), np.float64(0.42273248398249175), np.float64(0.8639059536034516))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 7904.722,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6906547098454179), np.float64(0.5148791274938311), np.float64(0.9697822779830142))
inp_scaling: (np.float64(0.6592119706910434), np.float64(0.3988530298697166), np.float64(0.9368183094756385))
units: (300, 350, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9258456172739433), np.float64(0.8466460998491276), np.float64(0.7337315882188962))
inp_scaling: (np.float64(0.5100317365820769), np.float64(0.32100915124740936), np.float64(0.13408171548946773))
units: (250, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 345.488,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.69790836349697), np.float64(0.865430212992003), np.float64(0.8482996743295665))
inp_scaling: (np.float64(0.26965784467485354), np.float64(0.7422457599631141), np.float64(0.4735300215580247))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 186.75027,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9660666656064274), np.float64(0.6216646071978393), np.float64(0.8981835894059832))
inp_scaling: (np.float64(0.3239292804975684), np.float64(0.5171074571709016), np.float64(0.4587342626715101))
units: (400, 400, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8642561396717501), np.float64(0.5665513506066289), np.float64(0.6662967251507859))
inp_scaling: (np.float64(0.20163061928240608), np.float64(0.2760433348518727), np.float64(0.2324037969898433))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 124.38325,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6921309030952983), np.float64(0.9319817344794383), np.float64(0.7088070309087853))
inp_scaling: (np.float64(0.7222198922298111), np.float64(0.20436340193168917), np.float64(0.5534331659349013))
units: (500, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 250.13057,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5211181593553041), np.float64(0.6252090458365419), np.float64(0.5820028165093958))
inp_scaling: (np.float64(0.47148193678706507), np.float64(0.3330040651407106), np.float64(0.7534395980247007))
units: (450, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1038.6542,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8834801046893317), np.float64(0.9510090866245551), np.float64(0.9228827121732721))
inp_scaling: (np.float64(0.9635937936045894), np.float64(0.6944848849686506), np.float64(0.8183895537575672))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 15303.439,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5268177184757038), np.float64(0.6643151200855871), np.float64(0.6186112731486312))
inp_scaling: (np.float64(0.5556217105166393), np.float64(0.45488048591675223), np.float64(0.8864330660760488))
units: (250, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 1737.4471,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.659940910879405), np.float64(0.973991000082266), np.float64(0.5350841305729159))
inp_scaling: (np.float64(0.8492798127699788), np.float64(0.32250560602095635), np.float64(0.8003630657640981))
units: (300, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 713.30945,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8985443615207557), np.float64(0.5987911009381794), np.float64(0.7825880317342555))
inp_scaling: (np.float64(0.5269997501466254), np.float64(0.6182267251029139), np.float64(0.4523142882476999))
units: (400, 200, 450)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6321629921970442), np.float64(0.9732191333297959), np.float64(0.7599829004028658))
inp_scaling: (np.float64(0.12505833762117521), np.float64(0.6283216002938878), np.float64(0.7476304431048965))
units: (400, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 1277.6466,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.541468107197565), np.float64(0.6767930251042955), np.float64(0.7186281156553389))
inp_scaling: (np.float64(0.7896076013253805), np.float64(0.6644779305142616), np.float64(0.4398074547238443))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 29.720985,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6072512821034873), np.float64(0.8291477334823465), np.float64(0.7077008820720228))
inp_scaling: (np.float64(0.5298549233867043), np.float64(0.872865947184898), np.float64(0.7075186083958781))
units: (350, 450, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6275870314378154), np.float64(0.5332060723667594), np.float64(0.9832109158277715))
inp_scaling: (np.float64(0.9034892683560602), np.float64(0.8548273271384927), np.float64(0.24057104618002456))
units: (350, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 61.23047,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5954793801903391), np.float64(0.7547055088345218), np.float64(0.9857986601144142))
inp_scaling: (np.float64(0.1479651528910139), np.float64(0.4725933205763707), np.float64(0.8165500963938571))
units: (300, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 14432.314,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7400872215823708), np.float64(0.6489916511074576), np.float64(0.7228449512514293))
inp_scaling: (np.float64(0.4089553733475578), np.float64(0.40716162659381583), np.float64(0.8832164266965686))
units: (450, 400, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8979015258994114), np.float64(0.6874822795398345), np.float64(0.8268456258780239))
inp_scaling: (np.float64(0.6019920449942195), np.float64(0.9129346548715478), np.float64(0.3749322710074222))
units: (300, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 70.81715,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6030176083659085), np.float64(0.5897125609295267), np.float64(0.6501016302016522))
inp_scaling: (np.float64(0.4096550760688237), np.float64(0.21796923655565578), np.float64(0.22435498195068704))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 110.59266,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5123302849080873), np.float64(0.6959827167776054), np.float64(0.732363600804038))
inp_scaling: (np.float64(0.38062866984330546), np.float64(0.4387602770465411), np.float64(0.5405567893296982))
units: (300, 300, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6097552815619338), np.float64(0.5753534494979888), np.float64(0.5786639848932885))
inp_scaling: (np.float64(0.509460398125046), np.float64(0.887656261583784), np.float64(0.15224377799172234))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 22.14373,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7542308452187914), np.float64(0.5503057948949193), np.float64(0.9556588851882886))
inp_scaling: (np.float64(0.3720306624565074), np.float64(0.38060802149498607), np.float64(0.7664888112338403))
units: (350, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 30344.027,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9958136590688923), np.float64(0.655644362709773), np.float64(0.6245335728022087))
inp_scaling: (np.float64(0.5005150425580107), np.float64(0.6079841915592149), np.float64(0.7039236531820542))
units: (250, 200, 400)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6271136809634494), np.float64(0.9819367236947856), np.float64(0.9764726842662912))
inp_scaling: (np.float64(0.8162773651532558), np.float64(0.28918571190356523), np.float64(0.9087723431301828))
units: (400, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 1366.573,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8819000011248195), np.float64(0.9045896892102159), np.float64(0.5733267872669875))
inp_scaling: (np.float64(0.8451784867777976), np.float64(0.5805457158333309), np.float64(0.7960960410130435))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1344.0582,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5495118034180013), np.float64(0.8314492059359087), np.float64(0.7694786047213407))
inp_scaling: (np.float64(0.9876821762397784), np.float64(0.9000577774983668), np.float64(0.9321983420876785))
units: (200, 300, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8473277459030891), np.float64(0.5021153240346459), np.float64(0.5280141315765899))
inp_scaling: (np.float64(0.3686085277660621), np.float64(0.51226765325268), np.float64(0.9635381146897507))
units: (450, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1969.5165,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8055412213116899), np.float64(0.6299816020437576), np.float64(0.7423783592985551))
inp_scaling: (np.float64(0.9356431095193259), np.float64(0.8973240480249889), np.float64(0.12143483046265566))
units: (350, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 33.500175,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5006637348482553), np.float64(0.6598256082514491), np.float64(0.9096110473657437))
inp_scaling: (np.float64(0.5986671419175307), np.float64(0.2639284585745365), np.float64(0.40825075224021656))
units: (450, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 184.68513,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5169946123896757), np.float64(0.6516032097460933), np.float64(0.5363878856854756))
inp_scaling: (np.float64(0.4306323068631017), np.float64(0.7790538298188049), np.float64(0.37860559651574077))
units: (400, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 124.87794,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.755024477831546), np.float64(0.6131891612781759), np.float64(0.9485169510439468))
inp_scaling: (np.float64(0.32265869324939306), np.float64(0.8071723364679473), np.float64(0.3505008824806083))
units: (350, 200, 350)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6027697746579576), np.float64(0.8753055669620071), np.float64(0.6027985126354612))
inp_scaling: (np.float64(0.7588155078552502), np.float64(0.6241500660880063), np.float64(0.39284466072668633))
units: (500, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 81.16836,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6348053173332635), np.float64(0.5998574522448615), np.float64(0.6447794587573348))
inp_scaling: (np.float64(0.9362845890431764), np.float64(0.5351081512306548), np.float64(0.6841684927043946))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1609.7826,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7531570504919461), np.float64(0.7491289925747248), np.float64(0.5917371670844795))
inp_scaling: (np.float64(0.6507703425077719), np.float64(0.10468498320396809), np.float64(0.14334863291782193))
units: (350, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 894.45575,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.641010250003178), np.float64(0.9880344000801351), np.float64(0.6565558774323069))
inp_scaling: (np.float64(0.7006767479033786), np.float64(0.48448675532366436), np.float64(0.9745052874871533))
units: (350, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2598.1497,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8307411318064875), np.float64(0.6064915439703743), np.float64(0.5327914990372464))
inp_scaling: (np.float64(0.6076614057606284), np.float64(0.18541935853378655), np.float64(0.5326856201958335))
units: (400, 200, 500)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9166066063356675), np.float64(0.8274883344707371), np.float64(0.5665673813076334))
inp_scaling: (np.float64(0.9773749423936396), np.float64(0.8474539989895811), np.float64(0.8776437537709849))
units: (250, 200, 450)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5862946647124716), np.float64(0.5376461662234477), np.float64(0.9946843027827709))
inp_scaling: (np.float64(0.5935556486518786), np.float64(0.8455802907927217), np.float64(0.25323639180814284))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 42.02101,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8894054681397295), np.float64(0.7231766095625073), np.float64(0.6593322196192039))
inp_scaling: (np.float64(0.6029420968226291), np.float64(0.13920291726087775), np.float64(0.7416748951704996))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 3093.7742,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6826097596393321), np.float64(0.889361728092394), np.float64(0.6756754410932062))
inp_scaling: (np.float64(0.9233133875973427), np.float64(0.2700548261432346), np.float64(0.9883315121238372))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.586500564569867), np.float64(0.7435425866720675), np.float64(0.925113233822338))
inp_scaling: (np.float64(0.7403579775050756), np.float64(0.8964262553371022), np.float64(0.9994046585541333))
units: (500, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 4094.7974,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8288773531371423), np.float64(0.9810757582870597), np.float64(0.9094169682818125))
inp_scaling: (np.float64(0.16794550751213708), np.float64(0.8696651742246766), np.float64(0.2782747016474348))
units: (250, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 277.1894,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8964882832904473), np.float64(0.7663822628721029), np.float64(0.6639323488078402))
inp_scaling: (np.float64(0.4902632679589035), np.float64(0.13612635730365896), np.float64(0.9954447340929278))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 6584.381,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9400350638481398), np.float64(0.5400127492426926), np.float64(0.9242554351544032))
inp_scaling: (np.float64(0.5671395127164861), np.float64(0.4878637277948812), np.float64(0.25955062541606194))
units: (450, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 52.885708,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7193569217492654), np.float64(0.7845325658382131), np.float64(0.901778036033245))
inp_scaling: (np.float64(0.50727428168345), np.float64(0.35499068459870864), np.float64(0.752711111073214))
units: (200, 450, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6398416040186901), np.float64(0.7953961563865748), np.float64(0.7956095411503243))
inp_scaling: (np.float64(0.8097809442635789), np.float64(0.9527746502994623), np.float64(0.7616848701552263))
units: (400, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1701.419,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6776820939951836), np.float64(0.7415504099964512), np.float64(0.5892388351405645))
inp_scaling: (np.float64(0.5245995899648013), np.float64(0.3633066355354976), np.float64(0.12558929287961124))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 92.1922,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6202021914916885), np.float64(0.6369453441940766), np.float64(0.903978068343262))
inp_scaling: (np.float64(0.869436249424278), np.float64(0.2260433499828105), np.float64(0.4841260063097156))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1558.4982,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5151949009222907), np.float64(0.8645124382859275), np.float64(0.9028984589255937))
inp_scaling: (np.float64(0.2392579165520263), np.float64(0.43444159943957683), np.float64(0.6359898992816433))
units: (450, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3801.528,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5342581693879576), np.float64(0.9779898962096925), np.float64(0.8104578121313721))
inp_scaling: (np.float64(0.7164462805961662), np.float64(0.35347743791097985), np.float64(0.1638813126356838))
units: (500, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 585.099,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6355021784846226), np.float64(0.7038967495614896), np.float64(0.5830131159767701))
inp_scaling: (np.float64(0.3743324947766188), np.float64(0.6954216413848431), np.float64(0.8076877447375506))
units: (500, 250, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.538002728868307), np.float64(0.5704437829380073), np.float64(0.854467234322579))
inp_scaling: (np.float64(0.5538870672795039), np.float64(0.5115254600339629), np.float64(0.31165418235497844))
units: (200, 300, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6741539403379614), np.float64(0.7452930798166336), np.float64(0.9200328524844376))
inp_scaling: (np.float64(0.856252706863243), np.float64(0.9194730555575559), np.float64(0.39543764511492197))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 104.06754,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8467946635386028), np.float64(0.9392152172173412), np.float64(0.8680274691246925))
inp_scaling: (np.float64(0.6406183903412687), np.float64(0.588878013789489), np.float64(0.5116716099775412))
units: (200, 500, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5544575899585339), np.float64(0.6525389363896109), np.float64(0.8094436611000126))
inp_scaling: (np.float64(0.6065074349302525), np.float64(0.522435236182789), np.float64(0.32274840008377675))
units: (450, 250, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6525172221423869), np.float64(0.8229587795328916), np.float64(0.660927720342843))
inp_scaling: (np.float64(0.8979811272453575), np.float64(0.8618480647072897), np.float64(0.29272319017879667))
units: (400, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 42.93218,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7767993570304116), np.float64(0.5902400565532557), np.float64(0.5277302810748796))
inp_scaling: (np.float64(0.5962463636159367), np.float64(0.9056521387855173), np.float64(0.6771252200911588))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2121.1548,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7934882896112913), np.float64(0.787194185463281), np.float64(0.9082694788813075))
inp_scaling: (np.float64(0.20702740175410844), np.float64(0.10364704776889024), np.float64(0.5290629223164914))
units: (300, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1566.8312,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7567720169770431), np.float64(0.8643418896812898), np.float64(0.7403201460793871))
inp_scaling: (np.float64(0.2862766922707219), np.float64(0.12498109187840968), np.float64(0.613158369838601))
units: (250, 200, 300)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5827254385127757), np.float64(0.9613937262256603), np.float64(0.7809933570548702))
inp_scaling: (np.float64(0.16100843979541668), np.float64(0.8199587098234057), np.float64(0.43577486813191924))
units: (500, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 349.70914,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7349948962508704), np.float64(0.7728958543386277), np.float64(0.8365734335044676))
inp_scaling: (np.float64(0.7624423213436643), np.float64(0.5990135270803714), np.float64(0.5591971175628117))
units: (450, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 994.878,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9913480517109565), np.float64(0.6999625451597902), np.float64(0.9357773506882374))
inp_scaling: (np.float64(0.3158748434264376), np.float64(0.5552289716535515), np.float64(0.4507464328503269))
units: (250, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1146.8752,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9589056279051436), np.float64(0.6410313464388909), np.float64(0.6798976452714885))
inp_scaling: (np.float64(0.8354283140553217), np.float64(0.29688533926379135), np.float64(0.9254888371842565))
units: (500, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 1176.6437,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9515408665711902), np.float64(0.5121003399829881), np.float64(0.6320288823801434))
inp_scaling: (np.float64(0.418645023580992), np.float64(0.11861390775622416), np.float64(0.535261468567853))
units: (350, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 285.53137,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6444356279228256), np.float64(0.6079946295867638), np.float64(0.7629819714562615))
inp_scaling: (np.float64(0.3147515382381143), np.float64(0.8131487552024842), np.float64(0.20336621479875316))
units: (350, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 41.20959,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9800363552197412), np.float64(0.7212988031862879), np.float64(0.6911666176792525))
inp_scaling: (np.float64(0.17020502264235338), np.float64(0.20607353852406107), np.float64(0.5269405563558103))
units: (450, 200, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.65814865838882), np.float64(0.6952607549753266), np.float64(0.7978282148330613))
inp_scaling: (np.float64(0.9985727499091359), np.float64(0.5851043681842217), np.float64(0.4250888060299123))
units: (450, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 269.72882,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6168877421666198), np.float64(0.8837886184517472), np.float64(0.9132860269523937))
inp_scaling: (np.float64(0.9754551034355466), np.float64(0.39864324998788103), np.float64(0.5416947880420065))
units: (500, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 184.63632,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8399543036556252), np.float64(0.652039522857319), np.float64(0.626663104570298))
inp_scaling: (np.float64(0.41096443072088773), np.float64(0.33888854848402905), np.float64(0.7001895881442263))
units: (250, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 401.17426,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7625435598081511), np.float64(0.8760943776759069), np.float64(0.9040331631696134))
inp_scaling: (np.float64(0.39351555519090764), np.float64(0.187456239635897), np.float64(0.5469081931098714))
units: (350, 200, 450)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5785357084522538), np.float64(0.8408074552816281), np.float64(0.7609703168670152))
inp_scaling: (np.float64(0.8773046199447109), np.float64(0.29853268165542746), np.float64(0.16223795712901778))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 151.03867,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5091183852260718), np.float64(0.7400056072283735), np.float64(0.7662930720804999))
inp_scaling: (np.float64(0.40735791065936544), np.float64(0.44916316037037285), np.float64(0.2673480035745599))
units: (400, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 69.03403,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9139664160339489), np.float64(0.6906795389260809), np.float64(0.8731807186213534))
inp_scaling: (np.float64(0.8988274769154865), np.float64(0.3058171868238351), np.float64(0.2875723548157995))
units: (200, 350, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7499944650033293), np.float64(0.7988854490570948), np.float64(0.9366080915153026))
inp_scaling: (np.float64(0.6843329715495757), np.float64(0.5443962297712205), np.float64(0.7801980198665122))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 24912.764,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7364054828083786), np.float64(0.9424580385109578), np.float64(0.7230342038023463))
inp_scaling: (np.float64(0.6898665081362332), np.float64(0.5242877751284949), np.float64(0.8551483430835382))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 985.95056,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5062939154277191), np.float64(0.9284283002849434), np.float64(0.556123598330342))
inp_scaling: (np.float64(0.3103291790084447), np.float64(0.11638882557971625), np.float64(0.25805179261584177))
units: (450, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 668.5414,    std 0.0
 ##################################################################### 

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 242, in <module>
    result_dataset = pd.read_csv("./results/lorenz_results.csv")
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 620, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1620, in __init__
    self._engine = self._make_engine(f, self.engine)
                   ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1898, in _make_engine
    return mapping[engine](f, **self.options)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/c_parser_wrapper.py", line 93, in __init__
    self._reader = parsers.TextReader(src, **kwds)
                   ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "parsers.pyx", line 581, in pandas._libs.parsers.TextReader.__cinit__
pandas.errors.EmptyDataError: No columns to parse from file



--- Config ---
leaky: (np.float64(0.7959001296712075), np.float64(0.8708716328858646), np.float64(0.5900286904981137))
inp_scaling: (np.float64(0.44575388369619007), np.float64(0.7124391641136165), np.float64(0.7828087546974394))
units: (450, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1153.0156,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7667553687520412), np.float64(0.900716435702006), np.float64(0.8111331841647329))
inp_scaling: (np.float64(0.8213436025674742), np.float64(0.49708981876060343), np.float64(0.7770703085627009))
units: (250, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4336.526,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9224552369654229), np.float64(0.7408244784430256), np.float64(0.6823960489723871))
inp_scaling: (np.float64(0.42245916808413675), np.float64(0.557977593731756), np.float64(0.4454665800358911))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 129.08928,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5945613700959141), np.float64(0.565470937332001), np.float64(0.6140370900562397))
inp_scaling: (np.float64(0.11958120425954344), np.float64(0.31175038315626896), np.float64(0.6517829961313868))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 548.81323,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6308269863049546), np.float64(0.5706327408367878), np.float64(0.6314018783499895))
inp_scaling: (np.float64(0.41689578132580674), np.float64(0.4430125869374719), np.float64(0.7902639637853494))
units: (350, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 573.39795,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8254160438075219), np.float64(0.6418551110318061), np.float64(0.5067894550922553))
inp_scaling: (np.float64(0.24145052599499298), np.float64(0.724842315056366), np.float64(0.5222406924314689))
units: (250, 200, 250)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7438744824717314), np.float64(0.914959853962114), np.float64(0.5197884898321815))
inp_scaling: (np.float64(0.22431629030688943), np.float64(0.7690766937601091), np.float64(0.3095324182288268))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 61.87894,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.909624803739012), np.float64(0.8614502148849232), np.float64(0.5035382703570886))
inp_scaling: (np.float64(0.361932622579357), np.float64(0.47642803386009336), np.float64(0.5582814797907332))
units: (450, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 111.7435,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9467407729493379), np.float64(0.6466889592809767), np.float64(0.7175872428213144))
inp_scaling: (np.float64(0.9276437463790762), np.float64(0.1908208210296919), np.float64(0.8986774079115907))
units: (400, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2461.406,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9732527644447431), np.float64(0.7298350898543933), np.float64(0.586474361921066))
inp_scaling: (np.float64(0.9408879014996872), np.float64(0.5038995813577503), np.float64(0.6230092775031931))
units: (450, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 55.387768,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5056944319384457), np.float64(0.9174853895274402), np.float64(0.8142367601949699))
inp_scaling: (np.float64(0.8916617639902368), np.float64(0.7258448185266437), np.float64(0.7132571547978144))
units: (350, 300, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5331750650625408), np.float64(0.8694193967681489), np.float64(0.5509376611630427))
inp_scaling: (np.float64(0.44307741901546027), np.float64(0.3734777570646852), np.float64(0.5748942414941308))
units: (300, 350, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9488842337657153), np.float64(0.5241433365232291), np.float64(0.8856584570831445))
inp_scaling: (np.float64(0.6157341096286683), np.float64(0.39406771784260997), np.float64(0.8303967485273889))
units: (500, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 19948.965,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6004355522340821), np.float64(0.5415912529520962), np.float64(0.6546324963584224))
inp_scaling: (np.float64(0.9662322119201012), np.float64(0.16500077217253206), np.float64(0.7203744604551862))
units: (350, 300, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7382397493505954), np.float64(0.5788720025085785), np.float64(0.8706858335617839))
inp_scaling: (np.float64(0.6992315102022967), np.float64(0.5002453748660888), np.float64(0.6216490936940756))
units: (300, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 461.89868,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9363980993315446), np.float64(0.6818319860635988), np.float64(0.8703060007062524))
inp_scaling: (np.float64(0.8253600964925383), np.float64(0.6327798203555723), np.float64(0.8368753745965644))
units: (450, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1903.2728,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7871713411468041), np.float64(0.6241531623955023), np.float64(0.6438886906242807))
inp_scaling: (np.float64(0.2992059229556699), np.float64(0.7657990124294124), np.float64(0.1549871216838446))
units: (450, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 57.237785,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7794668327139991), np.float64(0.5601960112322598), np.float64(0.78577968626724))
inp_scaling: (np.float64(0.4874513508377142), np.float64(0.681919541864337), np.float64(0.7696832009171578))
units: (350, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 258.3117,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.779523697612132), np.float64(0.7127402199459367), np.float64(0.6183690170257385))
inp_scaling: (np.float64(0.2721956398334371), np.float64(0.7797813867615792), np.float64(0.8194934405936044))
units: (450, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 2302.0994,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5887428019297418), np.float64(0.7947382747523986), np.float64(0.8818496758762062))
inp_scaling: (np.float64(0.8146708807018107), np.float64(0.6499833423827802), np.float64(0.6268044347391271))
units: (400, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 4817.305,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6984207440368191), np.float64(0.6573250012222471), np.float64(0.8322915365639356))
inp_scaling: (np.float64(0.5718371537595951), np.float64(0.5927368625916208), np.float64(0.20140802783265566))
units: (250, 450, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9521671298156631), np.float64(0.6359606841908327), np.float64(0.9276573547588893))
inp_scaling: (np.float64(0.14277754231132456), np.float64(0.23537929973651803), np.float64(0.5899987643366805))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 232.34201,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9843936535225144), np.float64(0.7857795100047078), np.float64(0.9971879337466558))
inp_scaling: (np.float64(0.5053807427553317), np.float64(0.1778666300987351), np.float64(0.44846721505426423))
units: (400, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 478.85886,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6024693159859769), np.float64(0.7430118646641268), np.float64(0.8517871277024478))
inp_scaling: (np.float64(0.13670073842029717), np.float64(0.2609480339949377), np.float64(0.43206401148375284))
units: (300, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 104.89387,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5273229903436655), np.float64(0.6862066176258969), np.float64(0.6615391006140758))
inp_scaling: (np.float64(0.43198189050459557), np.float64(0.811604892360395), np.float64(0.6784929409994842))
units: (300, 400, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6134568765504794), np.float64(0.6327877482997756), np.float64(0.6473657103428857))
inp_scaling: (np.float64(0.8134608410229877), np.float64(0.944176729216557), np.float64(0.6862023091254745))
units: (200, 200, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8101244405399677), np.float64(0.5150156740013633), np.float64(0.5423525316600357))
inp_scaling: (np.float64(0.2867801504037327), np.float64(0.8394751073730644), np.float64(0.6754833422279771))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 155.39003,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5507356047661043), np.float64(0.5749268280685597), np.float64(0.7043484232513475))
inp_scaling: (np.float64(0.6615574819307647), np.float64(0.4377341370903415), np.float64(0.2557945854086252))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 50.87853,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7032372887051219), np.float64(0.7571944940543167), np.float64(0.6712511690992702))
inp_scaling: (np.float64(0.1901508598202219), np.float64(0.3267697050853713), np.float64(0.6927729978584415))
units: (400, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 126.40349,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7848531949423716), np.float64(0.5220107835550065), np.float64(0.833011148150059))
inp_scaling: (np.float64(0.9011622061938585), np.float64(0.3373774992868638), np.float64(0.8625089829190833))
units: (500, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 6459.622,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5300509598269585), np.float64(0.6312664567132857), np.float64(0.5996068071308238))
inp_scaling: (np.float64(0.6310676353535288), np.float64(0.9289383200870208), np.float64(0.2100215004316313))
units: (400, 200, 250)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9438809613826096), np.float64(0.9386267339814337), np.float64(0.5761913104381214))
inp_scaling: (np.float64(0.7173049578580503), np.float64(0.5419422748245998), np.float64(0.7038947846187318))
units: (450, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 574.8639,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7983501923456457), np.float64(0.9345063816941612), np.float64(0.8289665845106821))
inp_scaling: (np.float64(0.3059254141454296), np.float64(0.4568383467863847), np.float64(0.5359923537915546))
units: (250, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1906.3651,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.984576810240968), np.float64(0.8233780348338111), np.float64(0.6293956393060454))
inp_scaling: (np.float64(0.2443540482978334), np.float64(0.39147561620616667), np.float64(0.5723541268981819))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 159.34581,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7391682586001367), np.float64(0.5512660938917529), np.float64(0.7392011004536185))
inp_scaling: (np.float64(0.3646123395969081), np.float64(0.8008731671999368), np.float64(0.6676578101966549))
units: (200, 350, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5872593423119026), np.float64(0.8236302363156642), np.float64(0.5387151018356522))
inp_scaling: (np.float64(0.3167215405911218), np.float64(0.9459036265502685), np.float64(0.4937040672791426))
units: (300, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 98.60203,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8275392847540097), np.float64(0.7529468345993757), np.float64(0.6024565058401172))
inp_scaling: (np.float64(0.8019641308342963), np.float64(0.525987206782092), np.float64(0.6077689824995786))
units: (300, 200, 300)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8428176386542643), np.float64(0.8854895457946623), np.float64(0.7897798475970319))
inp_scaling: (np.float64(0.7744713450930867), np.float64(0.5372745766835829), np.float64(0.5188079424962778))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 221.66817,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6855942588927513), np.float64(0.5091907990955107), np.float64(0.8242488568249602))
inp_scaling: (np.float64(0.5659764842368815), np.float64(0.30831502777294995), np.float64(0.3873608227269332))
units: (350, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 48.49045,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5224096611980267), np.float64(0.5816667859970779), np.float64(0.7648345166505512))
inp_scaling: (np.float64(0.3513060394075318), np.float64(0.719301421411445), np.float64(0.593312381228889))
units: (300, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 55.37434,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5358794404980289), np.float64(0.9067702410693212), np.float64(0.6932369608082595))
inp_scaling: (np.float64(0.5165505013565811), np.float64(0.7963980332191882), np.float64(0.19518343976283292))
units: (200, 450, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7219281332018437), np.float64(0.9308239124799135), np.float64(0.971536422054598))
inp_scaling: (np.float64(0.33502598119097465), np.float64(0.5601410660102434), np.float64(0.6433907417471155))
units: (400, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 714.5689,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7570326185421616), np.float64(0.5505765385100517), np.float64(0.8956837218939921))
inp_scaling: (np.float64(0.8004386895498633), np.float64(0.6122590803892551), np.float64(0.340972148656867))
units: (400, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 224.72888,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7269256548722199), np.float64(0.6977073262809574), np.float64(0.791130373144892))
inp_scaling: (np.float64(0.6390512405694942), np.float64(0.11350964578625844), np.float64(0.33855190767172016))
units: (450, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 499.54547,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7579443910414986), np.float64(0.8956766811775472), np.float64(0.6679434544342804))
inp_scaling: (np.float64(0.10122760643487498), np.float64(0.5467189009071081), np.float64(0.7141713714589139))
units: (400, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2002.9934,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7016426504481158), np.float64(0.593873115657832), np.float64(0.8119067099008814))
inp_scaling: (np.float64(0.4267297090554073), np.float64(0.12587588777654446), np.float64(0.27100774167355113))
units: (500, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 333.30777,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8663244146702761), np.float64(0.7147933007854367), np.float64(0.6325294502929446))
inp_scaling: (np.float64(0.20007362761043845), np.float64(0.2702722292528694), np.float64(0.5878959508277722))
units: (400, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 326.27805,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7277518624887233), np.float64(0.8740568930164045), np.float64(0.6349579030820355))
inp_scaling: (np.float64(0.8672113549257877), np.float64(0.7900615079122352), np.float64(0.9230738761156685))
units: (200, 500, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6644499511802837), np.float64(0.7674553842849736), np.float64(0.8238238645612872))
inp_scaling: (np.float64(0.37895738473709495), np.float64(0.6031644939687955), np.float64(0.3561509607035318))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 118.08578,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5679039230579201), np.float64(0.5728299314698175), np.float64(0.8061627969816693))
inp_scaling: (np.float64(0.435670125170008), np.float64(0.37403415455059763), np.float64(0.7625477853717454))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9851642148802457), np.float64(0.8887898732966399), np.float64(0.9528679634032131))
inp_scaling: (np.float64(0.61670077318019), np.float64(0.9787245602434516), np.float64(0.5230971390951515))
units: (400, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2683.8433,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6767724839388586), np.float64(0.7190718870433376), np.float64(0.955259654397783))
inp_scaling: (np.float64(0.2301218618516443), np.float64(0.12827855176772546), np.float64(0.4544429572851739))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1897.7924,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5561595905558889), np.float64(0.9206554315880519), np.float64(0.8255843743692197))
inp_scaling: (np.float64(0.9189383086299127), np.float64(0.46999928234702604), np.float64(0.3764507430992132))
units: (400, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 354.08017,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7332517275492104), np.float64(0.5385360214912578), np.float64(0.6166044682891794))
inp_scaling: (np.float64(0.1944200632331285), np.float64(0.7064469080437762), np.float64(0.8318030587011755))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 12096.42,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9833554502768304), np.float64(0.746447132691207), np.float64(0.6986161000680167))
inp_scaling: (np.float64(0.3018893441861632), np.float64(0.7231465631376194), np.float64(0.3704829836755784))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 42.49869,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.603551835235998), np.float64(0.6727037805047431), np.float64(0.6237322584011056))
inp_scaling: (np.float64(0.6953374890356415), np.float64(0.3178751452120111), np.float64(0.33964845070943034))
units: (200, 300, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7108541742298622), np.float64(0.6301313582781698), np.float64(0.5579859318231902))
inp_scaling: (np.float64(0.11981573968314621), np.float64(0.221736501875126), np.float64(0.3498926582433437))
units: (350, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 112.6116,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7750492691898231), np.float64(0.6279173172708723), np.float64(0.8477031874426375))
inp_scaling: (np.float64(0.7368052780617742), np.float64(0.31370093024064105), np.float64(0.5708751017825587))
units: (300, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 453.60562,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8153479364879732), np.float64(0.9115810525275694), np.float64(0.7993223428796907))
inp_scaling: (np.float64(0.465033793028368), np.float64(0.3876005824200923), np.float64(0.5277647218334987))
units: (450, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 185.00139,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6842303299508149), np.float64(0.5971845445522184), np.float64(0.6136668642290461))
inp_scaling: (np.float64(0.8827225162725227), np.float64(0.24792861006043856), np.float64(0.3193995095535972))
units: (300, 400, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5700223646246089), np.float64(0.893127520421894), np.float64(0.9144297885886705))
inp_scaling: (np.float64(0.6629316605697817), np.float64(0.8261865990967829), np.float64(0.5555477282291368))
units: (400, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 248.16354,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7515518412134161), np.float64(0.6770667342713087), np.float64(0.6750444194208235))
inp_scaling: (np.float64(0.614939007688955), np.float64(0.707083376512445), np.float64(0.2731513080060767))
units: (450, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 59.596664,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8221884593442642), np.float64(0.9556655701863541), np.float64(0.8601410472640518))
inp_scaling: (np.float64(0.7618773056723441), np.float64(0.2577444353054388), np.float64(0.1691922769917845))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 354.3944,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7985582106224227), np.float64(0.631606607475217), np.float64(0.5117935987245305))
inp_scaling: (np.float64(0.23256839148217687), np.float64(0.5728149345040912), np.float64(0.7440448163679654))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 237.1451,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7649349222576565), np.float64(0.8607975583214773), np.float64(0.5653148743538335))
inp_scaling: (np.float64(0.8507385676796315), np.float64(0.9929130041042531), np.float64(0.9920376793848877))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 978.0881,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5852844650228068), np.float64(0.8478938947815073), np.float64(0.8725846709592316))
inp_scaling: (np.float64(0.4451256264229877), np.float64(0.9896092463554651), np.float64(0.5509656514509111))
units: (350, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1609.9161,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6233566644314291), np.float64(0.5875827612398432), np.float64(0.8122799031862723))
inp_scaling: (np.float64(0.9884560132444553), np.float64(0.4291470861812614), np.float64(0.7838809838185886))
units: (350, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4742.934,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7249714226741901), np.float64(0.6576503393246564), np.float64(0.7396600257829455))
inp_scaling: (np.float64(0.3639495363024564), np.float64(0.7928901031006995), np.float64(0.8689183928334526))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4164.5146,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6639230542750124), np.float64(0.5914237603702285), np.float64(0.9119252459857116))
inp_scaling: (np.float64(0.7045998131418615), np.float64(0.3643156083767424), np.float64(0.5261076333500257))
units: (250, 250, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8554275850608719), np.float64(0.5008164963997278), np.float64(0.7721295247736366))
inp_scaling: (np.float64(0.9679877005150679), np.float64(0.23379314323245848), np.float64(0.36461043390916936))
units: (350, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 502.51627,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5488667002754116), np.float64(0.7956611142593433), np.float64(0.6041604797314926))
inp_scaling: (np.float64(0.7318106829214927), np.float64(0.5963499399610219), np.float64(0.24888132860674808))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 34.910248,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7967365060907269), np.float64(0.9825775037010542), np.float64(0.603336373400674))
inp_scaling: (np.float64(0.4044580169116414), np.float64(0.9580079362980845), np.float64(0.600313966123964))
units: (200, 350, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6683861478618562), np.float64(0.7933234927635521), np.float64(0.9983955269446687))
inp_scaling: (np.float64(0.7266847987166188), np.float64(0.5671546716220974), np.float64(0.4856864231500496))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 260.8994,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6409876945148107), np.float64(0.7824413596276136), np.float64(0.9820023000158031))
inp_scaling: (np.float64(0.1739869641600418), np.float64(0.7388547048026666), np.float64(0.24756066400876842))
units: (250, 400, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6384686170003229), np.float64(0.6984393944267232), np.float64(0.7534484238380051))
inp_scaling: (np.float64(0.21155501100457968), np.float64(0.24357077318553308), np.float64(0.1697694922350972))
units: (250, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 176.25383,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6047157932867419), np.float64(0.5873178327157902), np.float64(0.6204124046296176))
inp_scaling: (np.float64(0.6666535291141915), np.float64(0.9611844981216775), np.float64(0.5306309591132338))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 69.78803,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.51817499583763), np.float64(0.516990872435102), np.float64(0.5188754735321757))
inp_scaling: (np.float64(0.6230812864255603), np.float64(0.6581255222182728), np.float64(0.9078457952275979))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 26371.535,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6609879215836378), np.float64(0.7522422980764338), np.float64(0.724296280845414))
inp_scaling: (np.float64(0.4212063874831562), np.float64(0.8987156482232462), np.float64(0.13303962389080262))
units: (300, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 58.89037,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6725444323428892), np.float64(0.9094293449190557), np.float64(0.9389847962069878))
inp_scaling: (np.float64(0.36637023459427165), np.float64(0.3062103163352372), np.float64(0.12037949283641845))
units: (300, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 185.94948,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6889389028186965), np.float64(0.6503528971469414), np.float64(0.7054087103306119))
inp_scaling: (np.float64(0.4992595393442705), np.float64(0.13755488433285526), np.float64(0.8591487803640248))
units: (500, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2528.8997,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9112486495079659), np.float64(0.6853507596749208), np.float64(0.9003022701102482))
inp_scaling: (np.float64(0.30113966653576485), np.float64(0.5335392988876807), np.float64(0.3181118660370664))
units: (200, 350, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6756516056956771), np.float64(0.7410262309944367), np.float64(0.5954687892420679))
inp_scaling: (np.float64(0.7025246566342088), np.float64(0.5609013163293305), np.float64(0.6509224700341103))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1022.1348,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9875620552256232), np.float64(0.6430863268955985), np.float64(0.6398095431880526))
inp_scaling: (np.float64(0.5908006107162603), np.float64(0.6354187467061768), np.float64(0.7459477868719983))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1092.533,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6625212389904233), np.float64(0.6236121784362129), np.float64(0.8057748830532183))
inp_scaling: (np.float64(0.6040962960726699), np.float64(0.8650222994163669), np.float64(0.9529507946544575))
units: (350, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5408.7803,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6041633451161502), np.float64(0.9955432121605945), np.float64(0.8513732889500034))
inp_scaling: (np.float64(0.22145518587422308), np.float64(0.4650734554801307), np.float64(0.20481513985340855))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 105.03543,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8971937855646528), np.float64(0.6533852232240578), np.float64(0.9588823194118652))
inp_scaling: (np.float64(0.30824072807924363), np.float64(0.9087820604807286), np.float64(0.46478444559211074))
units: (250, 200, 300)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9781551992049723), np.float64(0.8172066533556289), np.float64(0.8770888475703359))
inp_scaling: (np.float64(0.3206660415631506), np.float64(0.4535966034314143), np.float64(0.451522125531581))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 223.06209,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7867345055524029), np.float64(0.8258319238366921), np.float64(0.6019067942867636))
inp_scaling: (np.float64(0.8653662015810588), np.float64(0.7244583588088502), np.float64(0.964781779516407))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1988.9722,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8945369861964845), np.float64(0.7365740801537437), np.float64(0.7367842423381936))
inp_scaling: (np.float64(0.4037893003520716), np.float64(0.7053220589516206), np.float64(0.14533241294257926))
units: (450, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 52.96376,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7459027132899764), np.float64(0.5767189129527005), np.float64(0.9854198486750037))
inp_scaling: (np.float64(0.6244882721017653), np.float64(0.604988277331522), np.float64(0.7381497993144677))
units: (250, 450, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8538180069260407), np.float64(0.807435413615828), np.float64(0.6540388058642262))
inp_scaling: (np.float64(0.4553599455454176), np.float64(0.5182928203364606), np.float64(0.8910120220433607))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4482.5244,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5998916483368057), np.float64(0.9497077405609203), np.float64(0.9888470196576049))
inp_scaling: (np.float64(0.561858140086306), np.float64(0.9420672496061808), np.float64(0.4776015670443948))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 866.89526,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8845805139232537), np.float64(0.8625631376285031), np.float64(0.6497137736441977))
inp_scaling: (np.float64(0.7889235438530087), np.float64(0.9072928231749647), np.float64(0.3347864042701514))
units: (300, 200, 350)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8803791126767617), np.float64(0.5929308515635842), np.float64(0.502024715458153))
inp_scaling: (np.float64(0.5024062423340057), np.float64(0.30187977974140945), np.float64(0.723029016533843))
units: (250, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 430.66385,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5404735935284423), np.float64(0.670305588385564), np.float64(0.5719422223205152))
inp_scaling: (np.float64(0.4374845885368662), np.float64(0.20206177213767285), np.float64(0.7847445113726454))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 660.67957,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5481193565364694), np.float64(0.7582691294441182), np.float64(0.7209179042205394))
inp_scaling: (np.float64(0.2624325861440632), np.float64(0.9874724457327182), np.float64(0.5688373948356018))
units: (400, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 810.13336,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5857840659570359), np.float64(0.765929884629192), np.float64(0.7844832297191093))
inp_scaling: (np.float64(0.3871184483437651), np.float64(0.9073310210206716), np.float64(0.12840447029483845))
units: (200, 400, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7809559001055595), np.float64(0.9254092728638931), np.float64(0.7775919714638525))
inp_scaling: (np.float64(0.9706702422098109), np.float64(0.6808665041129033), np.float64(0.2628956275476477))
units: (400, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 70.60272,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7357970768167139), np.float64(0.7558972128427363), np.float64(0.9306568128672909))
inp_scaling: (np.float64(0.15480550757085962), np.float64(0.7143384356177478), np.float64(0.19975019210289746))
units: (350, 450, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7884380630049803), np.float64(0.7358909253618527), np.float64(0.7475691960333104))
inp_scaling: (np.float64(0.758661027903032), np.float64(0.7370316602495163), np.float64(0.3598582722354653))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 31.048016,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.572882095802465), np.float64(0.7060228198958073), np.float64(0.746566630344941))
inp_scaling: (np.float64(0.5790114835717989), np.float64(0.5567062679578466), np.float64(0.9761392717276975))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 66984.41,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7616086995288083), np.float64(0.8208429036277842), np.float64(0.5261106103663113))
inp_scaling: (np.float64(0.23140117310450592), np.float64(0.37954474523078807), np.float64(0.40116306759356446))
units: (500, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 195.8486,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.762089505282485), np.float64(0.6337773311572749), np.float64(0.9866682571771599))
inp_scaling: (np.float64(0.34839774535141643), np.float64(0.9038467398402684), np.float64(0.4885249561106553))
units: (450, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 195.97932,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9036343091185843), np.float64(0.7976522390744902), np.float64(0.603862439975018))
inp_scaling: (np.float64(0.17303027775882235), np.float64(0.948075443240449), np.float64(0.17232078007977175))
units: (300, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 202.3794,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5156817277774731), np.float64(0.5076432339809261), np.float64(0.7119904570118063))
inp_scaling: (np.float64(0.667123196949035), np.float64(0.4964085982684213), np.float64(0.7971533013184138))
units: (450, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 725.13275,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9007313699931662), np.float64(0.9351748327017072), np.float64(0.8342926116475131))
inp_scaling: (np.float64(0.7086463750910387), np.float64(0.892279547000894), np.float64(0.2842544048400157))
units: (350, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 357.35364,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9999661409687699), np.float64(0.591645903903499), np.float64(0.6789948381152033))
inp_scaling: (np.float64(0.2042297849232083), np.float64(0.6491552477683854), np.float64(0.2436010196383585))
units: (450, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 67.44025,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.748033262513583), np.float64(0.5684787595267735), np.float64(0.9453349657542065))
inp_scaling: (np.float64(0.6556120008430655), np.float64(0.6630478485728138), np.float64(0.5369077641016574))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 389.0468,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6705819147435558), np.float64(0.9287355567847282), np.float64(0.6089712513184489))
inp_scaling: (np.float64(0.7247684045670597), np.float64(0.874668750966273), np.float64(0.8928570165881039))
units: (300, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2619.6653,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8199448674791191), np.float64(0.9242127219006778), np.float64(0.5171162041578956))
inp_scaling: (np.float64(0.5442676939034823), np.float64(0.9843594288719001), np.float64(0.405225006883176))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 50.795334,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6161797681938037), np.float64(0.768977431643762), np.float64(0.5245881094267199))
inp_scaling: (np.float64(0.5916487178182137), np.float64(0.7040478453681575), np.float64(0.9928343152120821))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5216.3594,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5986985766424332), np.float64(0.9165412174114547), np.float64(0.6476287753577903))
inp_scaling: (np.float64(0.7636828968552236), np.float64(0.15138000908297822), np.float64(0.8580583257269047))
units: (450, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1509.5923,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7296489651925143), np.float64(0.5064030168954704), np.float64(0.7427098570791042))
inp_scaling: (np.float64(0.4496512907665564), np.float64(0.4416253790759046), np.float64(0.29493789743722454))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 35.892715,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5338977983484656), np.float64(0.722555385519917), np.float64(0.5324896166531787))
inp_scaling: (np.float64(0.7016997003367452), np.float64(0.8180794116758603), np.float64(0.716533582114243))
units: (250, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 429.25943,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9790869519419529), np.float64(0.871573688732449), np.float64(0.7145842803903251))
inp_scaling: (np.float64(0.4956959272393887), np.float64(0.7624868645246232), np.float64(0.6809666528467654))
units: (200, 250, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8919146832155247), np.float64(0.7288386468956679), np.float64(0.6915665353135181))
inp_scaling: (np.float64(0.8618977512323529), np.float64(0.2556188448938793), np.float64(0.9505090995326899))
units: (400, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4220.9536,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8586597762600641), np.float64(0.6439706390207816), np.float64(0.7254306647692979))
inp_scaling: (np.float64(0.6094885224691704), np.float64(0.40445517642933726), np.float64(0.5857166063648349))
units: (350, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 345.58035,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8520685575742135), np.float64(0.9314912571311692), np.float64(0.6491389995499954))
inp_scaling: (np.float64(0.7484120835571237), np.float64(0.5049545699455558), np.float64(0.4605973476464098))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 180.0255,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5260605489963478), np.float64(0.6361648147564538), np.float64(0.9829240348593825))
inp_scaling: (np.float64(0.16167005046332486), np.float64(0.45255504303333693), np.float64(0.22360348434981456))
units: (500, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 75.026405,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9238281276822091), np.float64(0.8137892944090974), np.float64(0.5182568503802054))
inp_scaling: (np.float64(0.45398145645098265), np.float64(0.967226004361099), np.float64(0.6220220433800924))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3386.8674,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5289082831341425), np.float64(0.8470917646839404), np.float64(0.8197314663806834))
inp_scaling: (np.float64(0.6256857201403966), np.float64(0.2710247589348607), np.float64(0.9837292865691888))
units: (200, 250, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9442023884998787), np.float64(0.5826808186667162), np.float64(0.7671530694608368))
inp_scaling: (np.float64(0.5217726620157175), np.float64(0.44031736896598583), np.float64(0.10402220851694757))
units: (400, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 39.660614,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5810483379139474), np.float64(0.8365726657670998), np.float64(0.7001216939213681))
inp_scaling: (np.float64(0.7425131610404739), np.float64(0.4556383482924682), np.float64(0.9221287187230472))
units: (400, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 867.46716,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8404827290579824), np.float64(0.7791312043829447), np.float64(0.8961014707180794))
inp_scaling: (np.float64(0.8117343891715575), np.float64(0.6119320177278426), np.float64(0.7225867478017153))
units: (350, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 204.28198,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8876186030762957), np.float64(0.962431352316373), np.float64(0.7196348252803301))
inp_scaling: (np.float64(0.30763767803492637), np.float64(0.30998984595193035), np.float64(0.1370705063855529))
units: (400, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 257.91687,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8874781498825781), np.float64(0.5969542300006158), np.float64(0.5330370689722485))
inp_scaling: (np.float64(0.27477263369287386), np.float64(0.27358292643816223), np.float64(0.9464852238210967))
units: (200, 500, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.576531694495251), np.float64(0.8834093562555014), np.float64(0.7111788668061505))
inp_scaling: (np.float64(0.4232117917999667), np.float64(0.8768218127854172), np.float64(0.66039029080974))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 449.30753,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8264924545488987), np.float64(0.9365773258970878), np.float64(0.5226137912486776))
inp_scaling: (np.float64(0.2179789940115779), np.float64(0.9943236545043862), np.float64(0.736761212075129))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2385.793,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8746685663818459), np.float64(0.915481515372232), np.float64(0.7640620847010149))
inp_scaling: (np.float64(0.6532492872887118), np.float64(0.5667251094625834), np.float64(0.5026722112857405))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 689.30206,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6764200719122084), np.float64(0.8954078125003653), np.float64(0.6659072758358762))
inp_scaling: (np.float64(0.3765474155888171), np.float64(0.7747276187947413), np.float64(0.5474683948939123))
units: (200, 450, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7243654321379411), np.float64(0.7016755705013978), np.float64(0.6522528819681015))
inp_scaling: (np.float64(0.6031509311970839), np.float64(0.6642268921153032), np.float64(0.6968366773941633))
units: (450, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2785.9758,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7633923075908693), np.float64(0.6751280035207792), np.float64(0.7952723515169468))
inp_scaling: (np.float64(0.5970968321640181), np.float64(0.6006371679280071), np.float64(0.7934261749030751))
units: (450, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4191.2046,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8983499295158625), np.float64(0.7345920982881864), np.float64(0.7547935732357678))
inp_scaling: (np.float64(0.9494117978216441), np.float64(0.5198737370104893), np.float64(0.26085722605212214))
units: (500, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 153.9927,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8117887439930732), np.float64(0.8144687722653088), np.float64(0.646168948277567))
inp_scaling: (np.float64(0.8420168696083488), np.float64(0.9766174605607407), np.float64(0.13784348311330896))
units: (500, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 87.45397,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6241007435765755), np.float64(0.9877681932596116), np.float64(0.7140392758071834))
inp_scaling: (np.float64(0.6562973946239221), np.float64(0.15848374540349683), np.float64(0.1915382724848371))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 885.40314,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9399942746799874), np.float64(0.9531550692365203), np.float64(0.6557456226067913))
inp_scaling: (np.float64(0.6785014651254956), np.float64(0.8832650869109187), np.float64(0.2115444633107146))
units: (300, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 34.64294,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8490548387004535), np.float64(0.6089359667215272), np.float64(0.5210413378281324))
inp_scaling: (np.float64(0.503876633334415), np.float64(0.8586451509551181), np.float64(0.41310839999968463))
units: (450, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 36.907402,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8015638749491362), np.float64(0.6636520787510635), np.float64(0.895012922581337))
inp_scaling: (np.float64(0.4052369802022914), np.float64(0.6063037817956333), np.float64(0.7594817264131637))
units: (500, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 2665.2312,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8480989361936364), np.float64(0.6941135222889002), np.float64(0.8414473781682377))
inp_scaling: (np.float64(0.23408106073731436), np.float64(0.17458466825822927), np.float64(0.664123008301734))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/sklearn/linear_model/_ridge.py:296: RuntimeWarning: invalid value encountered in matmul
  return (Vt.T @ d_UT_y).T
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 7187.8237,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6471069554438118), np.float64(0.9850955924178803), np.float64(0.928102078368468))
inp_scaling: (np.float64(0.4260965036187907), np.float64(0.2467642288269834), np.float64(0.29024270751256775))
units: (350, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 219.8034,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7584317121755696), np.float64(0.704323110877876), np.float64(0.8563163759283321))
inp_scaling: (np.float64(0.25920483970189157), np.float64(0.8815858046200137), np.float64(0.6291958769889108))
units: (250, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 16154.689,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6108877553454821), np.float64(0.8877625212369011), np.float64(0.6806135899407127))
inp_scaling: (np.float64(0.9374717909014206), np.float64(0.4303438405560853), np.float64(0.45798999296589926))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1046.6195,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7859624045027038), np.float64(0.8330452127457358), np.float64(0.5847422043606348))
inp_scaling: (np.float64(0.4676344511735643), np.float64(0.859635942370919), np.float64(0.2637162475154824))
units: (350, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 252.98106,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.523953863436459), np.float64(0.7706178160716088), np.float64(0.6600104920357649))
inp_scaling: (np.float64(0.816817053567263), np.float64(0.14041358135476917), np.float64(0.7928856259114186))
units: (450, 300, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8821739404841424), np.float64(0.9985097371841576), np.float64(0.6813002461920714))
inp_scaling: (np.float64(0.13690125373652529), np.float64(0.6029287054214785), np.float64(0.7088157485918916))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 351.41086,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8320266677295218), np.float64(0.9249780605335908), np.float64(0.6622105696939123))
inp_scaling: (np.float64(0.29180813671386374), np.float64(0.6938126144756929), np.float64(0.27550258911989933))
units: (200, 250, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.807834924535898), np.float64(0.6947527956420961), np.float64(0.9297898936161059))
inp_scaling: (np.float64(0.942047962774348), np.float64(0.7562756031569373), np.float64(0.36296193114369935))
units: (500, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 21.980427,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.73202444653111), np.float64(0.6581227266386857), np.float64(0.699965186704262))
inp_scaling: (np.float64(0.644075627022698), np.float64(0.10237091026808304), np.float64(0.58319897709461))
units: (350, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 2035.226,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7897079210971117), np.float64(0.5103121731349097), np.float64(0.9157838633765241))
inp_scaling: (np.float64(0.22762460335829493), np.float64(0.9231883276983751), np.float64(0.981159499981839))
units: (200, 250, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7433984765794035), np.float64(0.6542288440029214), np.float64(0.5295232413441702))
inp_scaling: (np.float64(0.581825071470891), np.float64(0.972910518517143), np.float64(0.6107589445704422))
units: (500, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 57.33864,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8516315618316792), np.float64(0.6324971365331202), np.float64(0.8918544348967545))
inp_scaling: (np.float64(0.65097057855505), np.float64(0.21686937435555342), np.float64(0.7858600141398455))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 11925.268,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6864427286238803), np.float64(0.7646369664140586), np.float64(0.7739115322480233))
inp_scaling: (np.float64(0.9964385827110508), np.float64(0.48671579525436715), np.float64(0.7953550218503589))
units: (250, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 36223.27,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6186893316486077), np.float64(0.7835914445018684), np.float64(0.9926734294489923))
inp_scaling: (np.float64(0.9842987430494926), np.float64(0.5510950859122644), np.float64(0.5699538918937983))
units: (250, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3916.5386,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7169777464344297), np.float64(0.6149345372708457), np.float64(0.8992343518116255))
inp_scaling: (np.float64(0.1751604127209972), np.float64(0.487969985412964), np.float64(0.9522868064418596))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2827.5312,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5930563265141832), np.float64(0.9981246468963537), np.float64(0.6001718820812119))
inp_scaling: (np.float64(0.9250304883049062), np.float64(0.10586816819308456), np.float64(0.1878253613095653))
units: (250, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 4185.186,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5371332338110689), np.float64(0.8713450252627802), np.float64(0.6056808604350944))
inp_scaling: (np.float64(0.8701320683093823), np.float64(0.6751556532676752), np.float64(0.8878073196955395))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 835.7285,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7785833260092594), np.float64(0.5961489089023362), np.float64(0.6381056717819972))
inp_scaling: (np.float64(0.9163041091655069), np.float64(0.6295079848954688), np.float64(0.7710590349468189))
units: (450, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 686.2499,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7470216885664889), np.float64(0.7372208129339112), np.float64(0.9169001223199306))
inp_scaling: (np.float64(0.663683272956497), np.float64(0.15917353426438874), np.float64(0.9458329002822197))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 124799.336,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5965091331058262), np.float64(0.6627001680229396), np.float64(0.9376468185509462))
inp_scaling: (np.float64(0.5251440186671411), np.float64(0.3585705096371157), np.float64(0.3330296274861645))
units: (300, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 128.02965,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6771915551087255), np.float64(0.5421836095141206), np.float64(0.6371698688175438))
inp_scaling: (np.float64(0.5598205040337951), np.float64(0.8327886580403924), np.float64(0.8945055036037435))
units: (500, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 3394.1875,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.879557533398338), np.float64(0.7749402158197656), np.float64(0.8807986514403721))
inp_scaling: (np.float64(0.19611923452520252), np.float64(0.21054263997735623), np.float64(0.3029423982346692))
units: (400, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 318.79297,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9233109286584489), np.float64(0.8845977352672725), np.float64(0.8502854654923153))
inp_scaling: (np.float64(0.7553782944989842), np.float64(0.8382870694625366), np.float64(0.5492507067542824))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 241.5977,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6955756837245294), np.float64(0.6232546329934315), np.float64(0.849512238071231))
inp_scaling: (np.float64(0.8934237197154721), np.float64(0.4740166704731428), np.float64(0.16715689616907187))
units: (350, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 42.275223,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5038014210802039), np.float64(0.8306974670009633), np.float64(0.8485131501261276))
inp_scaling: (np.float64(0.6758965595919216), np.float64(0.3659861634651622), np.float64(0.8016988448747336))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2046.4211,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8139779840172151), np.float64(0.8995921361782708), np.float64(0.7065898151360761))
inp_scaling: (np.float64(0.41826766506457314), np.float64(0.9336407985709256), np.float64(0.9497040653367688))
units: (300, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 9366.692,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6883215306322641), np.float64(0.7713535949497548), np.float64(0.5676284653146112))
inp_scaling: (np.float64(0.7383386656416241), np.float64(0.24668541340693653), np.float64(0.9447116701079339))
units: (300, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2153.6528,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7951928801606081), np.float64(0.5551670199669162), np.float64(0.7023274583010122))
inp_scaling: (np.float64(0.6765613343107867), np.float64(0.9658728946618228), np.float64(0.15772917370720557))
units: (400, 400, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7851922414724462), np.float64(0.7807245580057443), np.float64(0.9422856868099942))
inp_scaling: (np.float64(0.7210849749580143), np.float64(0.5292060593112267), np.float64(0.14145364217936804))
units: (450, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 93.08721,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9933032862085449), np.float64(0.9297848916439403), np.float64(0.846926096894896))
inp_scaling: (np.float64(0.11667224217345393), np.float64(0.8403155189540141), np.float64(0.623911970476871))
units: (250, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 289.3459,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7936493037763295), np.float64(0.9585452780231016), np.float64(0.7810839479002243))
inp_scaling: (np.float64(0.4489982788084256), np.float64(0.7675123837446128), np.float64(0.30058333202930887))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 120.44337,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7703050174162306), np.float64(0.6915752882340348), np.float64(0.5114512266426765))
inp_scaling: (np.float64(0.9920868308113958), np.float64(0.4944375120508623), np.float64(0.11096732931622726))
units: (400, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 103.51902,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7161925836289649), np.float64(0.6381264852079185), np.float64(0.599042613816247))
inp_scaling: (np.float64(0.6346369499777942), np.float64(0.7550138651650753), np.float64(0.2552386970151903))
units: (250, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 94.47164,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8302581287787597), np.float64(0.7682013416999189), np.float64(0.6561073228427146))
inp_scaling: (np.float64(0.13963626990956285), np.float64(0.15547305637429226), np.float64(0.17075597530491304))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1352.9122,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6493922205342266), np.float64(0.9743111503255139), np.float64(0.752922128016237))
inp_scaling: (np.float64(0.38207830302453716), np.float64(0.8857511138231292), np.float64(0.7942427072186254))
units: (300, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 18582.957,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6361885319211558), np.float64(0.5738431345729466), np.float64(0.522276503694069))
inp_scaling: (np.float64(0.3665355739779521), np.float64(0.5089320113460207), np.float64(0.7732846546992468))
units: (450, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 5310.8687,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5583727796878989), np.float64(0.6015696772837023), np.float64(0.8425544859521794))
inp_scaling: (np.float64(0.13493332070533123), np.float64(0.1312060711028995), np.float64(0.6160881824949727))
units: (200, 300, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7692458494442711), np.float64(0.7202736729654634), np.float64(0.5309053740988268))
inp_scaling: (np.float64(0.494206238577681), np.float64(0.5621978620549033), np.float64(0.38527082400155355))
units: (350, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 73.4646,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6613545822174312), np.float64(0.5157728526950013), np.float64(0.9962092534336637))
inp_scaling: (np.float64(0.5309719818120441), np.float64(0.8219303073529881), np.float64(0.8720867693880806))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5001.8223,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6438271408315409), np.float64(0.762085878643081), np.float64(0.6585476003208935))
inp_scaling: (np.float64(0.8553748029219383), np.float64(0.6086734935534568), np.float64(0.8849752732487054))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5942.944,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7876920391758957), np.float64(0.6889231700631382), np.float64(0.5930671929781235))
inp_scaling: (np.float64(0.8759234699496342), np.float64(0.6854460477536493), np.float64(0.11944687355417137))
units: (400, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 112.039,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8200917012926974), np.float64(0.5001100080861107), np.float64(0.5859224945531583))
inp_scaling: (np.float64(0.49062368538002443), np.float64(0.24929204525608722), np.float64(0.7597674974942321))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3773.1003,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.839005325453191), np.float64(0.5521272588708347), np.float64(0.5473738320419578))
inp_scaling: (np.float64(0.6795447713660988), np.float64(0.32341984693378084), np.float64(0.9012242206833303))
units: (400, 200, 300)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5352505086632634), np.float64(0.9830797736378509), np.float64(0.6766677359878487))
inp_scaling: (np.float64(0.9736736914218527), np.float64(0.9756336060467115), np.float64(0.6465292696776365))
units: (450, 200, 500)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8935623710372677), np.float64(0.8280405979252097), np.float64(0.7747937817082382))
inp_scaling: (np.float64(0.6720568044854296), np.float64(0.7498137932304657), np.float64(0.10904032867292517))
units: (450, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 49.733837,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8067579030365015), np.float64(0.6111463413779679), np.float64(0.6683696418957277))
inp_scaling: (np.float64(0.8706307471296275), np.float64(0.42634669016671), np.float64(0.683471494535139))
units: (300, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 79.993,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8358764846900801), np.float64(0.8433791764129505), np.float64(0.8383691491801881))
inp_scaling: (np.float64(0.4378508856834006), np.float64(0.28828411818728544), np.float64(0.445904777654236))
units: (350, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 605.06,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7258189207109231), np.float64(0.8739150118198505), np.float64(0.5053398628481606))
inp_scaling: (np.float64(0.344165313610994), np.float64(0.7412982462899556), np.float64(0.47802279767475886))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 266.0333,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6540570203741841), np.float64(0.8816538054414367), np.float64(0.5790190209796666))
inp_scaling: (np.float64(0.7750801145084029), np.float64(0.5152120171870754), np.float64(0.9533973199922083))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 11090.733,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8361404720124244), np.float64(0.637791106603054), np.float64(0.5434315689895599))
inp_scaling: (np.float64(0.8279763484591699), np.float64(0.5133153259054865), np.float64(0.8501610818511002))
units: (400, 350, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7490561936246527), np.float64(0.7507293804539747), np.float64(0.5946466196687652))
inp_scaling: (np.float64(0.8667366175562935), np.float64(0.2279312613301602), np.float64(0.19738106336213507))
units: (400, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 51.97556,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6751958945871259), np.float64(0.7667530142951419), np.float64(0.9582591921050233))
inp_scaling: (np.float64(0.44782884901706954), np.float64(0.37641339842592403), np.float64(0.9810193160001193))
units: (400, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 25930.795,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.781220887903328), np.float64(0.9695472508747522), np.float64(0.7926289161131924))
inp_scaling: (np.float64(0.7932521481599929), np.float64(0.1984703485306039), np.float64(0.268246506717746))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 196.59177,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7116498688743013), np.float64(0.6933370706303472), np.float64(0.8029058759423475))
inp_scaling: (np.float64(0.32185079288327256), np.float64(0.7579343442700239), np.float64(0.7652296220482873))
units: (200, 350, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6499258115211302), np.float64(0.7055474443925003), np.float64(0.6885093224175822))
inp_scaling: (np.float64(0.21642078214125354), np.float64(0.715003884695965), np.float64(0.7380461804392621))
units: (400, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 238.64604,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5641328264481706), np.float64(0.7022282886349182), np.float64(0.7355432239992842))
inp_scaling: (np.float64(0.23788469080915906), np.float64(0.6445377120751667), np.float64(0.6294382003956088))
units: (300, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 178.59943,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9419367630092679), np.float64(0.7188479463999633), np.float64(0.7123824970549474))
inp_scaling: (np.float64(0.6143626197129787), np.float64(0.9993862344141411), np.float64(0.2922268456325076))
units: (250, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 69.111595,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5833997009544698), np.float64(0.8261904857216018), np.float64(0.9842958723376558))
inp_scaling: (np.float64(0.9465886532553459), np.float64(0.8853475930164142), np.float64(0.9720476532030096))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 9204.573,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7046189557777549), np.float64(0.7180826546800487), np.float64(0.6416526040152527))
inp_scaling: (np.float64(0.47856744135196927), np.float64(0.41402271065589447), np.float64(0.986250052606189))
units: (400, 200, 400)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8638038846054835), np.float64(0.5760235544799245), np.float64(0.6554436682193219))
inp_scaling: (np.float64(0.2632455227462549), np.float64(0.1566745995383268), np.float64(0.15037157218737496))
units: (400, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 117.06725,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9947963106686775), np.float64(0.9703528957908314), np.float64(0.9704695589250073))
inp_scaling: (np.float64(0.6431285473033375), np.float64(0.6574956023084569), np.float64(0.16651182578615326))
units: (450, 400, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6624415307857381), np.float64(0.9217011731813708), np.float64(0.7574025446091942))
inp_scaling: (np.float64(0.9576569368635205), np.float64(0.22483671666897093), np.float64(0.6475098415462819))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 4616.3413,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8416237385806526), np.float64(0.945975107306641), np.float64(0.7868904929031104))
inp_scaling: (np.float64(0.38466398498331666), np.float64(0.3759641714159164), np.float64(0.7396826546275371))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 481.09976,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8240491980365967), np.float64(0.6330334362367851), np.float64(0.653871144659124))
inp_scaling: (np.float64(0.4522330455870872), np.float64(0.5253681072969332), np.float64(0.6250777100415357))
units: (500, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 4421.7417,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9132699644992592), np.float64(0.7068681239207437), np.float64(0.6803897375534822))
inp_scaling: (np.float64(0.621773174257291), np.float64(0.6562388818032476), np.float64(0.26491020978085855))
units: (300, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 23.559893,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.707363671559781), np.float64(0.7560985192988374), np.float64(0.5137494336550756))
inp_scaling: (np.float64(0.5104949550092047), np.float64(0.9357210219196808), np.float64(0.9668928279892003))
units: (350, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 6896.9624,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9984113249911274), np.float64(0.7250820403934206), np.float64(0.8375538303377221))
inp_scaling: (np.float64(0.8380776447944369), np.float64(0.1630547426031759), np.float64(0.5569769368086712))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 376.133,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7406894688902871), np.float64(0.7341173880771137), np.float64(0.7012379424130053))
inp_scaling: (np.float64(0.13853409933154548), np.float64(0.15086666841024113), np.float64(0.14765074060286393))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 443.36313,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.807279637441898), np.float64(0.7758552656451482), np.float64(0.8148599730458566))
inp_scaling: (np.float64(0.5761559361051911), np.float64(0.7444136793393721), np.float64(0.7462751837949086))
units: (400, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2399.1694,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6254981532893008), np.float64(0.8001546247145803), np.float64(0.8598873782363706))
inp_scaling: (np.float64(0.6698549354899314), np.float64(0.8648963790371633), np.float64(0.5893912992711442))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 116.85785,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8497554993633527), np.float64(0.8035928690344657), np.float64(0.5721519669766637))
inp_scaling: (np.float64(0.5138101730641528), np.float64(0.24136146552662133), np.float64(0.926658009865221))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2990.5176,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6892799326649732), np.float64(0.6963512101398547), np.float64(0.7711254327973076))
inp_scaling: (np.float64(0.7514420312843431), np.float64(0.4585470463866288), np.float64(0.6876781102549326))
units: (250, 200, 400)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7636041884282458), np.float64(0.5238846255672143), np.float64(0.7222699747986563))
inp_scaling: (np.float64(0.8970897534009261), np.float64(0.7874826068998707), np.float64(0.6686560299464402))
units: (400, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 315.1306,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6016723254336095), np.float64(0.9761420118881399), np.float64(0.8607886105719114))
inp_scaling: (np.float64(0.7282530516420672), np.float64(0.2504992329538718), np.float64(0.5970124410765786))
units: (400, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 372.79855,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5002652988106171), np.float64(0.6787285920929831), np.float64(0.6744605990692207))
inp_scaling: (np.float64(0.9444594247169196), np.float64(0.9361515244648672), np.float64(0.900281297371105))
units: (350, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1028.2606,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8312373966477244), np.float64(0.5676449418013383), np.float64(0.5311836564145056))
inp_scaling: (np.float64(0.5902702435161086), np.float64(0.16864093702718436), np.float64(0.4132480710097658))
units: (500, 200, 350)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9380940616592859), np.float64(0.5199003079333542), np.float64(0.9933874757191952))
inp_scaling: (np.float64(0.7189747684237567), np.float64(0.9202493658354557), np.float64(0.1962092252707499))
units: (450, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 40.928272,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5601405005795246), np.float64(0.630657865789159), np.float64(0.8042282075410079))
inp_scaling: (np.float64(0.7706353279641777), np.float64(0.7597231548080708), np.float64(0.9878343471170371))
units: (300, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 6730.79,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8861169731406064), np.float64(0.9180646056854357), np.float64(0.9621192800128784))
inp_scaling: (np.float64(0.5663974013552869), np.float64(0.6276785644390053), np.float64(0.9163751429110182))
units: (300, 200, 250)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9286157489132838), np.float64(0.7864022832013531), np.float64(0.8787438760221595))
inp_scaling: (np.float64(0.4618887070201291), np.float64(0.41899169288790417), np.float64(0.4094284179002614))
units: (250, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 278.05124,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5900996290206976), np.float64(0.8197887554758843), np.float64(0.7519501445768153))
inp_scaling: (np.float64(0.19202807183829967), np.float64(0.9444317242002127), np.float64(0.3759202659513988))
units: (350, 450, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.642028252234556), np.float64(0.9792515075577215), np.float64(0.8030145133402384))
inp_scaling: (np.float64(0.6620137167116361), np.float64(0.6069041245882395), np.float64(0.7817887084567614))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 14307.198,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9423316537541698), np.float64(0.693769751051867), np.float64(0.9113784052997944))
inp_scaling: (np.float64(0.23700504035388315), np.float64(0.5328200593896157), np.float64(0.14006163260170726))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 27.892742,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9472280925877127), np.float64(0.5858759366673056), np.float64(0.8628415963910986))
inp_scaling: (np.float64(0.43299785089569487), np.float64(0.5998990576359927), np.float64(0.1855567539860838))
units: (250, 400, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.971906959177569), np.float64(0.6796413208169662), np.float64(0.6721879216377182))
inp_scaling: (np.float64(0.5580174054666421), np.float64(0.8764763731181083), np.float64(0.5866667163815579))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1364.1482,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5423680295023597), np.float64(0.6048814039720202), np.float64(0.7541437797590251))
inp_scaling: (np.float64(0.8893369353153237), np.float64(0.6665083350218328), np.float64(0.3073440636675405))
units: (250, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 57.49896,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9607718261963453), np.float64(0.5128020447342252), np.float64(0.6939952146755431))
inp_scaling: (np.float64(0.7278849939272998), np.float64(0.12779440502406425), np.float64(0.2687506586730972))
units: (200, 400, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6378588809928003), np.float64(0.5211003603650415), np.float64(0.546410743220263))
inp_scaling: (np.float64(0.7518172700613494), np.float64(0.5827343872635297), np.float64(0.9051241881537462))
units: (200, 450, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7453497620359901), np.float64(0.7730479120532667), np.float64(0.7839531976346867))
inp_scaling: (np.float64(0.2872912763593684), np.float64(0.13828343822120404), np.float64(0.4118980337854369))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 757.9654,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5068387466722449), np.float64(0.8978030701737396), np.float64(0.6866437444160699))
inp_scaling: (np.float64(0.5797643399563457), np.float64(0.8365413528710439), np.float64(0.17924485602988355))
units: (450, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 82.205055,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9088861597382778), np.float64(0.5428457612860386), np.float64(0.5010942069196069))
inp_scaling: (np.float64(0.34859895405925184), np.float64(0.8049056382336333), np.float64(0.16792644710106608))
units: (450, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 21.564901,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7489390344170817), np.float64(0.6470948771822556), np.float64(0.7464360817091553))
inp_scaling: (np.float64(0.9000704698728411), np.float64(0.28379626590475576), np.float64(0.6129550877327788))
units: (450, 300, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9617114567079406), np.float64(0.6922832757327229), np.float64(0.9457931174735652))
inp_scaling: (np.float64(0.9594564949374564), np.float64(0.3492816327382221), np.float64(0.6053394655658902))
units: (500, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 163.00156,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6869615466113871), np.float64(0.9324184673942651), np.float64(0.9599185568564115))
inp_scaling: (np.float64(0.6603478778125838), np.float64(0.2568160130501582), np.float64(0.5631570869622755))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 308.95413,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7778934742586805), np.float64(0.9948772495290291), np.float64(0.5524364190858514))
inp_scaling: (np.float64(0.6299786814590618), np.float64(0.6337402201441209), np.float64(0.48485603935127586))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 539.3308,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6316393232793119), np.float64(0.7678182210318907), np.float64(0.5895844613001137))
inp_scaling: (np.float64(0.5398043007304905), np.float64(0.5519621946435501), np.float64(0.328159701953789))
units: (200, 300, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8933524686006034), np.float64(0.8241791001054595), np.float64(0.8573323924243021))
inp_scaling: (np.float64(0.29689378106802355), np.float64(0.8214668873503475), np.float64(0.6617564204954655))
units: (400, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 157.70197,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6576258277129283), np.float64(0.6723985148058502), np.float64(0.7380964311499365))
inp_scaling: (np.float64(0.7231814071028162), np.float64(0.5789932554042857), np.float64(0.9247765389955702))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4493.724,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.561816288050751), np.float64(0.6507477075515131), np.float64(0.7430393563968785))
inp_scaling: (np.float64(0.6003931816390523), np.float64(0.6902289942212042), np.float64(0.8316065593255776))
units: (350, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5874.6484,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7424465303365331), np.float64(0.838389128062967), np.float64(0.9285892941048459))
inp_scaling: (np.float64(0.6541888503854411), np.float64(0.2539523379741784), np.float64(0.28284786206409906))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 105.65325,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8176585895240175), np.float64(0.7635590455062731), np.float64(0.7348132042464393))
inp_scaling: (np.float64(0.8282277949883542), np.float64(0.1811173078045033), np.float64(0.3142886124527863))
units: (200, 350, 200)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9583276455283433), np.float64(0.5328214223522711), np.float64(0.5090562675096052))
inp_scaling: (np.float64(0.8530257945286323), np.float64(0.6395103609750953), np.float64(0.5540770395227067))
units: (200, 450, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8504331178324205), np.float64(0.6615522705954042), np.float64(0.8293441792126635))
inp_scaling: (np.float64(0.2527438684461303), np.float64(0.931116867231877), np.float64(0.46873292195533023))
units: (300, 200, 500)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9993178063983351), np.float64(0.7157242757491317), np.float64(0.8965962111923431))
inp_scaling: (np.float64(0.7760095065517117), np.float64(0.11167653213631235), np.float64(0.2996533467002721))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 535.59174,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6932931945017122), np.float64(0.6606989349587264), np.float64(0.7706227139413966))
inp_scaling: (np.float64(0.3923085108614256), np.float64(0.8045025145747193), np.float64(0.5052371449169286))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 3303.4458,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7135393184579913), np.float64(0.9632367136433444), np.float64(0.8461351028512487))
inp_scaling: (np.float64(0.8832493926899092), np.float64(0.4446474944151456), np.float64(0.9200227312065491))
units: (400, 400, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.81410426139231), np.float64(0.7596894969464196), np.float64(0.5942946613874681))
inp_scaling: (np.float64(0.8229324169399215), np.float64(0.6922148292809666), np.float64(0.5173829768106025))
units: (200, 500, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6520598350232709), np.float64(0.905532445689541), np.float64(0.7038669463455275))
inp_scaling: (np.float64(0.8517091704989496), np.float64(0.11079447467811558), np.float64(0.22750378599234009))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 815.30426,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5984605976985268), np.float64(0.9655130070523517), np.float64(0.6780487222748848))
inp_scaling: (np.float64(0.854689279453522), np.float64(0.5909578856086461), np.float64(0.3884021780064445))
units: (500, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 102.93126,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6462551285467275), np.float64(0.6248519946048261), np.float64(0.5444300621616199))
inp_scaling: (np.float64(0.24047563954232654), np.float64(0.14282450127298013), np.float64(0.7183426760166239))
units: (250, 400, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7440167413799583), np.float64(0.9054407382469636), np.float64(0.5005940421010779))
inp_scaling: (np.float64(0.2892807144219078), np.float64(0.9682555484917286), np.float64(0.3679356800186725))
units: (250, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 51.642723,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9246151057916348), np.float64(0.8439452203831928), np.float64(0.7061968669767712))
inp_scaling: (np.float64(0.4659682140880952), np.float64(0.4797425344258155), np.float64(0.6529943476927351))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 6320.3823,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7557402834178482), np.float64(0.7542215434851086), np.float64(0.9617209050303058))
inp_scaling: (np.float64(0.5682583989870303), np.float64(0.3826007519794553), np.float64(0.5741279030600728))
units: (500, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 921.5484,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5195422383994053), np.float64(0.561226913528916), np.float64(0.5682160775063352))
inp_scaling: (np.float64(0.9078295870328796), np.float64(0.6162395889413762), np.float64(0.1570010020841209))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 43.879513,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8453796122922539), np.float64(0.7009790136146827), np.float64(0.5426866778220242))
inp_scaling: (np.float64(0.23579757542662785), np.float64(0.7431694063269328), np.float64(0.21618189403442595))
units: (250, 500, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7185533351293357), np.float64(0.9560930628458126), np.float64(0.7033596768292804))
inp_scaling: (np.float64(0.15831549948464502), np.float64(0.5313219621116922), np.float64(0.6210367274047788))
units: (300, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 484.0779,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9352918478546649), np.float64(0.7236892935737356), np.float64(0.6098067457654299))
inp_scaling: (np.float64(0.906256016619534), np.float64(0.48224242015327945), np.float64(0.9842199990660088))
units: (300, 400, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9053067440897437), np.float64(0.9568477045000733), np.float64(0.7072287168138504))
inp_scaling: (np.float64(0.44206611813242525), np.float64(0.286994651592679), np.float64(0.8065484187341692))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 3863.4275,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9897324873183031), np.float64(0.9908391948575885), np.float64(0.961004703205938))
inp_scaling: (np.float64(0.27871571539499046), np.float64(0.7190917329903498), np.float64(0.94371169299073))
units: (500, 200, 350)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7068522862193447), np.float64(0.7480009490175445), np.float64(0.9106214048955383))
inp_scaling: (np.float64(0.14606144489718786), np.float64(0.7221451258894257), np.float64(0.8520914167938738))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2825.6646,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7262897223384506), np.float64(0.6708186476880984), np.float64(0.6709790806123518))
inp_scaling: (np.float64(0.6804064688207293), np.float64(0.8308999453548416), np.float64(0.2965259446456349))
units: (450, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 54.253895,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8083618103873658), np.float64(0.642995745631187), np.float64(0.5750675268640838))
inp_scaling: (np.float64(0.9598226133259707), np.float64(0.8444909790592444), np.float64(0.5105526413382221))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 226.74507,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8619673347644154), np.float64(0.8155665442435747), np.float64(0.8852026705495031))
inp_scaling: (np.float64(0.7528020748475748), np.float64(0.3607849204847857), np.float64(0.5212936338369795))
units: (500, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 691.2311,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7997776944226693), np.float64(0.7445184083507668), np.float64(0.7759886930258737))
inp_scaling: (np.float64(0.7866321135762275), np.float64(0.9648697742533088), np.float64(0.8099518597775134))
units: (400, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 840.0954,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6257193434222758), np.float64(0.9002929504340942), np.float64(0.7803632527771587))
inp_scaling: (np.float64(0.7880134078459483), np.float64(0.13212864765457166), np.float64(0.7649877943686385))
units: (450, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 3039.2253,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6218890707825057), np.float64(0.9648225408707479), np.float64(0.9061199474430184))
inp_scaling: (np.float64(0.872788800545353), np.float64(0.8893429008120035), np.float64(0.9796817020501509))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 5255.913,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5500333869169142), np.float64(0.7929503203617183), np.float64(0.7007535753303382))
inp_scaling: (np.float64(0.43866060758599235), np.float64(0.8731545202391028), np.float64(0.5140645631062108))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 334.46164,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8855555169903216), np.float64(0.788261959385057), np.float64(0.9205525112297456))
inp_scaling: (np.float64(0.3885329490126894), np.float64(0.7679912997097276), np.float64(0.3155559700047299))
units: (400, 250, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8814260105364518), np.float64(0.8780516495070623), np.float64(0.6737678649102272))
inp_scaling: (np.float64(0.7924820090179706), np.float64(0.1147094357273156), np.float64(0.8175544143892998))
units: (450, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 18243.906,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8836188542009835), np.float64(0.7476776500570167), np.float64(0.8638836254987446))
inp_scaling: (np.float64(0.9311687017138953), np.float64(0.5359542330891828), np.float64(0.37426676066896625))
units: (250, 250, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.873230046598924), np.float64(0.9940427018609953), np.float64(0.816833633205089))
inp_scaling: (np.float64(0.5428899454881041), np.float64(0.20084681811270857), np.float64(0.7721327042724512))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9920777277449068), np.float64(0.815006744506128), np.float64(0.5123247300663094))
inp_scaling: (np.float64(0.6183963182582443), np.float64(0.8030100785135126), np.float64(0.8547232520287322))
units: (350, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1209.4258,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8725208279759902), np.float64(0.6255284979038458), np.float64(0.5969239611795892))
inp_scaling: (np.float64(0.341559668406041), np.float64(0.24008697720350597), np.float64(0.488920279368507))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 356.02133,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5908619855673611), np.float64(0.6744917703905677), np.float64(0.8421318849002224))
inp_scaling: (np.float64(0.5630762877626939), np.float64(0.4748529232487071), np.float64(0.8896456119589843))
units: (450, 200, 400)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9643106749321195), np.float64(0.9911758269851901), np.float64(0.6480750716215414))
inp_scaling: (np.float64(0.17190069464222968), np.float64(0.2378942316334327), np.float64(0.4336374929237947))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 162.20273,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8128018603078881), np.float64(0.5515450931934853), np.float64(0.9491682194668412))
inp_scaling: (np.float64(0.6090247300497383), np.float64(0.36211309861227203), np.float64(0.29103265958222435))
units: (300, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 91.60999,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6720433186105308), np.float64(0.7815789531703905), np.float64(0.6990104705075966))
inp_scaling: (np.float64(0.9265246854414687), np.float64(0.8981194889038935), np.float64(0.13516993264157717))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 50.59222,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5555192704993803), np.float64(0.6914721345095651), np.float64(0.6630085412869637))
inp_scaling: (np.float64(0.858284880078655), np.float64(0.17076039371641957), np.float64(0.31288003543537357))
units: (450, 200, 350)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8353347689665684), np.float64(0.8519235976075819), np.float64(0.8741891541919637))
inp_scaling: (np.float64(0.6456056488631583), np.float64(0.3944230465629791), np.float64(0.6708159758282954))
units: (400, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 16002.553,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7722866280146066), np.float64(0.602523498005763), np.float64(0.993793599536253))
inp_scaling: (np.float64(0.779019637549952), np.float64(0.2671013899163458), np.float64(0.8106568144292875))
units: (350, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 4705.3247,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7419400046395355), np.float64(0.6890254191770054), np.float64(0.7969557408211958))
inp_scaling: (np.float64(0.9440132424057406), np.float64(0.33048064656477727), np.float64(0.7265944883882046))
units: (250, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 13944.95,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6103283720622811), np.float64(0.8043075317513866), np.float64(0.7862344013088994))
inp_scaling: (np.float64(0.8869685130179519), np.float64(0.6145792800170715), np.float64(0.2514226347037507))
units: (300, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 75.55912,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6877520809319793), np.float64(0.8030542156541641), np.float64(0.561081795339429))
inp_scaling: (np.float64(0.7503615163709545), np.float64(0.5751959165530455), np.float64(0.6816033266377601))
units: (500, 400, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8053232921233003), np.float64(0.501043115727357), np.float64(0.5600856044365874))
inp_scaling: (np.float64(0.3760308312029985), np.float64(0.2196359791094279), np.float64(0.44371439728756856))
units: (250, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 68.14267,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8459301067572325), np.float64(0.9756865183172685), np.float64(0.7094989794212978))
inp_scaling: (np.float64(0.27063503098536196), np.float64(0.5436709111756511), np.float64(0.37103901984894483))
units: (350, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 122.67904,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7204859801443619), np.float64(0.8400142720334988), np.float64(0.8310685976701928))
inp_scaling: (np.float64(0.6683382486046456), np.float64(0.6511115720261779), np.float64(0.4473507179542153))
units: (250, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 223.53749,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5017314699129535), np.float64(0.9954760230476453), np.float64(0.6362467233021616))
inp_scaling: (np.float64(0.12213247770583029), np.float64(0.4916403442954942), np.float64(0.5931379874364143))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 257.66278,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9187144826947511), np.float64(0.5849639763385646), np.float64(0.9316392470814294))
inp_scaling: (np.float64(0.27604062111764094), np.float64(0.9706307975400638), np.float64(0.33490929781384066))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 122.83543,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8332720357153024), np.float64(0.8067712681819929), np.float64(0.6670043231928254))
inp_scaling: (np.float64(0.1329884013803929), np.float64(0.27534939134818626), np.float64(0.6852794843584685))
units: (200, 300, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5095267435456078), np.float64(0.8416795961918433), np.float64(0.8533525098950854))
inp_scaling: (np.float64(0.819780618894753), np.float64(0.890387632989924), np.float64(0.5439067289324426))
units: (350, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1168.8473,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8343636468894786), np.float64(0.6353574658472199), np.float64(0.6873674153683377))
inp_scaling: (np.float64(0.5406815776030063), np.float64(0.196159301055133), np.float64(0.10669072203050024))
units: (450, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 66.45296,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7448877215754888), np.float64(0.9926584923806768), np.float64(0.8216615305243467))
inp_scaling: (np.float64(0.15119875546943265), np.float64(0.268554129964757), np.float64(0.42705434613493687))
units: (300, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 528.67664,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8604068267340003), np.float64(0.9236379891643223), np.float64(0.9139787539303073))
inp_scaling: (np.float64(0.6970003893152759), np.float64(0.6102501776101699), np.float64(0.7633251653958343))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1277.668,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5637400505729022), np.float64(0.5356021136302679), np.float64(0.8271473523838743))
inp_scaling: (np.float64(0.1488520851323312), np.float64(0.6699946736325032), np.float64(0.9630276411528532))
units: (350, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 3659.1765,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5218107249632662), np.float64(0.5888143033843702), np.float64(0.5708441316249011))
inp_scaling: (np.float64(0.8431355086903399), np.float64(0.7953865174506145), np.float64(0.42067695896338664))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 29.198307,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5204033759850856), np.float64(0.6440244813784778), np.float64(0.9260874621640277))
inp_scaling: (np.float64(0.15212342959310227), np.float64(0.6707930102667528), np.float64(0.6314995116069619))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1624.485,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7317375473476703), np.float64(0.7444724818038795), np.float64(0.6054702628375048))
inp_scaling: (np.float64(0.7262741153718381), np.float64(0.9826842160678438), np.float64(0.1275008008251913))
units: (500, 300, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6500908042953258), np.float64(0.9407614539700448), np.float64(0.72974467449114))
inp_scaling: (np.float64(0.5360355473221778), np.float64(0.3144508369016292), np.float64(0.8538479549059138))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 2552.334,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.906923127312572), np.float64(0.8394608507924229), np.float64(0.5911690653930202))
inp_scaling: (np.float64(0.9384323463611898), np.float64(0.4128986035355765), np.float64(0.9892053854646212))
units: (250, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 31271.879,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5433095591931956), np.float64(0.9920956046059661), np.float64(0.7882792849629451))
inp_scaling: (np.float64(0.28871442883701903), np.float64(0.571201415878335), np.float64(0.4991992475046523))
units: (450, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 310.96783,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8715639957122104), np.float64(0.9360800257770412), np.float64(0.6207762744789699))
inp_scaling: (np.float64(0.3411902895855834), np.float64(0.48155531821286857), np.float64(0.833079796176446))
units: (500, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 504.9362,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8299901726982999), np.float64(0.9997337225465294), np.float64(0.8191965509555454))
inp_scaling: (np.float64(0.295379500284092), np.float64(0.15339852839279505), np.float64(0.3698131766332078))
units: (450, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 265.828,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8889958534710274), np.float64(0.9901304619145986), np.float64(0.5466726324185676))
inp_scaling: (np.float64(0.21395496222337312), np.float64(0.17244380181450358), np.float64(0.8701538225656857))
units: (350, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 523.3962,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5011438304972198), np.float64(0.7302420811451362), np.float64(0.7108776085146531))
inp_scaling: (np.float64(0.18442421179061713), np.float64(0.27678799967408085), np.float64(0.9554354077078651))
units: (300, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 6281.0923,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6174625124927691), np.float64(0.8563008974522138), np.float64(0.8755445761626599))
inp_scaling: (np.float64(0.4255433705007998), np.float64(0.646687614729035), np.float64(0.9732143225492683))
units: (350, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 9253.078,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5977482662888942), np.float64(0.7567908976772453), np.float64(0.9758823320707624))
inp_scaling: (np.float64(0.4980617422687522), np.float64(0.8088309115973159), np.float64(0.5839959386235791))
units: (300, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 875.384,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6929924471161019), np.float64(0.5292920073816649), np.float64(0.6123014822370766))
inp_scaling: (np.float64(0.6340381422287565), np.float64(0.364974567671007), np.float64(0.635417534218667))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1860.0846,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9602577495222959), np.float64(0.501822697551752), np.float64(0.7474178778253703))
inp_scaling: (np.float64(0.4588954588799147), np.float64(0.9018057272300436), np.float64(0.550473967652521))
units: (200, 500, 500)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.855776566805795), np.float64(0.5794587524940791), np.float64(0.9538317387309461))
inp_scaling: (np.float64(0.6981817836689549), np.float64(0.1569647013639324), np.float64(0.9161482165000757))
units: (300, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 14270.099,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6572477398597937), np.float64(0.5743907904398622), np.float64(0.7102232580056438))
inp_scaling: (np.float64(0.7332681995174731), np.float64(0.6265003872973008), np.float64(0.34204784062480875))
units: (500, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 41.879158,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9297372114298004), np.float64(0.9291604213618097), np.float64(0.838647045035627))
inp_scaling: (np.float64(0.10575956932809864), np.float64(0.7946658773302628), np.float64(0.6657203780149655))
units: (200, 450, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8047252970987784), np.float64(0.8217030915581337), np.float64(0.8645198661394786))
inp_scaling: (np.float64(0.4015122875039411), np.float64(0.7025012617718209), np.float64(0.7725382458657193))
units: (400, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 22811.174,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9614540576019837), np.float64(0.73056800559083), np.float64(0.6332347392266306))
inp_scaling: (np.float64(0.14746626956930814), np.float64(0.9588448328711137), np.float64(0.3869129886487954))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 312.3236,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9788027571353302), np.float64(0.6715558798653858), np.float64(0.8949781137794768))
inp_scaling: (np.float64(0.8023792420988046), np.float64(0.3465534704828671), np.float64(0.5137524778698058))
units: (400, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 662.69464,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9311782539122491), np.float64(0.778835826240184), np.float64(0.9185497753909857))
inp_scaling: (np.float64(0.6130414293684335), np.float64(0.9508932995355337), np.float64(0.911857557022769))
units: (450, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 22760.816,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6719841380284299), np.float64(0.835402095766572), np.float64(0.6954488678404123))
inp_scaling: (np.float64(0.2261040936349338), np.float64(0.7467005943244536), np.float64(0.5197965242800316))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 126.34774,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.998508592935754), np.float64(0.9844536302521817), np.float64(0.7970740843936119))
inp_scaling: (np.float64(0.6331927350994281), np.float64(0.49951398651592194), np.float64(0.10180850221187156))
units: (400, 400, 200)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9531475517382041), np.float64(0.8938455297243639), np.float64(0.8940911654220078))
inp_scaling: (np.float64(0.15324290907310145), np.float64(0.9183700756399378), np.float64(0.2002035843202843))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 105.42618,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.80962168618679), np.float64(0.7133797219719381), np.float64(0.9474214254078344))
inp_scaling: (np.float64(0.6878905152308208), np.float64(0.4360445177662088), np.float64(0.18671803936695944))
units: (500, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 123.19994,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.57314683286979), np.float64(0.9652059831141305), np.float64(0.7520777898382773))
inp_scaling: (np.float64(0.6073639935653895), np.float64(0.29217401110605057), np.float64(0.6501553449727626))
units: (250, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1295.0873,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9658929060795411), np.float64(0.6839912844472126), np.float64(0.9396643360035523))
inp_scaling: (np.float64(0.9425709168514559), np.float64(0.9476128343855009), np.float64(0.6193742669883837))
units: (300, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 536.6463,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5699862896932825), np.float64(0.7698648767252293), np.float64(0.6271840953273302))
inp_scaling: (np.float64(0.1451617142982284), np.float64(0.1495142917545915), np.float64(0.28679503543294405))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 420.73526,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9542643956014774), np.float64(0.5942870142494259), np.float64(0.5800823401183758))
inp_scaling: (np.float64(0.9957280979435249), np.float64(0.1867646881325867), np.float64(0.46417495427438304))
units: (200, 350, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.637254930930605), np.float64(0.7924272134885836), np.float64(0.5605912618256836))
inp_scaling: (np.float64(0.35833997142958984), np.float64(0.3475781476166909), np.float64(0.30184625996031267))
units: (450, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 66.831436,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7500479023073854), np.float64(0.796506223536575), np.float64(0.9660088935579094))
inp_scaling: (np.float64(0.3555879164561636), np.float64(0.8485075845336065), np.float64(0.8089006998222986))
units: (500, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 11724.572,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5818765571071964), np.float64(0.8792331806731422), np.float64(0.9352145019504259))
inp_scaling: (np.float64(0.5860645539999536), np.float64(0.7740221986466592), np.float64(0.8220796508905994))
units: (300, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 146718.52,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7021414277089226), np.float64(0.5184655950800657), np.float64(0.8295749598432933))
inp_scaling: (np.float64(0.9761525202436531), np.float64(0.33521656533639005), np.float64(0.6727816075111247))
units: (450, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 644.2849,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5311552609798973), np.float64(0.528702171638782), np.float64(0.6068357332811469))
inp_scaling: (np.float64(0.33003645849691765), np.float64(0.39615657815692684), np.float64(0.1620624764365605))
units: (450, 450, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.868615022236529), np.float64(0.5050300750961262), np.float64(0.6667096983539246))
inp_scaling: (np.float64(0.9318403656999312), np.float64(0.4105966560112555), np.float64(0.9094184955346375))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 7813.5205,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7082764176191965), np.float64(0.9846223110002059), np.float64(0.9431409529392583))
inp_scaling: (np.float64(0.6930046580139355), np.float64(0.4100989152143041), np.float64(0.47032938926344503))
units: (250, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 118.475945,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6537879243083715), np.float64(0.5883383428605137), np.float64(0.9467534539526421))
inp_scaling: (np.float64(0.3889852109250287), np.float64(0.6727504998266687), np.float64(0.4870368055850367))
units: (500, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 393.78195,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6939149898712782), np.float64(0.5959498109435619), np.float64(0.9391172412924422))
inp_scaling: (np.float64(0.7292758301607967), np.float64(0.3242535528446775), np.float64(0.4556330886009544))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 86.60378,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8547049840497892), np.float64(0.8288774391629908), np.float64(0.8024034596297864))
inp_scaling: (np.float64(0.2190918214269026), np.float64(0.4247477789640477), np.float64(0.8958008713964011))
units: (400, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 6037.6826,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7979584895477241), np.float64(0.8130757070215877), np.float64(0.5274737369783161))
inp_scaling: (np.float64(0.9102330372281842), np.float64(0.6196572282726345), np.float64(0.6376443145892069))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 60.433987,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5720271821436859), np.float64(0.8540963742420751), np.float64(0.6407488336776523))
inp_scaling: (np.float64(0.5454755860875499), np.float64(0.2085296684193515), np.float64(0.20558896584786665))
units: (200, 350, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7198355471214811), np.float64(0.8017115273255423), np.float64(0.7794445568648265))
inp_scaling: (np.float64(0.3194276324403028), np.float64(0.7487478998211243), np.float64(0.17703336583287288))
units: (350, 350, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 187.02692,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.660113729652114), np.float64(0.6199439501381991), np.float64(0.7132676440893028))
inp_scaling: (np.float64(0.47997034613780576), np.float64(0.7401077079244222), np.float64(0.6946041629820153))
units: (300, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 2148.9597,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5298394927992699), np.float64(0.7943870169758684), np.float64(0.7446883757971555))
inp_scaling: (np.float64(0.7127021203329647), np.float64(0.8779645241956221), np.float64(0.8612611463488606))
units: (300, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 20421.576,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9046116177605383), np.float64(0.5089713157227285), np.float64(0.8038910389638076))
inp_scaling: (np.float64(0.1559572866266848), np.float64(0.3160358631193667), np.float64(0.2938957339617838))
units: (300, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 49.13798,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8826966762274477), np.float64(0.5860474669296594), np.float64(0.7666707376790841))
inp_scaling: (np.float64(0.14322110553438241), np.float64(0.7523903727046691), np.float64(0.787799304226544))
units: (300, 250, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.673730129407751), np.float64(0.9190409508598505), np.float64(0.5714577824001927))
inp_scaling: (np.float64(0.3314805903073308), np.float64(0.8017671477174988), np.float64(0.7362450166576526))
units: (200, 250, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9270792013771717), np.float64(0.9038874812234253), np.float64(0.7341021457703398))
inp_scaling: (np.float64(0.2086988823226243), np.float64(0.5498836822593424), np.float64(0.7005182714298899))
units: (200, 250, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8247522561273942), np.float64(0.601437589890457), np.float64(0.9874370203458891))
inp_scaling: (np.float64(0.7155629108614857), np.float64(0.7355408996762252), np.float64(0.4678256830256423))
units: (300, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 350.86343,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7842495633596722), np.float64(0.9124392381898616), np.float64(0.7016895277515834))
inp_scaling: (np.float64(0.46142428132845503), np.float64(0.5783484758991968), np.float64(0.34503384404598525))
units: (500, 250, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 84.20598,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9699207619444437), np.float64(0.7903528923685723), np.float64(0.5516173427276084))
inp_scaling: (np.float64(0.7974647461445162), np.float64(0.9544025854970991), np.float64(0.617757036099701))
units: (350, 200, 400)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6819031932918748), np.float64(0.5227347140720049), np.float64(0.9632602286057164))
inp_scaling: (np.float64(0.463913761086687), np.float64(0.30310823693567457), np.float64(0.8657160138403224))
units: (350, 200, 350)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8720799794916705), np.float64(0.5160364033275071), np.float64(0.9511578926949005))
inp_scaling: (np.float64(0.833304959779983), np.float64(0.5883741786876748), np.float64(0.3083500636030809))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 30.742054,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6069966265916739), np.float64(0.8212653393698902), np.float64(0.9218765548841618))
inp_scaling: (np.float64(0.2648731881407299), np.float64(0.7097766619400129), np.float64(0.4347340773947591))
units: (250, 200, 450)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7120227451146249), np.float64(0.7578510832295793), np.float64(0.8355957078856678))
inp_scaling: (np.float64(0.1387143487447578), np.float64(0.4274924295813578), np.float64(0.8115053221921694))
units: (300, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 16315.602,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6480788998969146), np.float64(0.5475247389221602), np.float64(0.5649167052623962))
inp_scaling: (np.float64(0.9726247914817979), np.float64(0.16082798453603747), np.float64(0.5580145909194199))
units: (450, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 476.9161,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7060379804160212), np.float64(0.7223823344487775), np.float64(0.6192179634814223))
inp_scaling: (np.float64(0.3608744888633155), np.float64(0.88247852821563), np.float64(0.6536662290902352))
units: (300, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 380.0081,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6560738046366759), np.float64(0.5795334021564662), np.float64(0.8445169281616585))
inp_scaling: (np.float64(0.48664900302277725), np.float64(0.40147511561815263), np.float64(0.1249133587903125))
units: (500, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 68.3563,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5523089142657127), np.float64(0.9189586548174308), np.float64(0.9447593026803958))
inp_scaling: (np.float64(0.7576672022133717), np.float64(0.9097800075019846), np.float64(0.4106034377773784))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2309.389,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7293357436777606), np.float64(0.5597150264578528), np.float64(0.692878684102364))
inp_scaling: (np.float64(0.11480674960877392), np.float64(0.9696168892363949), np.float64(0.4751641945419668))
units: (450, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 210.99469,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9575942428366628), np.float64(0.6776971277918512), np.float64(0.9723901645314734))
inp_scaling: (np.float64(0.1886548082693934), np.float64(0.9649664124065382), np.float64(0.9560222277918531))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 67910.625,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7208714313369202), np.float64(0.7218068878370325), np.float64(0.5826823246004346))
inp_scaling: (np.float64(0.8928991925450884), np.float64(0.3273025947426621), np.float64(0.5809520702498804))
units: (350, 200, 250)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5848701126047409), np.float64(0.982061406800917), np.float64(0.8080746072670537))
inp_scaling: (np.float64(0.7494223986347455), np.float64(0.9599338248939426), np.float64(0.12394462007575664))
units: (350, 450, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7738536526860273), np.float64(0.732349988168834), np.float64(0.9796427652383657))
inp_scaling: (np.float64(0.6399135530636683), np.float64(0.31074238257210796), np.float64(0.11002907432721853))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 80.8697,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6516864859293052), np.float64(0.530429681280955), np.float64(0.6468018196728775))
inp_scaling: (np.float64(0.7469371364446391), np.float64(0.31531586788610666), np.float64(0.5246254090255301))
units: (350, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 675.8531,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6293665280385939), np.float64(0.8089715772307728), np.float64(0.9405679049958122))
inp_scaling: (np.float64(0.13585939725168183), np.float64(0.963672885246723), np.float64(0.8236152303953806))
units: (450, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 38053.082,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6466598250145293), np.float64(0.5462869813223914), np.float64(0.6717322931005446))
inp_scaling: (np.float64(0.274499711823294), np.float64(0.9534056906055465), np.float64(0.6645474783737754))
units: (500, 200, 200)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7918379054866598), np.float64(0.9341101751097444), np.float64(0.6908786016688276))
inp_scaling: (np.float64(0.7873522345883591), np.float64(0.8276036349051761), np.float64(0.5944151072639349))
units: (350, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1072.9895,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6945255594598634), np.float64(0.6875618573271985), np.float64(0.6441728283910926))
inp_scaling: (np.float64(0.955863542655329), np.float64(0.3677899482309642), np.float64(0.6403189192421423))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 257.89767,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8107201865688702), np.float64(0.6021657614360906), np.float64(0.5851203655321581))
inp_scaling: (np.float64(0.6873669666591348), np.float64(0.34942646298241364), np.float64(0.9848712713085342))
units: (350, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 6996.898,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.874123966553334), np.float64(0.8788579116987096), np.float64(0.6948804595533176))
inp_scaling: (np.float64(0.4013990550919796), np.float64(0.439683616145082), np.float64(0.8489513572125335))
units: (300, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1039.9427,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5568129498632132), np.float64(0.5041946247468735), np.float64(0.813465251911639))
inp_scaling: (np.float64(0.38413009635370765), np.float64(0.14213106853377053), np.float64(0.5127555648011431))
units: (450, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1261.8224,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5606552452654437), np.float64(0.8356433056889934), np.float64(0.8872912165089266))
inp_scaling: (np.float64(0.4416377856773619), np.float64(0.5188994810795713), np.float64(0.6581820056686017))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 912.36066,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7387509441592137), np.float64(0.7326448556373341), np.float64(0.5974967287329112))
inp_scaling: (np.float64(0.8485926146964351), np.float64(0.8059185041151735), np.float64(0.46599623307774674))
units: (400, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 156.36812,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6972116389872032), np.float64(0.5266022199262224), np.float64(0.5232318016007931))
inp_scaling: (np.float64(0.3527148012368263), np.float64(0.15950779466942208), np.float64(0.5162041011859836))
units: (450, 350, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7283034342911957), np.float64(0.9426864368209793), np.float64(0.9057742193790211))
inp_scaling: (np.float64(0.6860193771045459), np.float64(0.8519935444435421), np.float64(0.6034261913094048))
units: (300, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 574.3979,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7099888567096972), np.float64(0.8447367663835308), np.float64(0.7510979355582348))
inp_scaling: (np.float64(0.7661640349477964), np.float64(0.24408138038256905), np.float64(0.8820965315400222))
units: (350, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 744.7221,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7725642451423274), np.float64(0.9493053921190333), np.float64(0.8775613054833459))
inp_scaling: (np.float64(0.18691859146538098), np.float64(0.3454515024634225), np.float64(0.5400452083209835))
units: (200, 250, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8315864069193639), np.float64(0.7632238594924392), np.float64(0.7568583575912642))
inp_scaling: (np.float64(0.6695380908474864), np.float64(0.4638515082175154), np.float64(0.34776870767679313))
units: (300, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 73.864365,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5360884418510495), np.float64(0.7501255731963087), np.float64(0.6895858490564435))
inp_scaling: (np.float64(0.834692965566395), np.float64(0.7106800904231254), np.float64(0.23481296759153494))
units: (350, 300, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 80.11146,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8925374876738517), np.float64(0.993600770635701), np.float64(0.7592774609130144))
inp_scaling: (np.float64(0.222600133129282), np.float64(0.6415526954501326), np.float64(0.11623478434861965))
units: (450, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 140.3177,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5593420788997476), np.float64(0.6341034589486646), np.float64(0.9836363659348218))
inp_scaling: (np.float64(0.9469518130095406), np.float64(0.2394968443184536), np.float64(0.5752793678568162))
units: (400, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 430.90613,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6419984206967027), np.float64(0.7798507194746516), np.float64(0.9212081575912792))
inp_scaling: (np.float64(0.9786500916905393), np.float64(0.9761597446266486), np.float64(0.562317293922341))
units: (250, 300, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7222987754117353), np.float64(0.8599009227948544), np.float64(0.5591606359333572))
inp_scaling: (np.float64(0.783443384207396), np.float64(0.21310807190295317), np.float64(0.5693777997903284))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 1195.5708,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.753511496992688), np.float64(0.518580531493339), np.float64(0.7236188795276357))
inp_scaling: (np.float64(0.9809384395916213), np.float64(0.3559105580285781), np.float64(0.2754450495485592))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 62.103577,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.865207185094772), np.float64(0.8923570195564552), np.float64(0.8308526896864588))
inp_scaling: (np.float64(0.13407636108886412), np.float64(0.2853116051490755), np.float64(0.8892122197711506))
units: (400, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5474.588,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8238451770542459), np.float64(0.9801422445038472), np.float64(0.8373910931111654))
inp_scaling: (np.float64(0.15267426762534467), np.float64(0.7515255802036149), np.float64(0.23146647494235312))
units: (350, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 152.84543,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6821004990475249), np.float64(0.5759017245106254), np.float64(0.6731959623999966))
inp_scaling: (np.float64(0.7905714098562374), np.float64(0.8170306691826102), np.float64(0.3487540548678679))
units: (350, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 24.829624,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8567965449574726), np.float64(0.7743234158538367), np.float64(0.8453824139490678))
inp_scaling: (np.float64(0.4668706184207193), np.float64(0.8159922958602469), np.float64(0.33736300212574033))
units: (400, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 59.290096,    std 0.0
 ##################################################################### 

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 242, in <module>
    result_dataset = pd.read_csv("./results/lorenz_results.csv")
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 620, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1620, in __init__
    self._engine = self._make_engine(f, self.engine)
                   ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1898, in _make_engine
    return mapping[engine](f, **self.options)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/.venv/lib/python3.13/site-packages/pandas/io/parsers/c_parser_wrapper.py", line 93, in __init__
    self._reader = parsers.TextReader(src, **kwds)
                   ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "parsers.pyx", line 581, in pandas._libs.parsers.TextReader.__cinit__
pandas.errors.EmptyDataError: No columns to parse from file



--- Config ---
leaky: (np.float64(0.5396662264639791), np.float64(0.8963050106061972), np.float64(0.798444805650291))
inp_scaling: (np.float64(0.2987833726442216), np.float64(0.9159448026758846), np.float64(0.39167015627410773))
units: (450, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 46.444763,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8582891193402192), np.float64(0.5481936628098336), np.float64(0.8336638089426446))
inp_scaling: (np.float64(0.9225577175996527), np.float64(0.6550542814750491), np.float64(0.3034560421740847))
units: (500, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 25.290472,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7783232126317013), np.float64(0.9029017455842087), np.float64(0.8767128576535284))
inp_scaling: (np.float64(0.2117707138713373), np.float64(0.9222094873862432), np.float64(0.9965969882863319))
units: (450, 450, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9277579044492223), np.float64(0.948787736550687), np.float64(0.5513739289937389))
inp_scaling: (np.float64(0.5317888848863433), np.float64(0.5457271041721831), np.float64(0.18161325068735024))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 229.1037,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5894472485766611), np.float64(0.780125062931083), np.float64(0.8633193079319662))
inp_scaling: (np.float64(0.9129542682654251), np.float64(0.10087325894123919), np.float64(0.4900671475016063))
units: (400, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 1190.5027,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5626011343744367), np.float64(0.9864179105289417), np.float64(0.5269820820858011))
inp_scaling: (np.float64(0.8063135237410323), np.float64(0.9036511383116389), np.float64(0.24425356682226512))
units: (350, 450, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5324283451951861), np.float64(0.5993132294358617), np.float64(0.9845325355338785))
inp_scaling: (np.float64(0.6855928759578075), np.float64(0.6959799297540598), np.float64(0.5952105665254068))
units: (200, 350, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7655431866619429), np.float64(0.8454568088722936), np.float64(0.9656304466560669))
inp_scaling: (np.float64(0.5374479174567136), np.float64(0.5968427704198435), np.float64(0.8911538060299862))
units: (350, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 47347.855,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6617479136170892), np.float64(0.6604868362238994), np.float64(0.8283418139718333))
inp_scaling: (np.float64(0.9621054017564807), np.float64(0.14687156074978241), np.float64(0.9196550492176847))
units: (450, 300, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9357501703224294), np.float64(0.7983916308528958), np.float64(0.608066349371944))
inp_scaling: (np.float64(0.8789919905719555), np.float64(0.4517715882556522), np.float64(0.2961490496229729))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 133.34741,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.859310735574038), np.float64(0.8994036818272456), np.float64(0.922043113967635))
inp_scaling: (np.float64(0.1256401321502559), np.float64(0.9967666501413708), np.float64(0.8442365222866841))
units: (200, 200, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5279923025737108), np.float64(0.6479985935488547), np.float64(0.9878280450836483))
inp_scaling: (np.float64(0.20232311486809718), np.float64(0.31720954970275067), np.float64(0.8644978885527502))
units: (300, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 89159.984,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9140842085393036), np.float64(0.941385953426239), np.float64(0.72018251950346))
inp_scaling: (np.float64(0.9236811611727384), np.float64(0.16471873531254322), np.float64(0.5297167577005415))
units: (400, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 691.2856,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9669961786679747), np.float64(0.5980558183119962), np.float64(0.6281816873239692))
inp_scaling: (np.float64(0.4935740288773588), np.float64(0.7984017748151525), np.float64(0.3575629354485552))
units: (250, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 50.27313,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7922198607290061), np.float64(0.8336428974442585), np.float64(0.7413011653516979))
inp_scaling: (np.float64(0.7038504880232049), np.float64(0.45045776880172084), np.float64(0.6259444063611486))
units: (300, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 298.3464,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8038143758726369), np.float64(0.8631884513401948), np.float64(0.6762099881583816))
inp_scaling: (np.float64(0.9512045251302137), np.float64(0.3516105238728414), np.float64(0.3524424525004205))
units: (300, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 97.49423,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5943583394766281), np.float64(0.6591395913097147), np.float64(0.8995810586557114))
inp_scaling: (np.float64(0.8236136174508787), np.float64(0.4478489057207472), np.float64(0.10045345689322159))
units: (300, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 79.92572,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.782713550191289), np.float64(0.6801782016938038), np.float64(0.5190245249249436))
inp_scaling: (np.float64(0.4886939494003847), np.float64(0.15461111998487706), np.float64(0.7127920106690027))
units: (250, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1032.5642,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5248658220544674), np.float64(0.7070654551549654), np.float64(0.6091461797385102))
inp_scaling: (np.float64(0.994267015876133), np.float64(0.433223205169436), np.float64(0.24182706628885814))
units: (250, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 19.922092,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8943984593355414), np.float64(0.5408729569775012), np.float64(0.8098360498039674))
inp_scaling: (np.float64(0.20937284653175076), np.float64(0.8356153655072427), np.float64(0.5046487286426481))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 462.9454,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6092248454419764), np.float64(0.7033674801670229), np.float64(0.9483258733020123))
inp_scaling: (np.float64(0.8104380456748137), np.float64(0.304304328342047), np.float64(0.38363875866497066))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 333.58313,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5881815464725861), np.float64(0.6126183718029894), np.float64(0.6126905205998947))
inp_scaling: (np.float64(0.5925301631749826), np.float64(0.6621203811320406), np.float64(0.15489961223079418))
units: (300, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 74.74434,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6996209930162871), np.float64(0.8814429949841474), np.float64(0.6975616346575767))
inp_scaling: (np.float64(0.18103299873325823), np.float64(0.9568897886632138), np.float64(0.5820809442023215))
units: (350, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 285.47156,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5253567721020808), np.float64(0.5891449387886845), np.float64(0.7293120878364813))
inp_scaling: (np.float64(0.47670561257560373), np.float64(0.5953273429271712), np.float64(0.9901178548186714))
units: (400, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 2455.6484,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7718621375453936), np.float64(0.545534423983978), np.float64(0.6131133271982712))
inp_scaling: (np.float64(0.40319468592964103), np.float64(0.5072138661319849), np.float64(0.8929941985184583))
units: (450, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5560.226,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5875155813406557), np.float64(0.9435066644822129), np.float64(0.8018230167305825))
inp_scaling: (np.float64(0.17961383936633835), np.float64(0.9281804941294757), np.float64(0.8682069546710997))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1667.3458,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9951182177570312), np.float64(0.6005529111287742), np.float64(0.5176573732445559))
inp_scaling: (np.float64(0.24254445682817516), np.float64(0.4958329383383412), np.float64(0.9609273122579612))
units: (450, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 5049.8027,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7128141868774515), np.float64(0.9689013732959819), np.float64(0.685263716759724))
inp_scaling: (np.float64(0.29018110005433406), np.float64(0.9747721555513452), np.float64(0.20712920222627726))
units: (400, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 35.005302,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9977730920555619), np.float64(0.9481241062601908), np.float64(0.8431308730182014))
inp_scaling: (np.float64(0.807373538406073), np.float64(0.14340833289381638), np.float64(0.8052773988255291))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 6454.464,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5685261338053428), np.float64(0.5531516027619519), np.float64(0.8048999745885627))
inp_scaling: (np.float64(0.40869648299290195), np.float64(0.8930939092277748), np.float64(0.6794587011662164))
units: (250, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 604.19366,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5162029980915979), np.float64(0.8916789957864961), np.float64(0.5553852334428119))
inp_scaling: (np.float64(0.5180758630891404), np.float64(0.34113052149746914), np.float64(0.11456710016066315))
units: (250, 200, 400)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6055119424184934), np.float64(0.867069848044277), np.float64(0.5484515647034317))
inp_scaling: (np.float64(0.6186482921785196), np.float64(0.2176031174223363), np.float64(0.9422053452548164))
units: (500, 250, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 32279.834,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8255798988011633), np.float64(0.7123331104284323), np.float64(0.6967220724486985))
inp_scaling: (np.float64(0.15508853957956378), np.float64(0.14497829028921558), np.float64(0.698910178189214))
units: (250, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 756.9617,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7710712129575485), np.float64(0.5396687451282296), np.float64(0.7496668092653116))
inp_scaling: (np.float64(0.5422319664079946), np.float64(0.6461828529377941), np.float64(0.4188394270212734))
units: (450, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 166.58116,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5428149420767623), np.float64(0.5176710087797287), np.float64(0.6983291408326255))
inp_scaling: (np.float64(0.3864799200868485), np.float64(0.19183257432149803), np.float64(0.815879821830367))
units: (300, 200, 400)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9703431059433432), np.float64(0.7167783311122601), np.float64(0.8749176559999277))
inp_scaling: (np.float64(0.48941278765044605), np.float64(0.5107525758318178), np.float64(0.7027002919718334))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2997.3333,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6209978199494655), np.float64(0.8107945416848394), np.float64(0.8719256123711732))
inp_scaling: (np.float64(0.19749393138575744), np.float64(0.9734667562963844), np.float64(0.5914413941759099))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 2007.6532,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5447306706034322), np.float64(0.8499320468776612), np.float64(0.5905005010711302))
inp_scaling: (np.float64(0.2363688733433186), np.float64(0.8231411312111099), np.float64(0.7243274704513004))
units: (300, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 121.29982,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8478640909506475), np.float64(0.5246475464688298), np.float64(0.7049451628887009))
inp_scaling: (np.float64(0.7540921724908648), np.float64(0.5453006251461726), np.float64(0.8828922315094799))
units: (400, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2901.4058,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8325776439020222), np.float64(0.9159068620876766), np.float64(0.7676219193341878))
inp_scaling: (np.float64(0.2511456637016144), np.float64(0.2619167024237544), np.float64(0.5448963902294088))
units: (500, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 874.07947,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6343834717588226), np.float64(0.8246567647576359), np.float64(0.8891660745401716))
inp_scaling: (np.float64(0.6362766152980405), np.float64(0.5557236197117735), np.float64(0.9276128294660775))
units: (350, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1339.0332,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.557856688039253), np.float64(0.8095690129956299), np.float64(0.9324988165305096))
inp_scaling: (np.float64(0.5712363526202153), np.float64(0.2518611897137527), np.float64(0.8132131568168506))
units: (500, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 11007.96,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9173929872056942), np.float64(0.8387446569047806), np.float64(0.5404795730430336))
inp_scaling: (np.float64(0.205421140127929), np.float64(0.6106867592721639), np.float64(0.17810315968413892))
units: (450, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 127.33378,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6586817838714205), np.float64(0.9783714262482315), np.float64(0.7374055412204461))
inp_scaling: (np.float64(0.3464266847668894), np.float64(0.19973885375175396), np.float64(0.40728089430939507))
units: (350, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 734.3516,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8529463395858893), np.float64(0.9629116048214517), np.float64(0.9174478891149871))
inp_scaling: (np.float64(0.8716631133094582), np.float64(0.2781926883908283), np.float64(0.22287392476587942))
units: (300, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 217.45432,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.573751748581062), np.float64(0.520106727073679), np.float64(0.6163515808167482))
inp_scaling: (np.float64(0.3261448542928796), np.float64(0.5391117940508049), np.float64(0.43006398681736024))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 140.47304,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5742509587800657), np.float64(0.9042133651617608), np.float64(0.8865232233855991))
inp_scaling: (np.float64(0.5491948572235337), np.float64(0.6255393516099249), np.float64(0.3249389575128633))
units: (200, 300, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9859565897074756), np.float64(0.7118114345770015), np.float64(0.5489189552479569))
inp_scaling: (np.float64(0.8783899087697934), np.float64(0.753701304762475), np.float64(0.5548910679143699))
units: (250, 500, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8227900497435366), np.float64(0.6452705683517705), np.float64(0.8416437111872621))
inp_scaling: (np.float64(0.5284822879386555), np.float64(0.1489995073320162), np.float64(0.7428839019262908))
units: (250, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 4966.257,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.82720030712757), np.float64(0.9081608113782518), np.float64(0.9687517929258036))
inp_scaling: (np.float64(0.5889590364578192), np.float64(0.6388517012126871), np.float64(0.8147465692578426))
units: (350, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 11586.842,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6369946625931797), np.float64(0.6261347943449349), np.float64(0.9068025348926071))
inp_scaling: (np.float64(0.5520733988026054), np.float64(0.4461650256526912), np.float64(0.1902613859114641))
units: (250, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 64.49434,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9909106195158635), np.float64(0.7604802041159524), np.float64(0.5842027619478001))
inp_scaling: (np.float64(0.574805271848844), np.float64(0.1464885917350442), np.float64(0.9142782116186857))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 5623.8203,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5782739860697934), np.float64(0.9518290981366803), np.float64(0.6575202241268385))
inp_scaling: (np.float64(0.4518287658281229), np.float64(0.5658817662901938), np.float64(0.20957364652182695))
units: (500, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 124.72631,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7695727390730271), np.float64(0.9447693970445096), np.float64(0.6176260657017355))
inp_scaling: (np.float64(0.16503559854409258), np.float64(0.7493286151445837), np.float64(0.40503930715571623))
units: (250, 500, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 38.89452,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9636012078341909), np.float64(0.5838887091407957), np.float64(0.5938759393127022))
inp_scaling: (np.float64(0.6410771727731336), np.float64(0.4591174102872605), np.float64(0.4022362457623554))
units: (200, 500, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7149236868755993), np.float64(0.8112539235392732), np.float64(0.502641161330013))
inp_scaling: (np.float64(0.22537163026183885), np.float64(0.7209225038520634), np.float64(0.5157503418750534))
units: (350, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 72.75437,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6658979024511738), np.float64(0.7047947162905772), np.float64(0.5062937155086222))
inp_scaling: (np.float64(0.5061427887198465), np.float64(0.7556815341478156), np.float64(0.7017421710043931))
units: (450, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 565.24554,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7819373001355674), np.float64(0.5496170913021794), np.float64(0.8697533960400265))
inp_scaling: (np.float64(0.43381785668726935), np.float64(0.8552273450136597), np.float64(0.5771451934822533))
units: (300, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 197.21597,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9329371657356554), np.float64(0.7256382832102942), np.float64(0.8585527014394999))
inp_scaling: (np.float64(0.1641939868795287), np.float64(0.2726196450130747), np.float64(0.6916220315788478))
units: (450, 400, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7927592938215078), np.float64(0.8873639954366088), np.float64(0.7096711110195373))
inp_scaling: (np.float64(0.6552891674785651), np.float64(0.9385979588783075), np.float64(0.9173021416643935))
units: (350, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 13825.561,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9570274458031225), np.float64(0.5140005479716464), np.float64(0.9014524827427168))
inp_scaling: (np.float64(0.2518070240773599), np.float64(0.986969573915486), np.float64(0.270104766501075))
units: (300, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 15.15765,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9012450799550519), np.float64(0.8725698779687769), np.float64(0.6891766606312008))
inp_scaling: (np.float64(0.444599350177572), np.float64(0.23669372616307882), np.float64(0.3139828880339902))
units: (350, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 41.276455,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7369122533357761), np.float64(0.5067483485697326), np.float64(0.5957678164162515))
inp_scaling: (np.float64(0.5417673665465254), np.float64(0.7975955979128206), np.float64(0.2642294506805392))
units: (350, 400, 200)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9209108197149116), np.float64(0.5776750550658548), np.float64(0.6527737001696726))
inp_scaling: (np.float64(0.4472575653155023), np.float64(0.4064061330605685), np.float64(0.8796249976792669))
units: (300, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1192.0116,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7086457561402786), np.float64(0.9751604856797116), np.float64(0.5378246523580151))
inp_scaling: (np.float64(0.2677790346538369), np.float64(0.5735537067508), np.float64(0.9031263674445009))
units: (250, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 9088.711,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9671531493843859), np.float64(0.8045639634942139), np.float64(0.8552522119086341))
inp_scaling: (np.float64(0.10868738466466087), np.float64(0.6261883318207856), np.float64(0.2854630916635644))
units: (300, 350, 200)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5493343874156794), np.float64(0.850278411352792), np.float64(0.5413009596459957))
inp_scaling: (np.float64(0.8374031604622043), np.float64(0.16774394298171796), np.float64(0.9059114669792397))
units: (300, 200, 300)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7640407922112566), np.float64(0.6586753189504371), np.float64(0.568740547250219))
inp_scaling: (np.float64(0.665689840672304), np.float64(0.5900948263074159), np.float64(0.957025273120046))
units: (400, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 21059.21,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5770011359229079), np.float64(0.8462444064176564), np.float64(0.9604956993982332))
inp_scaling: (np.float64(0.58795115004828), np.float64(0.12059637179884199), np.float64(0.27250924289578))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 447.40005,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8009437398190113), np.float64(0.9748121422280371), np.float64(0.5798452576614094))
inp_scaling: (np.float64(0.6826194813074297), np.float64(0.4667431893525823), np.float64(0.6763396186617991))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 408.58115,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9071755463407191), np.float64(0.9136552511123737), np.float64(0.8555899462314422))
inp_scaling: (np.float64(0.39979688962507065), np.float64(0.32794725765376664), np.float64(0.3295623410419919))
units: (250, 400, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 287.04715,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9160252961947183), np.float64(0.5693610753947193), np.float64(0.7557957991687615))
inp_scaling: (np.float64(0.39611376094430095), np.float64(0.7159870161248973), np.float64(0.31021285798663345))
units: (500, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 90.43725,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.673010776584533), np.float64(0.9917870919694521), np.float64(0.5148287842149462))
inp_scaling: (np.float64(0.873706238308141), np.float64(0.3342928600087748), np.float64(0.19288159869339683))
units: (300, 450, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 109.35389,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7771240400681957), np.float64(0.5811851938342057), np.float64(0.567050961432822))
inp_scaling: (np.float64(0.8440108013782828), np.float64(0.389197447697358), np.float64(0.5780717809265326))
units: (450, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 365.6024,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9476483765955938), np.float64(0.9399868614188485), np.float64(0.6943439462892181))
inp_scaling: (np.float64(0.17006118439342952), np.float64(0.8659477348632604), np.float64(0.1445949192337912))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 51.733315,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.545511481420991), np.float64(0.5834394721031475), np.float64(0.5582631688180788))
inp_scaling: (np.float64(0.9719174438139123), np.float64(0.9975762322701769), np.float64(0.9776358077916569))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 10858.079,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8542220884517087), np.float64(0.8701153110966646), np.float64(0.7084984662397497))
inp_scaling: (np.float64(0.26428550922242106), np.float64(0.48264859076714106), np.float64(0.7262711744070972))
units: (450, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 1862.2848,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.862702905286626), np.float64(0.5279937700213986), np.float64(0.5286792022059024))
inp_scaling: (np.float64(0.802984851518288), np.float64(0.8321124751551248), np.float64(0.7106493808717171))
units: (400, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1708.235,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7758039679896097), np.float64(0.9201571273109042), np.float64(0.9986943021706172))
inp_scaling: (np.float64(0.1984822265785427), np.float64(0.989198199495765), np.float64(0.9685087127400731))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 85033.01,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5595043274644748), np.float64(0.9072918462980818), np.float64(0.727357488655258))
inp_scaling: (np.float64(0.4299710746937264), np.float64(0.1701010802502084), np.float64(0.779488297891621))
units: (250, 450, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9481771832678411), np.float64(0.901310360077012), np.float64(0.7785800513237222))
inp_scaling: (np.float64(0.9991510527832134), np.float64(0.3599403836397713), np.float64(0.4611823313745088))
units: (450, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 126.95322,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9318923477722163), np.float64(0.6763936773087109), np.float64(0.8623147544391618))
inp_scaling: (np.float64(0.2948280955470793), np.float64(0.5593654584351123), np.float64(0.5843326344917542))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 264.8506,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7212712224894571), np.float64(0.8340016326513465), np.float64(0.900637514941718))
inp_scaling: (np.float64(0.4343254344740686), np.float64(0.8873461567729374), np.float64(0.7303849924739653))
units: (300, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 3683.4421,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7183625990325703), np.float64(0.9721747819315165), np.float64(0.503150254291013))
inp_scaling: (np.float64(0.5638596846418275), np.float64(0.9021195671279995), np.float64(0.24221546280492026))
units: (300, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 22.063482,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6151718691029207), np.float64(0.6123041045282218), np.float64(0.908883733260518))
inp_scaling: (np.float64(0.4684016049517674), np.float64(0.9688906429543199), np.float64(0.3718466063062146))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 34.790237,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9591685508380987), np.float64(0.7867854617114247), np.float64(0.8923834191399976))
inp_scaling: (np.float64(0.5506990083996698), np.float64(0.21400383746101626), np.float64(0.5664451864888107))
units: (300, 200, 400)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9158309550535132), np.float64(0.8546554017523643), np.float64(0.6220448166233168))
inp_scaling: (np.float64(0.5146922152811048), np.float64(0.868082831777449), np.float64(0.21218760770385797))
units: (250, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 44.48185,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5665090171511017), np.float64(0.508011322501171), np.float64(0.9052012911419348))
inp_scaling: (np.float64(0.26039134226754934), np.float64(0.5274092923646937), np.float64(0.28078585598887185))
units: (250, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 84.40399,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8431684558984169), np.float64(0.5316123160006707), np.float64(0.5082405190131964))
inp_scaling: (np.float64(0.8466128720436548), np.float64(0.5694979181977029), np.float64(0.5316124029495028))
units: (300, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 270.91684,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9811700437424333), np.float64(0.6406827699365689), np.float64(0.763890708232353))
inp_scaling: (np.float64(0.5548891268490673), np.float64(0.7453899284575833), np.float64(0.35130986969515177))
units: (450, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 49.993046,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7684471772954633), np.float64(0.6175005930332893), np.float64(0.8754496461215264))
inp_scaling: (np.float64(0.31235094690365783), np.float64(0.2951083234092309), np.float64(0.8839434576386603))
units: (250, 200, 200)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6336689619761058), np.float64(0.5615814229063705), np.float64(0.6075012291418307))
inp_scaling: (np.float64(0.7736458791538269), np.float64(0.7280085132561002), np.float64(0.3610945193580155))
units: (500, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 39.01368,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7104024193914378), np.float64(0.673560014191606), np.float64(0.7311029945110731))
inp_scaling: (np.float64(0.5941389909353624), np.float64(0.9982261759788238), np.float64(0.9945938348587295))
units: (400, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 11514.933,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9867290857660088), np.float64(0.6107557854910148), np.float64(0.5987682432022801))
inp_scaling: (np.float64(0.4604870858180471), np.float64(0.8104095976467064), np.float64(0.29827853241555535))
units: (200, 350, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5101750258627288), np.float64(0.7093459401428056), np.float64(0.7257901806132436))
inp_scaling: (np.float64(0.9828051204629775), np.float64(0.6330748126612913), np.float64(0.22204503542310605))
units: (500, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 42.625343,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8132615140940905), np.float64(0.526319347244556), np.float64(0.7655398385445817))
inp_scaling: (np.float64(0.21026141554240613), np.float64(0.28073580036525736), np.float64(0.2080059842769595))
units: (450, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 38.58102,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6125042086155505), np.float64(0.6622024504972276), np.float64(0.6212220633321601))
inp_scaling: (np.float64(0.5773823073313251), np.float64(0.7912749331277805), np.float64(0.3221312723343746))
units: (400, 250, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 22.520592,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9369424383245114), np.float64(0.8006817513426279), np.float64(0.898625735913785))
inp_scaling: (np.float64(0.6773231539307846), np.float64(0.3618078251842618), np.float64(0.2698623234183668))
units: (300, 200, 450)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9599171968362443), np.float64(0.717557554761423), np.float64(0.9300807909371713))
inp_scaling: (np.float64(0.6520855642923062), np.float64(0.46313329873055376), np.float64(0.11558945610039299))
units: (300, 200, 500)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5349874489501627), np.float64(0.6038565523320244), np.float64(0.9383953622260541))
inp_scaling: (np.float64(0.8681949197938976), np.float64(0.6602016348006353), np.float64(0.46683388768235967))
units: (250, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 793.743,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7373488760019715), np.float64(0.5494937047566456), np.float64(0.9769901547413544))
inp_scaling: (np.float64(0.8747304476693876), np.float64(0.20465464008330056), np.float64(0.7063564181912811))
units: (250, 400, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 441.01755,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9621105253124766), np.float64(0.6884704248986914), np.float64(0.8187243126275496))
inp_scaling: (np.float64(0.47931030256503726), np.float64(0.20326151225226713), np.float64(0.18998396360934852))
units: (350, 300, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 196.121,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5146722198180876), np.float64(0.8569040056786291), np.float64(0.9104434895776458))
inp_scaling: (np.float64(0.31078820271973867), np.float64(0.7709687253958551), np.float64(0.44783917166994835))
units: (400, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 70.97998,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9077791524143042), np.float64(0.9453139983975065), np.float64(0.8127427224225363))
inp_scaling: (np.float64(0.9913208465938209), np.float64(0.13526133706334953), np.float64(0.24971395088383772))
units: (350, 450, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 1853.0496,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5835158644631278), np.float64(0.8456541451139437), np.float64(0.8838145454329114))
inp_scaling: (np.float64(0.192955930851428), np.float64(0.894995114957125), np.float64(0.5005677317463365))
units: (200, 400, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9560218145216071), np.float64(0.5670528972618), np.float64(0.7436349350324005))
inp_scaling: (np.float64(0.7059631454143825), np.float64(0.5276552988330948), np.float64(0.3110924600710341))
units: (300, 500, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 82.252716,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9961200273980431), np.float64(0.6139249885736827), np.float64(0.9668488657452621))
inp_scaling: (np.float64(0.6119545759973264), np.float64(0.8572600942709537), np.float64(0.10752889097528193))
units: (400, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 26.222485,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5170544941386592), np.float64(0.7260578390175341), np.float64(0.696282893106125))
inp_scaling: (np.float64(0.49323267056349185), np.float64(0.28599560712577426), np.float64(0.37954563210515846))
units: (450, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 151.27165,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8219474748353937), np.float64(0.8721208564466737), np.float64(0.5015364817838323))
inp_scaling: (np.float64(0.3712150158210805), np.float64(0.6830670171574486), np.float64(0.7976392781283811))
units: (250, 200, 450)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.574849991978535), np.float64(0.6460512349688023), np.float64(0.8575022095972027))
inp_scaling: (np.float64(0.49719770767723936), np.float64(0.8417169895988074), np.float64(0.28128064550382303))
units: (500, 200, 400)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5760541221829694), np.float64(0.9064991041731798), np.float64(0.6226767294530968))
inp_scaling: (np.float64(0.1052419576681935), np.float64(0.701237672488412), np.float64(0.41500530201664587))
units: (500, 450, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 128.04749,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8698220241820469), np.float64(0.8604952505855209), np.float64(0.9747178991453416))
inp_scaling: (np.float64(0.6810180679636402), np.float64(0.7972572205630835), np.float64(0.1964806823883321))
units: (250, 200, 500)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5612530270953181), np.float64(0.8379868825217454), np.float64(0.6400947815820588))
inp_scaling: (np.float64(0.9002479961275311), np.float64(0.2989123993350681), np.float64(0.3199225573230978))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 209.74944,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9405078225248975), np.float64(0.6273833908917038), np.float64(0.5661129079550564))
inp_scaling: (np.float64(0.10199092960327572), np.float64(0.5639734236128249), np.float64(0.8807055487497949))
units: (450, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 323.375,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5021817854438115), np.float64(0.8557740843731063), np.float64(0.934272244866724))
inp_scaling: (np.float64(0.8045418245283998), np.float64(0.8613496754805519), np.float64(0.7420013605699286))
units: (500, 400, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 7702.8853,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8180855349626435), np.float64(0.5207134642238851), np.float64(0.8691293598431244))
inp_scaling: (np.float64(0.814208594567666), np.float64(0.4211626271562785), np.float64(0.4769478109884333))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 153.58743,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9725769309486689), np.float64(0.595278027586858), np.float64(0.919199102497509))
inp_scaling: (np.float64(0.5471601019189395), np.float64(0.27454099308283153), np.float64(0.798433268918734))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 6169.831,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5225259216291427), np.float64(0.9134061873206193), np.float64(0.7587792413691231))
inp_scaling: (np.float64(0.48248429986939956), np.float64(0.5698790005442318), np.float64(0.19205345978718688))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 188.94035,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8412264441397286), np.float64(0.9693383520865699), np.float64(0.6367568564430115))
inp_scaling: (np.float64(0.45985805637981525), np.float64(0.598028411934966), np.float64(0.9543524978363269))
units: (300, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 2575.934,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9129009761252285), np.float64(0.7197256725901624), np.float64(0.8399520976821118))
inp_scaling: (np.float64(0.4723416548039704), np.float64(0.6877401136355878), np.float64(0.3570713934439578))
units: (200, 250, 350)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7094093272941903), np.float64(0.773891054018638), np.float64(0.904535133178408))
inp_scaling: (np.float64(0.2155268215495591), np.float64(0.7667146861645667), np.float64(0.2588422518185991))
units: (350, 450, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 55.136772,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5663047255236029), np.float64(0.8669713135158816), np.float64(0.9336268082974847))
inp_scaling: (np.float64(0.17705359953335012), np.float64(0.4777370162553717), np.float64(0.47539217326434013))
units: (200, 400, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8842108710037977), np.float64(0.7719925860565273), np.float64(0.7166364350875034))
inp_scaling: (np.float64(0.33463244374872664), np.float64(0.3851918696685871), np.float64(0.1737490564572335))
units: (400, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 137.43033,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7285365763262055), np.float64(0.8686321578972065), np.float64(0.6147247568008685))
inp_scaling: (np.float64(0.4153277824430287), np.float64(0.7620573378310651), np.float64(0.5001995247941778))
units: (450, 250, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 211.39526,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.648932826832005), np.float64(0.7004242362332973), np.float64(0.5540576379460002))
inp_scaling: (np.float64(0.9625958842539213), np.float64(0.7345957664394352), np.float64(0.47228679426399056))
units: (250, 450, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 28.741272,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8209969043225878), np.float64(0.7587927953558429), np.float64(0.8163189692944461))
inp_scaling: (np.float64(0.39597294293638585), np.float64(0.41490732427965393), np.float64(0.6070040270109948))
units: (200, 300, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8088877330272803), np.float64(0.6003402334325809), np.float64(0.6858809413056279))
inp_scaling: (np.float64(0.12679447379330577), np.float64(0.9270903475878537), np.float64(0.7210073558189336))
units: (200, 450, 300)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.7902597469414138), np.float64(0.9618489723626962), np.float64(0.8078524181810811))
inp_scaling: (np.float64(0.3244428478274766), np.float64(0.5722116682622644), np.float64(0.9359935067274642))
units: (400, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 9704.113,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6076533346410792), np.float64(0.7294821874364068), np.float64(0.6831349223846386))
inp_scaling: (np.float64(0.1406219316827235), np.float64(0.4021201182924632), np.float64(0.6277647784196215))
units: (500, 350, 350)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 350 units.

 ##################################################################### 
Mean NRMSE 774.09924,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8672540651269871), np.float64(0.5234953989756537), np.float64(0.8470002549036453))
inp_scaling: (np.float64(0.5333281813060688), np.float64(0.4283507959812447), np.float64(0.9589940984968018))
units: (250, 300, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 25390.232,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7000427932869101), np.float64(0.5660440388240982), np.float64(0.6195880233726128))
inp_scaling: (np.float64(0.12893463699634589), np.float64(0.8425780261696632), np.float64(0.9756154512501168))
units: (250, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 69939.76,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6691307552432326), np.float64(0.993209131529236), np.float64(0.6254270855685553))
inp_scaling: (np.float64(0.15925424714588668), np.float64(0.4573508817104859), np.float64(0.7762853024510309))
units: (200, 450, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.685110514553283), np.float64(0.9075830943249755), np.float64(0.9523731102327901))
inp_scaling: (np.float64(0.560459242619036), np.float64(0.5769765378359539), np.float64(0.7097527255096345))
units: (350, 350, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 8347.542,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.811482689578075), np.float64(0.9223277206722176), np.float64(0.6106324338824942))
inp_scaling: (np.float64(0.5230901075081866), np.float64(0.5942882245380704), np.float64(0.31771097579428065))
units: (300, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 54.89143,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8998077946283061), np.float64(0.7642910538629377), np.float64(0.9751729702524294))
inp_scaling: (np.float64(0.12729686536111526), np.float64(0.40902609883247054), np.float64(0.8561103176697474))
units: (250, 350, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 612.9421,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9927728220048815), np.float64(0.9330739712711809), np.float64(0.6745029883124648))
inp_scaling: (np.float64(0.17751509500178164), np.float64(0.3377086222272134), np.float64(0.3538684944025814))
units: (450, 250, 200)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 472, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=3,
        ^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.5912975708900163), np.float64(0.5305276150515331), np.float64(0.986378950539883))
inp_scaling: (np.float64(0.9692905635966085), np.float64(0.2522589577862596), np.float64(0.13506542428681367))
units: (200, 250, 400)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6083612968152162), np.float64(0.8094632492343378), np.float64(0.9676919505876002))
inp_scaling: (np.float64(0.8942547277389463), np.float64(0.6357847347960008), np.float64(0.6878405078502757))
units: (400, 250, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 3050.679,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7252065744550255), np.float64(0.8803012916072158), np.float64(0.992486558672999))
inp_scaling: (np.float64(0.9483079515314833), np.float64(0.7843286376108495), np.float64(0.2822178434006213))
units: (250, 350, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 161.97112,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5385109549934792), np.float64(0.5466886927738092), np.float64(0.8228759822135462))
inp_scaling: (np.float64(0.818267870904832), np.float64(0.4925190433248291), np.float64(0.8531896265283652))
units: (250, 400, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 8109.5376,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8293391265117918), np.float64(0.94313389687024), np.float64(0.6902359069062141))
inp_scaling: (np.float64(0.7416218189070866), np.float64(0.5846776865919628), np.float64(0.14929107896589924))
units: (450, 500, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 187.80565,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6848792095406052), np.float64(0.5218538668922776), np.float64(0.902025430760927))
inp_scaling: (np.float64(0.392934253166876), np.float64(0.12623874097644527), np.float64(0.4404590889800759))
units: (350, 300, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 477.23965,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5657525120115008), np.float64(0.9508337732458441), np.float64(0.7923489614651587))
inp_scaling: (np.float64(0.25413907445664385), np.float64(0.7577491904893733), np.float64(0.8616304672438929))
units: (350, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 5239.1313,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8157234550137329), np.float64(0.9109401398861764), np.float64(0.7450557172150712))
inp_scaling: (np.float64(0.8875422132501143), np.float64(0.40828496233531353), np.float64(0.733930765799798))
units: (250, 500, 500)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 500 units.

 ##################################################################### 
Mean NRMSE 104.598,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.7674796245860606), np.float64(0.9466615159704872), np.float64(0.6285087495643887))
inp_scaling: (np.float64(0.36358392471564815), np.float64(0.9426328881959307), np.float64(0.9978517466918466))
units: (450, 400, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 23306.928,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8374433297439502), np.float64(0.793836082207641), np.float64(0.508840607445199))
inp_scaling: (np.float64(0.33090606786479004), np.float64(0.21136594325876296), np.float64(0.25066750569519763))
units: (350, 500, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 480.55933,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6917439543556583), np.float64(0.6209276629534275), np.float64(0.6424533875866731))
inp_scaling: (np.float64(0.5983835287297179), np.float64(0.1483762073808291), np.float64(0.6420941195750193))
units: (400, 200, 500)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.6874604573199018), np.float64(0.9261488624007737), np.float64(0.6458633856962392))
inp_scaling: (np.float64(0.17912513524511509), np.float64(0.834638043762178), np.float64(0.32943570124526583))
units: (200, 250, 450)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.8785281150343067), np.float64(0.6869509145955965), np.float64(0.9540850107658587))
inp_scaling: (np.float64(0.10335442069521827), np.float64(0.7084289629316056), np.float64(0.7274793382488868))
units: (200, 250, 250)
[RESERVOIR CELL 0] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 429, in __init__
    ReservoirModule(
    ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.9455815153436541), np.float64(0.5132179854206441), np.float64(0.600916586537027))
inp_scaling: (np.float64(0.21323769713795643), np.float64(0.3426062111507083), np.float64(0.3069855507237037))
units: (250, 500, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 500 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 194.01607,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8968137035455397), np.float64(0.8822611577047731), np.float64(0.5596864044334596))
inp_scaling: (np.float64(0.2845770211583334), np.float64(0.5916026159101565), np.float64(0.35495579380306674))
units: (400, 300, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 66.1038,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.5795728802604267), np.float64(0.8856578173476498), np.float64(0.8896658970200613))
inp_scaling: (np.float64(0.8173324687551357), np.float64(0.6167598237064416), np.float64(0.35316956930965515))
units: (250, 250, 400)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 250 units.

[RESERVOIR CELL 2] created with 400 units.

 ##################################################################### 
Mean NRMSE 75.04409,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8165241668557688), np.float64(0.6403328787014959), np.float64(0.9314126895622538))
inp_scaling: (np.float64(0.3564370405735179), np.float64(0.49869778153926414), np.float64(0.719265511593331))
units: (350, 350, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 350 units.

[RESERVOIR CELL 1] created with 350 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 36606.523,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6913578434104809), np.float64(0.876609144517964), np.float64(0.9429005033365074))
inp_scaling: (np.float64(0.7360437812873285), np.float64(0.8411203546216998), np.float64(0.8039265096603446))
units: (300, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 300 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 31627.416,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.6193558901250885), np.float64(0.8698904118472446), np.float64(0.664032670542658))
inp_scaling: (np.float64(0.5583783955183486), np.float64(0.764579492813368), np.float64(0.6889676151490125))
units: (400, 450, 300)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 450 units.

[RESERVOIR CELL 2] created with 300 units.

 ##################################################################### 
Mean NRMSE 1290.5022,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.8598304810539881), np.float64(0.6513739818080513), np.float64(0.7388657791584915))
inp_scaling: (np.float64(0.34291469885614706), np.float64(0.8436517530363302), np.float64(0.8064330868335897))
units: (500, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 500 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 493.50537,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9084881663441874), np.float64(0.9606379158101966), np.float64(0.7126472997241085))
inp_scaling: (np.float64(0.9297625456991754), np.float64(0.20628514953748028), np.float64(0.8285198237487021))
units: (250, 400, 450)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 250 units.

[RESERVOIR CELL 1] created with 400 units.

[RESERVOIR CELL 2] created with 450 units.

 ##################################################################### 
Mean NRMSE 1190.3829,    std 0.0
 ##################################################################### 




--- Config ---
leaky: (np.float64(0.9336635824091046), np.float64(0.507331555901247), np.float64(0.6342453428162184))
inp_scaling: (np.float64(0.6933626739937649), np.float64(0.37886353005013285), np.float64(0.364578612563094))
units: (450, 200, 350)
[RESERVOIR CELL 0] created with 450 units.

[RESERVOIR CELL 1] created with 200 units.

Traceback (most recent call last):
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py", line 112, in <module>
    model = DeepReservoir(
            ~~~~~~~~~~~~~^
        input_size=n_inp, output_size=n_out, n_modules=n_modules, mode=mode, # parameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<2 lines>...
        leakys=leakys, inp_scalings=inp_scalings, units=units # hyperparameters
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ).to(device)
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 460, in __init__
    reservoir_modules.append(ReservoirModule(
                             ~~~~~~~~~~~~~~~^
        input_size=module_inputs,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<8 lines>...
        connectivity_recurrent=connectivity_recurrent
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ))
    ^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 251, in __init__
    self.net = ReservoirCell(input_size, output_size, units, index, n_modules, input_scaling,
               ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             spectral_radius, leaky, connectivity_input,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             connectivity_recurrent)
                             ^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 147, in __init__
    self.kernel = sparse_tensor_init(input_size, self.units,
                  ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
                                     self.connectivity_input) * self.input_scaling
                                     ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py", line 62, in sparse_tensor_init
    idx = np.random.choice(N, size=C, replace=False)
  File "numpy/random/mtrand.pyx", line 1020, in numpy.random.mtrand.RandomState.choice
ValueError: Cannot take a larger sample than population when 'replace=False'



--- Config ---
leaky: (np.float64(0.670079037138499), np.float64(0.6806088758663272), np.float64(0.8171021688614346))
inp_scaling: (np.float64(0.25509332113010874), np.float64(0.9909255115896948), np.float64(0.9659127348119941))
units: (400, 300, 250)
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/lorenz.py:196: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_target = torch.tensor(test_dataset[0:n], dtype=torch.float32).reshape(-1, n_out).numpy() # reshape element to torch.Size([rows=len(train_target), columns=3])
/Users/matt/Desktop/Tesi/Codice/ESN & attrattori/lorenz attractor/esn_alternative.py:653: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(predictions, dtype=torch.float32)
[RESERVOIR CELL 0] created with 400 units.

[RESERVOIR CELL 1] created with 300 units.

[RESERVOIR CELL 2] created with 250 units.

 ##################################################################### 
Mean NRMSE 154656.33,    std 0.0
 ##################################################################### 



